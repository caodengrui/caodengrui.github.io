<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>网易云</title>
    <link href="/article/wangyiyun/"/>
    <url>/article/wangyiyun/</url>
    
    <content type="html"><![CDATA[<h1 id="网易云"><a href="#网易云" class="headerlink" title="网易云"></a>网易云</h1><h2 id="网易云后端接口"><a href="#网易云后端接口" class="headerlink" title="网易云后端接口"></a>网易云后端接口</h2><h3 id="github仓库地址"><a href="#github仓库地址" class="headerlink" title="github仓库地址"></a>github仓库地址</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">https://github.com/Binaryify/NeteaseCloudMusicApi<br></code></pre></td></tr></table></figure><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>需要NodeJS 8.12+</p><p>git</p><h3 id="下载到本地"><a href="#下载到本地" class="headerlink" title="下载到本地"></a>下载到本地</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git clone git@github.com:Binaryify/NeteaseCloudMusicApi.git<br></code></pre></td></tr></table></figure><h3 id="下载依赖"><a href="#下载依赖" class="headerlink" title="下载依赖"></a>下载依赖</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 先进入下载好的文件目录，打开<span class="hljs-built_in">cmd</span><br>npm install<br></code></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd">node app.js<br># 默认端口为<span class="hljs-number">3000</span>，可以指定端口<br>PORT=<span class="hljs-number">4000</span> node app.js<br># windows下使用git-bash或者cmder等终端执行以下命令<br><span class="hljs-built_in">set</span> PORT=<span class="hljs-number">4000</span> &amp;&amp; node app.js<br></code></pre></td></tr></table></figure><h2 id="网易云前端"><a href="#网易云前端" class="headerlink" title="网易云前端"></a>网易云前端</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><ul><li>创建文件夹 网易云前端</li><li>把文件夹拖入vscode</li><li>打开终端</li><li>命令行创建vue项目</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd">vue create wangyiyun-app<br># 空格选择 vuex,router,babel， 去掉校验<br># 版本选择<span class="hljs-number">3</span>.x<br><span class="hljs-built_in">cd</span> wangyiyun-app<br>npm run serve<br></code></pre></td></tr></table></figure><h3 id="实现rem布局"><a href="#实现rem布局" class="headerlink" title="实现rem布局"></a>实现rem布局</h3><p>在public目录下创建js文件夹，在js目录下创建rem.js文件</p><p>rem.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">remSize</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 获取设备的宽度</span><br>    <span class="hljs-keyword">var</span> deviceWidth = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientWidth</span> || <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>;<br>    <span class="hljs-keyword">if</span> (deviceWidth &gt;= <span class="hljs-number">750</span>) &#123;<br>        deviceWidth = <span class="hljs-number">750</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (deviceWidth &lt;= <span class="hljs-number">320</span>) &#123;<br>        deviceWidth = <span class="hljs-number">320</span>;<br>    &#125;<br><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = (deviceWidth/<span class="hljs-number">7.5</span>) + <span class="hljs-string">&#x27;px&#x27;</span>;<br>    <span class="hljs-comment">// 设置字体大小</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;body&#x27;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = <span class="hljs-number">0.3</span> + <span class="hljs-string">&#x27;rem&#x27;</span>;<br>&#125;<br><br><span class="hljs-title function_">remSize</span>();<br><span class="hljs-comment">// 当窗口发送变化</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">remSize</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>在index.html中引用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">noscript</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">noscript</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引用rem.js--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&lt;%= BASE_URL %&gt;js/rem.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- built files will be auto injected --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h3><p>iconfont</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">https://www.iconfont.cn/<br></code></pre></td></tr></table></figure><p>symbol类型</p><p>在index.html中引用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">在<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span> 标签里引用<br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//at.alicdn.com/t/font_3430822_11fkbp1kda5b.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">use</span> <span class="hljs-attr">xlink:href</span>=<span class="hljs-string">&quot;#icon-xxx&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">use</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><p>安装px转rem的插件</p><p>搜索px，安装好，扩展设置，16改为50</p><h3 id="安装vant-ui"><a href="#安装vant-ui" class="headerlink" title="安装vant-ui"></a>安装vant-ui</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm i vant<br><br># 安装插件<br>npm i babel-plugin-import -D<br></code></pre></td></tr></table></figure><p>在bable.config.js中加入下面代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;plugins&quot;</span>: [<br>   [<br>     <span class="hljs-string">&quot;import&quot;</span>,<br>     &#123;<br>       <span class="hljs-string">&quot;libraryName&quot;</span>: <span class="hljs-string">&quot;vant&quot;</span>,<br>       <span class="hljs-string">&quot;libraryDirectory&quot;</span>: <span class="hljs-string">&quot;es&quot;</span>,<br>       <span class="hljs-string">&quot;style&quot;</span>: <span class="hljs-literal">true</span><br>     &#125;<br>   ]<br> ]<br></code></pre></td></tr></table></figure><p>在main.js中全局引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Button</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vant&#x27;</span><br><br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Button</span>)<br>app.<span class="hljs-title function_">use</span>(store).<span class="hljs-title function_">use</span>(router).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="统一管理vant组件"><a href="#统一管理vant组件" class="headerlink" title="统一管理vant组件"></a>统一管理vant组件</h3><p>在src目录下创建plugins文件夹，在plugins下创建index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Swipe</span>, <span class="hljs-title class_">SwipeItem</span>,<span class="hljs-title class_">Button</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vant&#x27;</span>;<br><span class="hljs-comment">// 统一管理vant组件</span><br><span class="hljs-keyword">let</span> plugins = [<br>    <span class="hljs-title class_">Swipe</span>,<span class="hljs-title class_">SwipeItem</span>,<span class="hljs-title class_">Button</span><br>]<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getVant</span>(<span class="hljs-params">app</span>) &#123;<br>    plugins.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">plugin</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> app.<span class="hljs-title function_">use</span>(plugin)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>修改main.js ,修改后的main.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><span class="hljs-keyword">import</span> getVant <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./plugins&#x27;</span><br><br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br><span class="hljs-title function_">getVant</span>(app)<br>app.<span class="hljs-title function_">use</span>(store).<span class="hljs-title function_">use</span>(router).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="安装axios"><a href="#安装axios" class="headerlink" title="安装axios"></a>安装axios</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install axios<br></code></pre></td></tr></table></figure><h3 id="用axios调用轮播接口"><a href="#用axios调用轮播接口" class="headerlink" title="用axios调用轮播接口"></a>用axios调用轮播接口</h3><p>导入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">import</span> &#123;onMounted&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> images = [<br>      <span class="hljs-string">&#x27;https://img.yzcdn.cn/vant/apple-1.jpg&#x27;</span>,<br>      <span class="hljs-string">&#x27;https://img.yzcdn.cn/vant/apple-2.jpg&#x27;</span>,<br>      <span class="hljs-string">&#x27;https://img.yzcdn.cn/vant/apple-3.jpg&#x27;</span>,<br>    ];<br><br>    <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/api/home/swiper&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>)<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">images</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span><br>        &#125;)<br>    &#125;)<br>    <span class="hljs-keyword">return</span> &#123; images &#125;;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>最终的SwiperTop.vue文件代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;van-swipe :autoplay=&quot;3000&quot; lazy-render&gt;<br>            &lt;van-swipe-item v-for=&quot;image in state.images&quot; :key=&quot;image&quot;&gt;<br>                &lt;img class=&quot;img1&quot; :src=&quot;image.pic&quot; /&gt;<br>            &lt;/van-swipe-item&gt;<br>        &lt;/van-swipe&gt;<br>    &lt;/div&gt;<br><br><br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import axios from &#x27;axios&#x27;<br>import &#123;reactive,onMounted&#125; from &#x27;vue&#x27;<br>export default &#123;<br>  setup() &#123;<br>    const state = reactive(&#123;<br>        images: [<br><br>        ]<br>        &#125;);<br>    <br>    onMounted(()=&gt;&#123;<br>        axios.get(&#x27;http://localhost:3000/banner?type=2&#x27;).then(res=&gt;&#123;<br>            console.log(res)<br>            state.images = res.data.banners<br>        &#125;)<br>    &#125;)<br>    return &#123; state &#125;;<br>  &#125;,<br>&#125;;<br><br><br>&lt;/script&gt;<br><br><br>&lt;style lang = &quot;less&quot; scoped&gt;<br>    .van-swipe&#123;<br>        width: 100%;<br>        padding: 10px;<br>        <br>    &#125;<br>    .van-swipe__track&#123;<br>            width: 100%;<br>            height: 100%;<br>        <br>    &#125;<br>    .img1&#123;<br>        width: 80%;<br>        height: 150px;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="封装axios请求"><a href="#封装axios请求" class="headerlink" title="封装axios请求"></a>封装axios请求</h3><p>在src目录下创建request文件夹，再创建index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><span class="hljs-keyword">let</span> service = axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span>,<br>    <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span><br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> service<br></code></pre></td></tr></table></figure><p>在request下创建api文件夹，再创建home.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> service <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;..&quot;</span>;<br><span class="hljs-comment">// 获取首页轮播图的数据</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getBanner</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">service</span>(&#123;<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/banner?type=2&#x27;</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>修改SwiperTop.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">import</span> &#123;getBanner&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/request/api/home&#x27;</span><br><span class="hljs-keyword">import</span> &#123;reactive,onMounted&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> state = <span class="hljs-title function_">reactive</span>(&#123;<br>        <span class="hljs-attr">images</span>: [<br><br>        ]<br>        &#125;);<br>    <br>    <span class="hljs-title function_">onMounted</span>(<span class="hljs-keyword">async</span> ()=&gt;&#123;<br>        <span class="hljs-comment">// axios.get(&#x27;http://localhost:3000/banner?type=2&#x27;).then(res=&gt;&#123;</span><br>        <span class="hljs-comment">//     state.images = res.data.banners</span><br>        <span class="hljs-comment">// &#125;)</span><br>        <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getBanner</span>();<br>        state.<span class="hljs-property">images</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">banners</span><br>    &#125;)<br>    <span class="hljs-keyword">return</span> &#123; state &#125;;<br>  &#125;,<br>&#125;;<br><br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;router-link :to=<span class="hljs-string">&quot;&#123;path:&#x27;/itemMusic/&#x27;,query:&#123;id:item.id&#125;&#125;&quot;</span>&gt;<br><span class="hljs-comment">// 获取id</span><br>   <span class="hljs-keyword">let</span> id = <span class="hljs-title function_">useRoute</span>().<span class="hljs-property">query</span>.<span class="hljs-property">id</span>;<br></code></pre></td></tr></table></figure><h3 id="路由返回"><a href="#路由返回" class="headerlink" title="路由返回"></a>路由返回</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">@click=<span class="hljs-string">&quot;$router.go(-1)&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vmware</title>
    <link href="/article/vmware/"/>
    <url>/article/vmware/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://zhuanlan.zhihu.com/p/664735518">https://zhuanlan.zhihu.com/p/664735518</a></p></blockquote><p>vmware下载地址</p><blockquote><p><a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html</a></p></blockquote><p>激活秘钥</p><p>JU090-6039P-08409-8J0QH-2YR7F</p><p>ubuntu镜像下载地址</p><blockquote><p><a href="https://ubuntu.com/download/desktop">https://ubuntu.com/download/desktop</a></p></blockquote><p>修改root密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">su passwd<br></code></pre></td></tr></table></figure><p>切换root</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">su<br><span class="hljs-meta"># </span><span class="language-bash">输入之前修改的密码</span><br></code></pre></td></tr></table></figure><p>使用ifconfig，需要安装net-tools</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install net-tools<br></code></pre></td></tr></table></figure><p>ubuntu安装ssh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta"># </span><span class="language-bash">查看是否安装ssh了，如果输出了openssh-server</span><br>dpkg -l | grep ssh<br><span class="hljs-meta"># </span><span class="language-bash">安装ssh</span><br>sudo apt-get install openssh-server<br><span class="hljs-meta"># </span><span class="language-bash">查看ssh是否启动</span><br>service ssh status<br><span class="hljs-meta"></span><br><span class="hljs-meta"># </span><span class="language-bash">重启ssh</span><br>sudo service ssh restart<br><br></code></pre></td></tr></table></figure><p>ubuntu安装docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt update<br><br>sudo apt install apt-transport-https ca-certificates curl software-properties-common<br><br>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg<br><br><br>echo &quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null<br><br>sudo apt update<br><br>sudo apt install docker-ce docker-ce-cli containerd.io<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringSecurity</title>
    <link href="/article/springsecurity/"/>
    <url>/article/springsecurity/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h1><h2 id="SpringBoot整合SpringSecurity"><a href="#SpringBoot整合SpringSecurity" class="headerlink" title="SpringBoot整合SpringSecurity"></a>SpringBoot整合SpringSecurity</h2><p>创建一个SpringBoot项目，导入SpringSecurity的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="SpringSecurity概念"><a href="#SpringSecurity概念" class="headerlink" title="SpringSecurity概念"></a>SpringSecurity概念</h2><ul><li>Authentication接口: 他的实现类，表示当前访问系统的用户，封装了用户的信息</li><li>AuthenticationManager接口：定义了认证Authentication的方法</li><li>UserDetailsService接口：加载用户特定数据的核心接口。里面定义了一个根据用户名查询用户信息的方法</li><li>UserDetails接口：提供核心用户信息。通过UserDetailsService根据用户名获取处理的用户信息要封装成UserDetails对象返回。然后将这些信息封装到Authentication对象中</li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> Navicat Premium Data Transfer</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Source Server         : 192.168.140.129虚拟机</span><br><span class="hljs-comment"> Source Server Type    : MySQL</span><br><span class="hljs-comment"> Source Server Version : 80020</span><br><span class="hljs-comment"> Source Host           : 192.168.140.129:3306</span><br><span class="hljs-comment"> Source Schema         : springsecuritytest</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Target Server Type    : MySQL</span><br><span class="hljs-comment"> Target Server Version : 80020</span><br><span class="hljs-comment"> File Encoding         : 65001</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Date: 19/09/2023 16:38:01</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">SET</span> NAMES utf8mb4;<br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for t_menu</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `t_menu`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_menu`  (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键&#x27;</span>,<br>  `perm_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;权限名&#x27;</span>,<br>  `path` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;路径&#x27;</span>,<br>  `permissions` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;权限&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE <span class="hljs-operator">=</span> InnoDB AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">3</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="hljs-operator">=</span> <span class="hljs-keyword">Dynamic</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of t_menu</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_menu` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;测试1&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;system:test:test1&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_menu` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;测试2&#x27;</span>, <span class="hljs-string">&#x27;test2&#x27;</span>, <span class="hljs-string">&#x27;system:test2:test1&#x27;</span>);<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for t_role</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `t_role`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_role`  (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键&#x27;</span>,<br>  `role_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;角色名&#x27;</span>,<br>  `role_key` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;角色值&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE <span class="hljs-operator">=</span> InnoDB AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">3</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="hljs-operator">=</span> <span class="hljs-keyword">Dynamic</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of t_role</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_role` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;管理员1&#x27;</span>, <span class="hljs-string">&#x27;role1&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_role` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;管理员2&#x27;</span>, <span class="hljs-string">&#x27;role2&#x27;</span>);<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for t_role_menu</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `t_role_menu`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_role_menu`  (<br>  `menu_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;菜单id&#x27;</span>,<br>  `role_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;角色id&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`menu_id`, `role_id`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE <span class="hljs-operator">=</span> InnoDB <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="hljs-operator">=</span> <span class="hljs-keyword">Dynamic</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of t_role_menu</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_role_menu` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_role_menu` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_role_menu` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for t_user</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `t_user`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_user`  (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键id&#x27;</span>,<br>  `user_code` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;编号&#x27;</span>,<br>  `user_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>  `pass_word` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;密码&#x27;</span>,<br>  `deleted` <span class="hljs-type">int</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;逻辑删除&#x27;</span>,<br>  `create_time` datetime(<span class="hljs-number">0</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `update_time` datetime(<span class="hljs-number">0</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `create_user` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;创建人员编号&#x27;</span>,<br>  `update_user` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;修改人员编号&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE <span class="hljs-operator">=</span> InnoDB AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">3</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="hljs-operator">=</span> <span class="hljs-keyword">Dynamic</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of t_user</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_user` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;cdr20230912&#x27;</span>, <span class="hljs-string">&#x27;cdr&#x27;</span>, <span class="hljs-string">&#x27;&#123;noop&#125;asdf1&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">NULL</span>, <span class="hljs-keyword">NULL</span>, <span class="hljs-keyword">NULL</span>, <span class="hljs-keyword">NULL</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_user` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;qtp&#x27;</span>, <span class="hljs-string">&#x27;qtp&#x27;</span>, <span class="hljs-string">&#x27;&#123;noop&#125;asdf1&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">NULL</span>, <span class="hljs-keyword">NULL</span>, <span class="hljs-keyword">NULL</span>, <span class="hljs-keyword">NULL</span>);<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for t_user_role</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `t_user_role`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_user_role`  (<br>  `user_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户id&#x27;</span>,<br>  `role_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;角色id&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`user_id`, `role_id`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE <span class="hljs-operator">=</span> InnoDB <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="hljs-operator">=</span> <span class="hljs-keyword">Dynamic</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of t_user_role</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_user_role` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_user_role` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_user_role` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br></code></pre></td></tr></table></figure><h2 id="Spring-Security配置"><a href="#Spring-Security配置" class="headerlink" title="Spring Security配置"></a>Spring Security配置</h2><h3 id="包装UserDetails对象"><a href="#包装UserDetails对象" class="headerlink" title="包装UserDetails对象"></a>包装UserDetails对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityUser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br><br><br>    <span class="hljs-keyword">private</span> User user;<br><br>    <span class="hljs-comment">// 权限</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; permissions;<br><br><br>    <span class="hljs-comment">// 不会被序列化</span><br>    <span class="hljs-meta">@JSONField(serialize = false)</span><br>    List&lt;SimpleGrantedAuthority&gt; authorities;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SecurityUser</span><span class="hljs-params">(User user, List&lt;String&gt; list)</span> &#123;<br>        <span class="hljs-built_in">this</span>.user = user;<br>        <span class="hljs-built_in">this</span>.permissions = list;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;<br><br><br>        <span class="hljs-comment">// spring security获取权限</span><br>        <span class="hljs-comment">// 把 String类型的permissions 封装成SimpleGrantedAuthority对象</span><br>        <span class="hljs-keyword">if</span> (authorities != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> authorities;<br>        &#125;<br><br>        authorities = permissions.stream()<br>                .map(SimpleGrantedAuthority::<span class="hljs-keyword">new</span>)<br>                .collect(Collectors.toList());<br>        <span class="hljs-keyword">return</span> authorities;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> user.getPassWord();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> user.getUserCode();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnabled</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义UserDetailsService实现类"><a href="#自定义UserDetailsService实现类" class="headerlink" title="自定义UserDetailsService实现类"></a>自定义UserDetailsService实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDetailsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> MenuMapper menuMapper;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String userCode)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br><br>        <span class="hljs-comment">// 查询用户信息</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;().eq(<span class="hljs-string">&quot;user_code&quot;</span>, userCode));<br>        <span class="hljs-keyword">if</span> (Objects.isNull(user)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;账号或密码错误&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 查询权限</span><br>        List&lt;String&gt; list = menuMapper.getPermissionsByUserId(user.getId());<br><br>        <span class="hljs-comment">// 封装成UserDetails返回</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityUser</span>(user,list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="SecurtiyConfig-java"><a href="#SecurtiyConfig-java" class="headerlink" title="SecurtiyConfig.java"></a>SecurtiyConfig.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span><span class="hljs-comment">// 使用注解配置权限</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SecurityTokenFilter securityTokenFilter;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccessDeniedHandlerImpl accessDeniedHandler;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AuthenticationEntryPointImpl authenticationEntryPoint;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http<br>                <span class="hljs-comment">// 关闭csrf</span><br>                .csrf().disable()<br>                <span class="hljs-comment">// 不通过session获取SecurityContext</span><br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)<br>                .and()<br>                .authorizeRequests()<br>                <span class="hljs-comment">// 登录放行</span><br>                .antMatchers(<span class="hljs-string">&quot;/user/login&quot;</span>).anonymous()<br>                <span class="hljs-comment">// 除上面的，所有请求都要鉴权认证</span><br>                .anyRequest().authenticated();<br>        <span class="hljs-comment">// 配置过滤器</span><br>        http.addFilterBefore(securityTokenFilter, UsernamePasswordAuthenticationFilter.class);<br>        <span class="hljs-comment">// 配置异常处理</span><br>        http.exceptionHandling()<br>                .authenticationEntryPoint(authenticationEntryPoint)<br>                .accessDeniedHandler(accessDeniedHandler);<br>        <span class="hljs-comment">// 允许跨域</span><br>        http.cors();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManagerBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.authenticationManagerBean();<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    *  创建BCryptPasswordEncoder，注入容器</span><br><span class="hljs-comment">    * */</span><br>   <span class="hljs-comment">/* @Bean</span><br><span class="hljs-comment">    public BCryptPasswordEncoder passwordEncoder() &#123;</span><br><span class="hljs-comment">        return new BCryptPasswordEncoder();</span><br><span class="hljs-comment">    &#125;*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="过滤器配置"><a href="#过滤器配置" class="headerlink" title="过滤器配置"></a>过滤器配置</h3><p>SecurityTokenFilter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityTokenFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OncePerRequestFilter</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">// 获取token</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">headerToken</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == headerToken || headerToken.trim().equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>            <span class="hljs-comment">// 放行</span><br>            filterChain.doFilter(request,response);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 解析token</span><br>        String userId;<br>        <span class="hljs-keyword">try</span> &#123;<br>            userId = TokenUtil.analysisToken(headerToken);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;非法token&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 从redis获取用户信息</span><br>        <span class="hljs-type">SecurityUser</span> <span class="hljs-variable">securityUser</span> <span class="hljs-operator">=</span> (SecurityUser) redisTemplate.opsForValue().get(<span class="hljs-string">&quot;token_&quot;</span> + userId);<br><span class="hljs-comment">//        Object securityUser = redisTemplate.opsForValue().get(&quot;token_&quot; + userId);</span><br>        <span class="hljs-keyword">if</span> (Objects.isNull(securityUser)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户未登录&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 存入SecurityContextHolder</span><br>        <span class="hljs-comment">// 获取用户权限信息</span><br>        <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">authenticationToken</span> <span class="hljs-operator">=</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(securityUser,<span class="hljs-literal">null</span>,securityUser.getAuthorities());<br>        SecurityContextHolder.getContext().setAuthentication(authenticationToken);<br>        filterChain.doFilter(request,response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="认证处理器"><a href="#认证处理器" class="headerlink" title="认证处理器"></a>认证处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthenticationEntryPointImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationEntryPoint</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commence</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><br>        ResponseUtil.render(response, ResultVO.error(ResultEnum.AUTHENTI_ERROR));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="鉴权处理器"><a href="#鉴权处理器" class="headerlink" title="鉴权处理器"></a>鉴权处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccessDeniedHandlerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AccessDeniedHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        ResponseUtil.render(response, ResultVO.error(ResultEnum.ACCESS_DENIED_ERROR));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FastJsonRedisSerializer</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RedisSerializer</span>&lt;T&gt; &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Charset</span> <span class="hljs-variable">DEFAULT_CHARSET</span> <span class="hljs-operator">=</span> Charset.forName(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    <span class="hljs-keyword">private</span> Class&lt;T&gt; clazz;<br>    <span class="hljs-keyword">static</span><br>    &#123;<br>        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FastJsonRedisSerializer</span><span class="hljs-params">(Class&lt;T&gt; clazz)</span><br>    &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.clazz = clazz;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] serialize(T t) <span class="hljs-keyword">throws</span> SerializationException<br>    &#123;<br>        <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> SerializationException<br>    &#123;<br>        <span class="hljs-keyword">if</span> (bytes == <span class="hljs-literal">null</span> || bytes.length &lt;= <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, DEFAULT_CHARSET);<br><br>        <span class="hljs-keyword">return</span> JSON.parseObject(str, clazz);<br>    &#125;<br>    <span class="hljs-keyword">protected</span> JavaType <span class="hljs-title function_">getJavaType</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> TypeFactory.defaultInstance().constructType(clazz);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="redis配置"><a href="#redis配置" class="headerlink" title="redis配置"></a>redis配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br><br>   <span class="hljs-comment">/* @Bean</span><br><span class="hljs-comment">    public RedisTemplate&lt;String,Object&gt; redisTemplate(RedisConnectionFactory factory) &#123;</span><br><span class="hljs-comment">        RedisTemplate&lt;String, Object&gt; redisTemplate = new RedisTemplate&lt;&gt;();</span><br><span class="hljs-comment">        Jackson2JsonRedisSerializer&lt;Object&gt; objectJackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer&lt;&gt;(Object.class);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        redisTemplate.setKeySerializer(new StringRedisSerializer());</span><br><span class="hljs-comment">        redisTemplate.setValueSerializer(objectJackson2JsonRedisSerializer);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        redisTemplate.setHashKeySerializer(new StringRedisSerializer());</span><br><span class="hljs-comment">        redisTemplate.setHashValueSerializer(new GenericJackson2JsonRedisSerializer());</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 注入</span><br><span class="hljs-comment">        redisTemplate.setConnectionFactory(factory);</span><br><span class="hljs-comment">        return redisTemplate;</span><br><span class="hljs-comment">    &#125;*/</span><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory connectionFactory)</span><br>    &#123;<br>        RedisTemplate&lt;Object, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        template.setConnectionFactory(connectionFactory);<br><br>        <span class="hljs-type">FastJsonRedisSerializer</span> <span class="hljs-variable">serializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FastJsonRedisSerializer</span>(Object.class);<br><br>        <span class="hljs-comment">// 使用StringRedisSerializer来序列化和反序列化redis的key值</span><br>        template.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        template.setValueSerializer(serializer);<br><br>        <span class="hljs-comment">// Hash的key也采用StringRedisSerializer的序列化方式</span><br>        template.setHashKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        template.setHashValueSerializer(serializer);<br><br>        template.afterPropertiesSet();<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">login</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-comment">// AuthenticationManager 进行用户的认证</span><br>        <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">authenticationToken</span> <span class="hljs-operator">=</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(user.getUserCode(),user.getPassWord());<br>        <span class="hljs-type">Authentication</span> <span class="hljs-variable">authenticate</span> <span class="hljs-operator">=</span> authenticationManager.authenticate(authenticationToken);<br>        <span class="hljs-comment">// 认证没通过，给出提示</span><br>        <span class="hljs-keyword">if</span> (Objects.isNull(authenticate)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;登录失败&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 认证通过,生成jwt，存入redis</span><br>        <span class="hljs-type">SecurityUser</span> <span class="hljs-variable">securityUser</span> <span class="hljs-operator">=</span> (SecurityUser) authenticate.getPrincipal();<br>        System.out.println(securityUser);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> securityUser.getUser().getId().toString();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> TokenUtil.createToken(userId, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;token_&quot;</span>+userId,securityUser);<br>        <span class="hljs-keyword">return</span> ResultVO.success(token);<br>    &#125;<br></code></pre></td></tr></table></figure><p>查询用户权限sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> m.permissions<br>       <span class="hljs-keyword">from</span><br>           t_user_role ur<br>               <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span><br>           t_role r <span class="hljs-keyword">on</span> ur.user_id <span class="hljs-operator">=</span> r.id<br>               <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span><br>           t_role_menu rm <span class="hljs-keyword">on</span> r.id <span class="hljs-operator">=</span> rm.role_id<br>               <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span><br>           t_menu m <span class="hljs-keyword">on</span> rm.menu_id <span class="hljs-operator">=</span> m.id<br>       <span class="hljs-keyword">where</span> ur.user_id <span class="hljs-operator">=</span> #&#123;userId&#125;<br></code></pre></td></tr></table></figure><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><h3 id="生成、解析token"><a href="#生成、解析token" class="headerlink" title="生成、解析token"></a>生成、解析token</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TokenUtil</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> date</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 生成token</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">createToken</span><span class="hljs-params">(String id,Date date)</span> &#123;<br>        <span class="hljs-type">SignatureAlgorithm</span> <span class="hljs-variable">signatureAlgorithm</span> <span class="hljs-operator">=</span> SignatureAlgorithm.HS256;<br>        <span class="hljs-type">JwtBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> Jwts.builder().setHeaderParam(<span class="hljs-string">&quot;typ&quot;</span>,<span class="hljs-string">&quot;JWT&quot;</span>)<span class="hljs-comment">//设置header</span><br>                .setHeaderParam(<span class="hljs-string">&quot;alg&quot;</span>, <span class="hljs-string">&quot;HS256&quot;</span>).setIssuedAt(date)<span class="hljs-comment">//设置签发时间</span><br>                .setExpiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(date.getTime() + <span class="hljs-number">1000</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">4</span>))<br>                .claim(<span class="hljs-string">&quot;no&quot;</span>,id)<span class="hljs-comment">//设置内容</span><br>                <span class="hljs-comment">//.claim(&quot;no&quot;,String.valueOf())</span><br>                .setIssuer(<span class="hljs-string">&quot;cdr&quot;</span>)<span class="hljs-comment">//设置签发人</span><br>                .signWith(signatureAlgorithm,<span class="hljs-string">&quot;cdrnb&quot;</span>);<span class="hljs-comment">//签名，需要算法和key</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> builder.compact();<br>        <span class="hljs-keyword">return</span> jwt;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 解析token，返回账号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">analysisToken</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> Jwts.parser().setSigningKey(<span class="hljs-string">&quot;cdrnb&quot;</span>).parseClaimsJws(token).getBody();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">loginName</span> <span class="hljs-operator">=</span> (String) claims.get(<span class="hljs-string">&quot;no&quot;</span>);<br>        <span class="hljs-keyword">return</span> loginName;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="http返回工具类"><a href="#http返回工具类" class="headerlink" title="http返回工具类"></a>http返回工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseUtil</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">(HttpServletResponse response, ResultVO code)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>        out.write(JSON.toJSON(code).toString().getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>        out.flush();<br>        out.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><h3 id="授权流程"><a href="#授权流程" class="headerlink" title="授权流程"></a>授权流程</h3><p>在spring security中，会使用默认的FilterSecurityInterceptor来进行校验。在FilterSecurityInterceptor中会从SecurityContextHolder获取其中的Authentication，然后获取其中的权限信息。当前用户是否拥有访问当前资源所需的权限。</p><h3 id="限制访问资源所需权限"><a href="#限制访问资源所需权限" class="headerlink" title="限制访问资源所需权限"></a>限制访问资源所需权限</h3><p>开启</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span><br></code></pre></td></tr></table></figure><p>然后就可以使用对应的注解：@PreAuthorize</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-meta">@PreAuthorize(&quot;hasAuthority(&#x27;test&#x27;)&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello&#x27;</span>; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>@PreAuthorize(“hasRole(‘system:test:list’)”)</p><p>会在<code>system:test:list</code>前面拼接一个<code>ROLE_</code>，所以用户权限要是<code>ROLE_system:test:list</code>才能访问</p><h3 id="自定义权限校验方法"><a href="#自定义权限校验方法" class="headerlink" title="自定义权限校验方法"></a>自定义权限校验方法</h3><p>自定义方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;cdr&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityExpressionRoot</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasAuthority</span><span class="hljs-params">(String authority)</span> &#123;<br>        <span class="hljs-comment">// 获取用户当前的权限</span><br>        <span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext().getAuthentication();<br>        <span class="hljs-type">SecurityUser</span> <span class="hljs-variable">securityUser</span> <span class="hljs-operator">=</span> (SecurityUser) authentication.getPrincipal();<br>        List&lt;String&gt; permissions = securityUser.getPermissions();<br>        <span class="hljs-comment">// 判断用户权限集合中是否存在authority</span><br>        <span class="hljs-keyword">return</span> permissions.contains(authority);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br><span class="hljs-comment">//    @PreAuthorize(&quot;hasAuthority(&#x27;system:test2:test1&#x27;)&quot;)</span><br>    <span class="hljs-meta">@PreAuthorize(&quot;@cdr.hasAuthority(&#x27;system:test:test&#x27;)&quot;)</span>  <span class="hljs-comment">// SPEL表达式</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello cdr&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p>CSRF是指跨站请求伪造，是常见的web攻击</p><p>Spring Security去防止CSRF攻击的方式是通过csrf_token。后端生成一个csrf_token，前端发起请求的时候需要携带这个csrf_token，后端会有过滤器校验，如果没有携带或者是伪造的就不允许访问。</p><p>前后端分离的项目中，认证信息就是token，所以不用担心csrf攻击。Spring Security不关闭csrf的话，就要去校验前端请求是否携带csrf_token。所以在前后端分离的项目中，Spring Security要关闭csrf</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloudAlibaba</title>
    <link href="/article/SpringCloudAlibaba/"/>
    <url>/article/SpringCloudAlibaba/</url>
    
    <content type="html"><![CDATA[<h1 id="创建父项目"><a href="#创建父项目" class="headerlink" title="创建父项目"></a>创建父项目</h1><p>使用idea创建springboot项目，<strong>Type</strong>使用：<strong>Maven POM</strong>，不选择任何Dependencies</p><p>在pom.xml加入配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="创建子项目"><a href="#创建子项目" class="headerlink" title="创建子项目"></a>创建子项目</h1><p>new -&gt; Module-&gt;maven项目-&gt;order和stock</p><p>pom.xml加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="搭建Spring-Cloud-Alibaba"><a href="#搭建Spring-Cloud-Alibaba" class="headerlink" title="搭建Spring Cloud Alibaba"></a>搭建Spring Cloud Alibaba</h1><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>Spring Cloud Alibaba:2.2.5.RELEASE</p><p>Spring Boot:2.3.2.RELEASE</p><p>Spring Cloud:Hoxton.SR8</p><p>父项目删掉parent里的依赖，加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Hoxton.SR8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h1><p>在两个子项目中加入naocs依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--nacos服务注册发现--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>启动类加上注解@EnableDiscoveryClient</p><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"> <span class="hljs-comment"># 应用名称，nacos会将该名称当做服务名称</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">stock-service</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">nacos</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">nacos</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">public</span> <span class="hljs-comment"># 相同特征的服务分类管理</span><br>        <span class="hljs-comment"># ephemeral: false # 永久实例，哪怕宕机也不会删除实例   默认为true临时实例</span><br>        <span class="hljs-comment"># service: 默认取$&#123;spring.application.name&#125; ,也可以通过该选项配置</span><br>        <span class="hljs-comment"># group: 默认DEFAULT_GROUP 更细的相同特征的服务进行归类分组管理</span><br>        <span class="hljs-comment"># weight: 通常要结合安装权重的负载均衡策略，权重越大分配的流量越大</span><br></code></pre></td></tr></table></figure><p>启动类加上注解@LoadBalanced</p><p>@LoadBalanced : 负载均衡器解析服务名称，转成ip地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>   <span class="hljs-meta">@LoadBalanced</span><br>   <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">(RestTemplateBuilder restTemplateBuilder)</span>&#123;<br>       <span class="hljs-keyword">return</span> restTemplateBuilder.build();<br>   &#125;<br></code></pre></td></tr></table></figure><p>controller中的ip换成服务名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/add&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>       System.out.println(<span class="hljs-string">&quot;下单成功&quot;</span>);<br>       <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> restTemplate.getForObject(<span class="hljs-string">&quot;http://stock-service/stock/product&quot;</span>, String.class);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World &quot;</span>+msg;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><p>server-addr:  用nginx的地址</p><h1 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h1><p>在消费者端修改默认负载均衡策略</p><p>配置文件的方式实现：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yml"> <span class="hljs-comment"># 应用名称，nacos会将该名称当做服务名称</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">order-service</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">nacos</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">nacos</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">public</span><br><span class="hljs-comment"># 生产者服务名</span><br><span class="hljs-attr">stock-service:</span> <br><span class="hljs-attr">ribbon:</span> <br><span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-string">com.alibaba.cloud.nacos.ribbon.NacosRule</span><br><span class="hljs-attr">ribbon:</span> <br><span class="hljs-attr">eager-load:</span> <br><span class="hljs-comment"># 开启ribbon饥饿加载</span><br><span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 配置生产者使用ribbon饥饿加载，多个用逗号隔开</span><br><span class="hljs-attr">clients:</span> <span class="hljs-string">stock-service</span><br></code></pre></td></tr></table></figure><h1 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h1><h2 id="java项目中如何实现接口调用"><a href="#java项目中如何实现接口调用" class="headerlink" title="java项目中如何实现接口调用"></a>java项目中如何实现接口调用</h2><ul><li>HttpClient</li><li>Okhttp</li><li>HttpURLConnection</li><li>RestTemplate   WebClient</li></ul><h2 id="Spring-Cloud-Alibaba快速整合OpenFeign"><a href="#Spring-Cloud-Alibaba快速整合OpenFeign" class="headerlink" title="Spring Cloud Alibaba快速整合OpenFeign"></a>Spring Cloud Alibaba快速整合OpenFeign</h2><p>1）引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--OpenFeign 远程调用--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2)编写调用接口+@GeignClient注解</p><ul><li>启动类加上注解 @EnableFeignClients</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(OrderApplication.class,args);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@LoadBalanced</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">(RestTemplateBuilder restTemplateBuilder)</span>&#123;<br>        <span class="hljs-keyword">return</span> restTemplateBuilder.build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建interface</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">*  name 指定调用rest接口所对应的服务名</span><br><span class="hljs-comment">*  path 指定调用rest接口所在的StockController指定的@RequestMapping</span><br><span class="hljs-comment">* */</span><br><span class="hljs-meta">@FeignClient(name = &quot;stock-service&quot;,path = &quot;/stock&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StockFeignService</span> &#123;<br><br>    <span class="hljs-comment">// 声明需要调用的rest接口对应的方法</span><br>    <span class="hljs-meta">@GetMapping(&quot;/product&quot;)</span><br>    String <span class="hljs-title function_">product</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>编写controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StockFeignService stockFeignService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/add&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;下单成功&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> restTemplate.getForObject(<span class="hljs-string">&quot;http://stock-service/stock/product&quot;</span>, String.class);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World &quot;</span>+msg;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/addFeign&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addFeign</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;下单成功&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> stockFeignService.product();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello Feign &quot;</span>+msg;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h2><p>日志等级：</p><ul><li>NONE 性能最佳，适用于生产。不记录任何日志（默认）</li><li>BASIC  适用于生产环境追踪问题。仅记录请求方法、url、响应状态代码和执行时间</li><li>HEADERS 记录BASIC级别的基础上，记录请求和响应的header</li><li>FULL 比较适用于开发及测试环境定位问题，记录请求和响应的header、body和元数据</li></ul><p>配置类方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">*  全局配置： 当使用@Configuration 会将配置作用于所有的服务提供方</span><br><span class="hljs-comment">*  局部配置： 不加@Configuration，只针对一个服务</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FeignConfig</span> &#123;<br><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Logger.Level <span class="hljs-title function_">feignLoggerLevel</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Logger.Level.FULL;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>springboot默认的日志级别为info，feign的日志级别debug就不会输入，要配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">logging:</span> <br><span class="hljs-attr">level:</span> <br><span class="hljs-attr">com.cdr.config.FeignConfig:</span> <span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure><p>局部配置：</p><p>去掉@Configuration</p><p>在StockFeignService上配置,加上configuration = FeignConfig.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name = &quot;stock-service&quot;,path = &quot;/stock&quot;,configuration = FeignConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StockFeignService</span> &#123;<br><br>    <span class="hljs-comment">// 声明需要调用的rest接口对应的方法</span><br>    <span class="hljs-meta">@GetMapping(&quot;/product&quot;)</span><br>    String <span class="hljs-title function_">product</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>yaml配置方式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># feign日志局部配置</span><br><span class="hljs-attr">feign:</span><br><span class="hljs-attr">client:</span><br><span class="hljs-attr">config:</span> <br><span class="hljs-attr">stock-service:</span> <br><span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">BASIC</span><br></code></pre></td></tr></table></figure><h2 id="契约配置"><a href="#契约配置" class="headerlink" title="契约配置"></a>契约配置</h2><p>如果想使用feign的原生注解</p><p>修改契约配置，支持原生Feign注解</p><p>yaml方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># feign日志局部配置</span><br><span class="hljs-attr">feign:</span><br><span class="hljs-attr">client:</span><br><span class="hljs-attr">config:</span> <br><span class="hljs-attr">stock-service:</span> <br><span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">BASIC</span><br><span class="hljs-attr">contract:</span> <span class="hljs-string">feign.Contract.Default</span> <span class="hljs-comment"># 设置为默认的契约（还原成原生注解）</span><br></code></pre></td></tr></table></figure><h2 id="超时时间配置"><a href="#超时时间配置" class="headerlink" title="超时时间配置"></a>超时时间配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># feign日志局部配置</span><br><span class="hljs-attr">feign:</span><br><span class="hljs-attr">client:</span><br><span class="hljs-attr">config:</span> <br><span class="hljs-attr">stock-service:</span> <br><span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">BASIC</span><br><span class="hljs-attr">contract:</span> <span class="hljs-string">feign.Contract.Default</span> <span class="hljs-comment"># 设置为默认的契约（还原成原生注解）</span><br><span class="hljs-comment"># 连接超时时间，默认2s</span><br><span class="hljs-attr">connectTimeout:</span> <span class="hljs-number">5000</span><br><span class="hljs-comment"># 请求处理超时时间，默认5s</span><br><span class="hljs-attr">readTimeout:</span> <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure><h2 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h2><p>CustomFeignInterceptor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomFeignInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RequestInterceptor</span> &#123;<br>    <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(<span class="hljs-built_in">this</span>.getClass());<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(RequestTemplate requestTemplate)</span> &#123;<br>        <span class="hljs-comment">// TODO</span><br>        requestTemplate.header(<span class="hljs-string">&quot;xxx&quot;</span>,<span class="hljs-string">&quot;xxx&quot;</span>);<br>        requestTemplate.query(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-string">&quot;111&quot;</span>);<br>        requestTemplate.uri(<span class="hljs-string">&quot;/9&quot;</span>);<br>        logger.info(<span class="hljs-string">&quot;feign拦截器&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置文件方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>   <span class="hljs-keyword">public</span> CustomFeignInterceptor <span class="hljs-title function_">feignAuthRequestInterceptor</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomFeignInterceptor</span>();<br>   &#125;<br></code></pre></td></tr></table></figure><p>yaml方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># feign日志局部配置</span><br><span class="hljs-attr">feign:</span><br><span class="hljs-attr">client:</span><br><span class="hljs-attr">config:</span> <br><span class="hljs-attr">stock-service:</span> <br><span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">BASIC</span><br><span class="hljs-attr">contract:</span> <span class="hljs-string">feign.Contract.Default</span> <span class="hljs-comment"># 设置为默认的契约（还原成原生注解）</span><br><span class="hljs-comment"># 连接超时时间，默认2s</span><br><span class="hljs-attr">connectTimeout:</span> <span class="hljs-number">5000</span><br><span class="hljs-comment"># 请求处理超时时间，默认5s</span><br><span class="hljs-attr">readTimeout:</span> <span class="hljs-number">10000</span><br><span class="hljs-string">requestInterceptors[0]:</span><br><span class="hljs-string">com.cdr.intercptor.feign.CustomFeignInterceptor</span><br></code></pre></td></tr></table></figure><h1 id="Nacos配置中心"><a href="#Nacos配置中心" class="headerlink" title="Nacos配置中心"></a>Nacos配置中心</h1><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- nacos config依赖--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="默认配置文件"><a href="#默认配置文件" class="headerlink" title="默认配置文件"></a>默认配置文件</h2><p>命名空间不建议使用public，建议使用自定义的命名空间</p><p>data_id和服务名相同的为默认的配置文件</p><p>除了默认 的配置文件，其他的配置文件必须加上后缀。com.cdr.order.dev.yaml</p><p>添加bootstrap.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">application:</span> <br><span class="hljs-attr">name:</span> <span class="hljs-string">com.cdr.order</span>  <span class="hljs-comment"># 名字为nacos配置文件的data_id</span><br><span class="hljs-attr">cloud:</span> <br><span class="hljs-attr">nacos:</span> <br><span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br><span class="hljs-attr">username:</span> <span class="hljs-string">nacos</span><br><span class="hljs-attr">password:</span> <span class="hljs-string">nacos</span><br><span class="hljs-attr">config:</span> <br><span class="hljs-attr">namespace:</span> <span class="hljs-string">public</span><br><span class="hljs-comment"># Nacos客户端默认是properties的文件扩展名</span><br><span class="hljs-attr">file-extension:</span> <span class="hljs-string">yaml</span><br></code></pre></td></tr></table></figure><h2 id="公共配置文件"><a href="#公共配置文件" class="headerlink" title="公共配置文件"></a>公共配置文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">application:</span> <br><span class="hljs-attr">name:</span> <span class="hljs-string">com.cdr.order</span>  <span class="hljs-comment"># 名字为nacos配置文件的data_id</span><br><span class="hljs-attr">cloud:</span> <br><span class="hljs-attr">nacos:</span> <br><span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br><span class="hljs-attr">username:</span> <span class="hljs-string">nacos</span><br><span class="hljs-attr">password:</span> <span class="hljs-string">nacos</span><br><span class="hljs-attr">config:</span> <br><span class="hljs-attr">namespace:</span> <span class="hljs-string">public</span><br><span class="hljs-comment"># Nacos客户端默认是properties的文件扩展名</span><br><span class="hljs-attr">file-extension:</span> <span class="hljs-string">yaml</span><br><span class="hljs-comment"># 公共配置文件</span><br><span class="hljs-attr">shared-configs:</span> <span class="hljs-comment"># 参数是数组</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">data-id:</span> <span class="hljs-string">com.cdr.common.yaml</span>  <span class="hljs-comment">#[0] 相当于数组下标，下标越大，优先级越大</span><br><span class="hljs-attr">refresh:</span> <span class="hljs-literal">true</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">data-id:</span> <span class="hljs-string">com.cdr.common02.yaml</span>  <span class="hljs-comment">#[1]</span><br><span class="hljs-attr">refresh:</span> <span class="hljs-literal">true</span><br><span class="hljs-string">extension-configs[0]:</span>  <br><span class="hljs-attr">data-id:</span> <span class="hljs-string">com.cdr.common03.yaml</span>   <span class="hljs-comment"># 优先级大于shared-configs</span><br></code></pre></td></tr></table></figure><p>优先级：profile&gt;默认配置文件&gt;extension-configs（下标越大，优先级越大）&gt;shared-configs（下标越大，优先级越大）</p><h2 id="RefreshScope"><a href="#RefreshScope" class="headerlink" title="@RefreshScope"></a>@RefreshScope</h2><p>配合@Value动态获取配置文件值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RefreshScope</span><br><span class="hljs-meta">@RequestMapping(&quot;/config&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigController</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;user.name&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String userName;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;/show&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userName;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h1><p>面向分布式服务架构的高可用防护组件</p><h2 id="原生方式"><a href="#原生方式" class="headerlink" title="原生方式"></a>原生方式</h2><h3 id="SentinelResource注解"><a href="#SentinelResource注解" class="headerlink" title="@SentinelResource注解"></a>@SentinelResource注解</h3><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.csp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sentinel-annotation-aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在启动类配置一个bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> SentinelResourceAspect <span class="hljs-title function_">sentinelResourceAspect</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SentinelResourceAspect</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/sentinel&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SentinelController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TEST_CDR</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TEST_GRADE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;testGrade&quot;</span>;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * value定义资源</span><br><span class="hljs-comment">    * blockHandler 设置流控降级后的处理方法（默认该方法必须声明在同一个类中）</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br>    <span class="hljs-meta">@SentinelResource(value = TEST_CDR, blockHandler = &quot;blockHandlerForTest&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test sentinel&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    *  一定要public</span><br><span class="hljs-comment">    *  返回值一定要和源方法保证一致</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">blockHandlerForTest</span><span class="hljs-params">(String id , BlockException be)</span> &#123;<br>        be.printStackTrace();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;sentinel流控&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 定义流控规则</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initFlowRules</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 流控规则</span><br>        List&lt;FlowRule&gt; rules = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;FlowRule&gt;();<br><br>        <span class="hljs-comment">// 流控</span><br>        <span class="hljs-type">FlowRule</span> <span class="hljs-variable">rule</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FlowRule</span>();<br>        <span class="hljs-comment">// 为哪个资源流控</span><br>        rule.setResource(TEST_CDR);<br>        <span class="hljs-comment">// 设置流控规则QPS</span><br>        rule.setGrade(RuleConstant.FLOW_GRADE_QPS);<br>        <span class="hljs-comment">// 设置受保护的资源阈值</span><br>        <span class="hljs-comment">// Set limit QPS to 20</span><br>        rule.setCount(<span class="hljs-number">1</span>); <span class="hljs-comment">// 1s一次</span><br>        rules.add(rule);<br>    &#125;<br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 定义降级规则</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initDegradeRule</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/*降级规则：异常*/</span><br>        List&lt;DegradeRule&gt; degradeRules = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;DegradeRule&gt;();<br>        <span class="hljs-type">DegradeRule</span> <span class="hljs-variable">degradeRule</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DegradeRule</span>();<br>        degradeRule.setResource(TEST_GRADE);<br>        <span class="hljs-comment">// 设置规则策略： 异常数</span><br>        degradeRule.setGrade(RuleConstant.DEGRADE_GRADE_EXCEPTION_COUNT);<br>        <span class="hljs-comment">// 触发熔断数： 2</span><br>        degradeRule.setCount(<span class="hljs-number">2</span>);<br>        <span class="hljs-comment">// 触发熔断最小请求数： 2</span><br>        degradeRule.setMinRequestAmount(<span class="hljs-number">2</span>);<br>        <span class="hljs-comment">// 统计时长 单位ms     1分钟</span><br>        degradeRule.setStatIntervalMs(<span class="hljs-number">60</span>*<span class="hljs-number">1000</span>);<br>        <span class="hljs-comment">// 一分钟内 执行两次 出现了2次异常 就会触发熔断</span><br><br>        <span class="hljs-comment">// 熔断持续时长10s</span><br>        <span class="hljs-comment">// 一旦触发了熔断，再次请求对应的接口就会直接调用降级方法</span><br>        <span class="hljs-comment">// 10s过了后进入半开状态： 恢复接口请求调用，如果第一次请求就异常，会直接熔断，不会根据设置的条件进行判定</span><br>        degradeRule.setTimeWindow(<span class="hljs-number">10</span>);<br><br>        degradeRules.add(degradeRule);<br>        DegradeRuleManager.loadRules(degradeRules);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/testGrade&quot;)</span><br>    <span class="hljs-meta">@SentinelResource(value = TEST_GRADE,entryType = EntryType.IN,</span><br><span class="hljs-meta">                        blockHandler = &quot;blockHandlerForGrade&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testGrade</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;异常&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">blockHandlerForGrade</span><span class="hljs-params">(String id, BlockException be)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;降级熔断&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Sentinel控制台"><a href="#Sentinel控制台" class="headerlink" title="Sentinel控制台"></a>Sentinel控制台</h3><p>下载链接：<a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a> 版本1.8.0</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 控制台启动命令<br>java -Dserver.port=<span class="hljs-number">8858</span> -jar sentinel-dashboard-<span class="hljs-number">1</span>.<span class="hljs-number">8</span>.<span class="hljs-number">0</span>.jar<br></code></pre></td></tr></table></figure><p>用户名密码都是：sentinel</p><p>客户端需要引入Transport模块来与Sentinel控制台进行通信</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">denpendency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.csp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sentinel-transport-simple-http<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">denpendency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 还需要一个core依赖--&gt;</span><br></code></pre></td></tr></table></figure><h2 id="SpringCloudAlibaba整合Sentinel"><a href="#SpringCloudAlibaba整合Sentinel" class="headerlink" title="SpringCloudAlibaba整合Sentinel"></a>SpringCloudAlibaba整合Sentinel</h2><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--SpringCloudAlibaba整合Sentinel--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加yaml配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span> <br><span class="hljs-attr">cloud:</span> <br><span class="hljs-attr">sentinel:</span> <br><span class="hljs-attr">transport:</span> <br><span class="hljs-attr">dashboard:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8858</span><br></code></pre></td></tr></table></figure><h2 id="流控"><a href="#流控" class="headerlink" title="流控"></a>流控</h2><p>QPS和线程数</p><p>QPS：每秒钟访问的数量</p><p>线程数：设置1个，那么只有1个线程能访问，其他等待</p><h3 id="直接流控"><a href="#直接流控" class="headerlink" title="直接流控"></a>直接流控</h3><p>流控A，就是直接流控A</p><h3 id="关联流控"><a href="#关联流控" class="headerlink" title="关联流控"></a>关联流控</h3><p>流控A，关联B，那么当B超出设置的值时，A就被流控了</p><h3 id="链路流控"><a href="#链路流控" class="headerlink" title="链路流控"></a>链路流控</h3><p>配置yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span> <br><span class="hljs-attr">cloud:</span> <br><span class="hljs-attr">sentinel:</span> <br><span class="hljs-attr">web-context-unify:</span> <span class="hljs-literal">false</span> <span class="hljs-string">//</span> <span class="hljs-string">默认将调用链路收敛，</span> <span class="hljs-literal">false</span><span class="hljs-string">展开</span><br></code></pre></td></tr></table></figure><p>test1和test2都调用getUser方法。流控getUser，入口资源设置test2，那么test2将会被流控</p><h2 id="流控效果"><a href="#流控效果" class="headerlink" title="流控效果"></a>流控效果</h2><ul><li>快速失败：直接失败</li><li>Warm Up: 设置预热时长，请求慢慢递增地处理   针对激增流量</li><li>排队等待：设置超时时间，被拒绝的请求在超时时间内执行   针对脉冲流量</li></ul><h2 id="熔断降级"><a href="#熔断降级" class="headerlink" title="熔断降级"></a>熔断降级</h2><ul><li>慢调用比例：  最大RT设置1000ms，最小请求数10，比例阈值设置0.1，那么10次请求出现一次超过1s的就会被熔断，熔断时长结束后进入半开状态</li><li>异常比例：比例阈值0.1，最小请求数10,10次出现一次异常就会降级</li><li>异常数：异常数1，最小请求数5,5次出现一次异常就会降级</li></ul><h2 id="整合openFeign"><a href="#整合openFeign" class="headerlink" title="整合openFeign"></a>整合openFeign</h2><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--nacos服务注册发现--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--OpenFeign 远程调用--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- nacos config依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--@SentinelResource--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;dependency&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;groupId&gt;com.alibaba.csp&lt;/groupId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;artifactId&gt;sentinel-annotation-aspectj&lt;/artifactId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;version&gt;1.8.0&lt;/version&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;/dependency&gt;--&gt;</span><br><br>        <span class="hljs-comment">&lt;!--SpringCloudAlibaba整合Sentinel--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br><span class="hljs-attr">sentinel:</span> <br><span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="热点流控"><a href="#热点流控" class="headerlink" title="热点流控"></a>热点流控</h2><p>必须使用@SentinelResource</p><p>参数索引：流控的参数是第几个（从0开始）</p><p>单机阈值：1.参数大部分值都是热点，那单机阈值就主要针对热点参数进行流控，后续额外针对普通参数值流控</p><p>​                    2.大部分参数值都是普通流量</p><h2 id="规则持久化"><a href="#规则持久化" class="headerlink" title="规则持久化"></a>规则持久化</h2><p>推模式</p><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.csp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sentinel-datasource.nacos<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>nacos创建一个配置文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;resource&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;order/test&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;controlBehavior&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;grade&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;limitApp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;default&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;strategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><h1 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h1><p>版本1.3.0</p><p>分布式事务解决方案</p><p>四种事务模式：</p><ul><li>AT</li><li>TCC</li><li>SAGA</li><li>XA</li></ul><p>三个角色：</p><ul><li>TC事务协调者</li><li>TM事务管理器</li><li>RM资源管理器</li></ul><h2 id="服务搭建"><a href="#服务搭建" class="headerlink" title="服务搭建"></a>服务搭建</h2><p>下载客户端：github.com/seata/seata/releases</p><p>存储模式：</p><ul><li>file：默认，单机模式，存储在本地文件root.data，性能高</li><li>db：mysql5.7+<ul><li>打开config/file.conf</li><li>修改mode=”db”</li><li>修改数据库连接信息</li><li>创建数据库，官网sql运行</li></ul></li><li>redis</li></ul><p>注册到nacos</p><p>conf/registry.conf,修改nacos相关配置</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs abnf">registry &#123;<br>type <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nacos&quot;</span><br>nacos &#123;<br>application <span class="hljs-operator">=</span> <span class="hljs-string">&quot;seata-server&quot;</span><br>serverAddr <span class="hljs-operator">=</span> <span class="hljs-string">&quot;127.0.0.1:8848&quot;</span><br>namespace <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><br>group <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SEATA_GROUP&quot;</span><br>cluster <span class="hljs-operator">=</span> <span class="hljs-string">&quot;default&quot;</span><br>username <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nacos&quot;</span><br>password <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nacos&quot;</span><br>&#125;<br>&#125;<br>config &#123;<br>type <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nacos&quot;</span><br>nacos &#123;<br>serverAddr <span class="hljs-operator">=</span> <span class="hljs-string">&quot;127.0.0.1:8848&quot;</span><br>namespace <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><br>group <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SEATA_GROUP&quot;</span><br>username <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nacos&quot;</span><br>password <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nacos&quot;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>/seata/script/file-config.txt 修改</p><p>上传到nacos配置中心：运行/script/config-center/nacos/nacos-config.sh</p><p>声明式事务(@GlobalTransactional)</p><h2 id="搭建客户端"><a href="#搭建客户端" class="headerlink" title="搭建客户端"></a>搭建客户端</h2><p>1.启动Seata server端，使用nacos作为注册中心和配置中心</p><p>2.配置微服务整合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">gropuId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">gropuId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.微服务设计的数据库都加上undo_log表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> `undo_log` (<br>`id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment,<br>    `branch_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    `xid` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    `context` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    `rollback_info` longblob <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    `log_status` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    `log_created` datetime <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    `log_modified` datetime <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    <span class="hljs-keyword">primary</span> key (`id`),<br>    <span class="hljs-keyword">unique</span> key `ux_undo_log` (`xid`,`brach_id`)<br>) engine <span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><p>yaml配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">cloud:</span> <br><span class="hljs-attr">alibaba:</span><br><span class="hljs-attr">seata:</span><br><span class="hljs-attr">tx-service-group :</span> <span class="hljs-string">guangzhou</span> <span class="hljs-comment"># 事务分组，和config.txt里面一样</span><br><span class="hljs-attr">seata:</span><br><span class="hljs-attr">registry:</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">nacos</span><br><span class="hljs-attr">nacos:</span> <br><span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br><span class="hljs-attr">application:</span> <span class="hljs-string">seata-server</span><br><span class="hljs-attr">username:</span> <span class="hljs-string">nacos</span><br><span class="hljs-attr">password:</span> <span class="hljs-string">nacos</span><br><span class="hljs-attr">group:</span> <span class="hljs-string">SEATA_GROUP</span><br><span class="hljs-attr">config:</span> <br><span class="hljs-attr">type:</span> <span class="hljs-string">nacos</span><br><span class="hljs-attr">nacos:</span> <br><span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br><span class="hljs-attr">username:</span> <span class="hljs-string">nacos</span><br><span class="hljs-attr">password:</span> <span class="hljs-string">nacos</span><br><span class="hljs-attr">group:</span> <span class="hljs-string">SEATA_GROUP</span><br></code></pre></td></tr></table></figure><h1 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h1><p>创建gateway子模块</p><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">gourpId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">gourpId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactiId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactiId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">8088</span><br><span class="hljs-attr">spring:</span><br><span class="hljs-attr">application:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">api-gateway</span><br><span class="hljs-attr">cloud:</span><br><span class="hljs-attr">gateway:</span><br><span class="hljs-attr">routes:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">order_route</span> <span class="hljs-comment"># 路由的唯一标识,路由到order</span><br>  <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://order-service</span> <span class="hljs-comment"># 需要转发的地址 lb:使用nacos的负载均衡</span><br>  <span class="hljs-comment"># 断言规则 用于路由规则的匹配</span><br>  <span class="hljs-attr">predicates:</span> <br>  <span class="hljs-comment"># https://localhost:8088/order-serv/order/add</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/order-serv/**</span><br>  <span class="hljs-attr">filters:</span> <br>  <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span> <span class="hljs-comment"># 转发之前去掉第一层路径</span><br><span class="hljs-attr">nacos:</span> <br><span class="hljs-attr">discovery:</span><br><span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br><span class="hljs-attr">username:</span> <span class="hljs-string">nacos</span><br><span class="hljs-attr">password:</span> <span class="hljs-string">nacos</span><br></code></pre></td></tr></table></figure><h2 id="跨域配置"><a href="#跨域配置" class="headerlink" title="跨域配置"></a>跨域配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">cloud:</span> <br><span class="hljs-attr">gateway:</span> <br><span class="hljs-attr">globalcors:</span> <br><span class="hljs-attr">cors-configurations:</span> <br><span class="hljs-string">&#x27;[/**]&#x27;</span><span class="hljs-string">:</span>    <span class="hljs-comment"># 允许跨域访问的资源</span><br><span class="hljs-attr">allowedOrigins:</span> <span class="hljs-string">&quot;*&quot;</span> <span class="hljs-comment"># 跨域允许的来源</span><br><span class="hljs-attr">allowedMethods:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">GET</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">POST</span><br></code></pre></td></tr></table></figure><h2 id="整合sentinel"><a href="#整合sentinel" class="headerlink" title="整合sentinel"></a>整合sentinel</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-sentinel-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">sentinel:</span><br><span class="hljs-attr">transport:</span> <br><span class="hljs-attr">dashboard:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8080</span><br></code></pre></td></tr></table></figure><h1 id="SkyWallking链路追踪"><a href="#SkyWallking链路追踪" class="headerlink" title="SkyWallking链路追踪"></a>SkyWallking链路追踪</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sharding-jdbc</title>
    <link href="/article/sharding-jdbc/"/>
    <url>/article/sharding-jdbc/</url>
    
    <content type="html"><![CDATA[<h1 id="sharding-jdbc"><a href="#sharding-jdbc" class="headerlink" title="sharding-jdbc"></a>sharding-jdbc</h1><h2 id="sharding-jdbc官网"><a href="#sharding-jdbc官网" class="headerlink" title="sharding-jdbc官网"></a>sharding-jdbc官网</h2><blockquote><p><a href="https://shardingsphere.apache.org/">https://shardingsphere.apache.org/</a></p></blockquote><blockquote><p><a href="https://shardingsphere.apache.org/document/current/cn/overview/">https://shardingsphere.apache.org/document/current/cn/overview/</a></p></blockquote><h2 id="什么是读写分离"><a href="#什么是读写分离" class="headerlink" title="什么是读写分离"></a>什么是读写分离</h2><p>读写分离其核心思想是将数据库的读操作（查询）和写操作（插入、更新、删除）分离到不同的数据库服务器上。这样做是为了提高数据库系统的处理能力和伸缩性，同时减轻单个数据库服务器的负载。</p><p>这就是为什么需要主库和从库的原因了，大部分的写操作都是在 主库进行操作的，而从库则承担了读操作，如果说需要更加的高可用的话，可以部署多出多从的架构。将读写操作分担导了不同的节点，更有利于服务的稳定性。不会说某一台的负载特别高。</p><h2 id="什么是分库分表"><a href="#什么是分库分表" class="headerlink" title="什么是分库分表"></a>什么是分库分表</h2><p>分库就是根据根据业务耦合性将一个库中的多张表拆分出来独立到另外一个库。例如在微服务结构中就需要分库，因为一个服务就需要一个库，而分库的粒度也是取决于你服务的粒度。</p><p>分表有两种分表的方式，垂直分表以及水平分表。</p><p>垂直分表：是将一个表中的一部分字段抽离出来做一个冗余的表，当一个表的字段非常多，且某些字段的访问频率较低或字段较大时，这时就非常适合使用垂直分表，将访问频率大的字段、或者较大(存储字符较多) 的字段抽离出来独立一张表。这样单张表的数据量就不会太大，从而提高查询效率</p><p>水平分表：当单表行数非常大，导致查询和更新操作变慢时，这时就适合使用水平分表， 将表的数据按照某种规则（如用户ID、时间等）分散到多个表中，每个表包含完整的表结构，但是数据是分散的。 这样单张表的行数就不会太大，一般单张表建议是在500w行左右。</p><h2 id="springboot整合sharding-jdbc"><a href="#springboot整合sharding-jdbc" class="headerlink" title="springboot整合sharding-jdbc"></a>springboot整合sharding-jdbc</h2><h3 id="导入依赖pom文件"><a href="#导入依赖pom文件" class="headerlink" title="导入依赖pom文件"></a>导入依赖pom文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--mysql--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--        spring security</span><br><span class="hljs-comment">        &lt;dependency&gt;</span><br><span class="hljs-comment">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="hljs-comment">            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="hljs-comment">        &lt;/dependency&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--  mybatis-plus      --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.1.tmp<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Shardingjdbc--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shardingsphere-jdbc-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 不引入，会报这个错    org.apache.shardingsphere.infra.util.yaml.constructor.ShardingSphereYamlConstructor$1.setCodePointLimit(I)V    --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.yaml<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>snakeyaml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.33<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--连接池--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><br><br></code></pre></td></tr></table></figure><h3 id="分库分表配置"><a href="#分库分表配置" class="headerlink" title="分库分表配置"></a>分库分表配置</h3><h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-comment"># 服务配置</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-comment"># 应用程序运行的端口</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9001</span><br>  <span class="hljs-comment"># Servlet的上下文路径</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/sharding-jdbc</span><br><span class="hljs-comment"># Spring框架配置</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-comment"># 数据源配置</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-comment"># 驱动类名，这里使用的是ShardingSphere提供的驱动</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">org.apache.shardingsphere.driver.ShardingSphereDriver</span><br>    <span class="hljs-comment"># 数据源URL，使用ShardingSphere的JDBC URL格式</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:shardingsphere:classpath:sharding-jdbc.yml</span><br><br><span class="hljs-comment"># mybatis-plus配置</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-comment"># 配置Mapper.xml映射文件</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath*:/mapper/**/*.xml</span><br>  <span class="hljs-comment"># 配置MyBatis数据返回类型别名（默认是类名）</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.cdr.shardingjdbc.entity</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">logic-not-delete-value:</span> <span class="hljs-number">0</span><br>      <span class="hljs-attr">logic-delete-value:</span> <span class="hljs-number">-1</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment">#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure><h4 id="sharding-jdbc-yml"><a href="#sharding-jdbc-yml" class="headerlink" title="sharding-jdbc.yml"></a>sharding-jdbc.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 数据源配置</span><br><span class="hljs-attr">dataSources:</span><br>  <span class="hljs-comment"># 主数据库配置</span><br>  <span class="hljs-attr">master1:</span><br>    <span class="hljs-comment"># 数据源类名，这里使用的是阿里巴巴的Druid连接池</span><br>    <span class="hljs-attr">dataSourceClassName:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class="hljs-comment"># JDBC驱动类名</span><br>    <span class="hljs-attr">driverClassName:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-comment"># 数据库连接URL，包括数据库地址、端口、数据库名以及连接参数</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.140.129:3306/cdr?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8</span><br>    <span class="hljs-comment"># 数据库登录用户名</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-comment"># 数据库登录密码</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-comment"># 从数据库1配置</span><br>  <span class="hljs-attr">slave1:</span><br>    <span class="hljs-comment"># 数据源类名，与主数据库相同</span><br>    <span class="hljs-attr">dataSourceClassName:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class="hljs-comment"># JDBC驱动类名，与主数据库相同</span><br>    <span class="hljs-attr">driverClassName:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-comment"># 数据库连接URL，与主数据库类似，但端口不同</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.140.129:3306/cdr?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8</span><br>    <span class="hljs-comment"># 数据库登录用户名，与主数据库相同</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-comment"># 数据库登录密码，与主数据库相同</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br><br><span class="hljs-comment"># 分片规则配置</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-comment">#  # 读写分离配置 有问题？会报错</span><br><span class="hljs-comment">#  - !READWRITE_SPLITTING</span><br><span class="hljs-comment">#    # 定义读写分离的数据源</span><br><span class="hljs-comment">#    dataSources:</span><br><span class="hljs-comment">#      readwrite_ds:</span><br><span class="hljs-comment">#        # 静态策略，定义写操作指向的数据源和读操作指向的数据源列表</span><br><span class="hljs-comment">#        staticStrategy:</span><br><span class="hljs-comment">#          writeDataSourceName: master1  # 写操作指向的主数据源名称</span><br><span class="hljs-comment">#          readDataSourceNames:  # 读操作指向的从数据源名称列表</span><br><span class="hljs-comment">#            - slave1</span><br><span class="hljs-comment">#        # 负载均衡器名称</span><br><span class="hljs-comment">#      loadBalancerName: round_robin</span><br><span class="hljs-comment">#    # 定义负载均衡器的类型和策略</span><br><span class="hljs-comment">#    loadBalancers:</span><br><span class="hljs-comment">#      round_robin:</span><br><span class="hljs-comment">#        type: ROUND_ROBIN  # 轮询负载均衡策略</span><br><br>  <span class="hljs-comment"># 分表路由配置</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-type">!SHARDING</span><br>    <span class="hljs-comment"># 定义需要分片的表及其分片策略</span><br>    <span class="hljs-attr">tables:</span><br>      <span class="hljs-attr">t_user:</span><br>        <span class="hljs-comment"># 定义实际的数据节点，包括数据源名称和表名</span><br>        <span class="hljs-attr">actualDataNodes:</span> <span class="hljs-string">master1.t_user_$-&gt;&#123;0..3&#125;</span> <span class="hljs-comment"># 数据库表t_user_0,t_user_1,t_user_2,t_user_3</span><br>        <span class="hljs-comment"># 定义表的分片策略</span><br>        <span class="hljs-attr">tableStrategy:</span><br>          <span class="hljs-attr">standard:</span><br>            <span class="hljs-comment"># 分片键和分片算法名称</span><br>            <span class="hljs-attr">shardingColumn:</span> <span class="hljs-string">id</span><br>            <span class="hljs-attr">shardingAlgorithmName:</span> <span class="hljs-string">t-log-inline</span><br>        <span class="hljs-comment"># 定义键生成策略</span><br>        <span class="hljs-attr">keyGenerateStrategy:</span><br>          <span class="hljs-attr">column:</span> <span class="hljs-string">id</span>  <span class="hljs-comment"># 指定键生成策略的列名</span><br>          <span class="hljs-attr">keyGeneratorName:</span> <span class="hljs-string">snowflake</span>  <span class="hljs-comment"># 指定使用的键生成器名称 这里使用的雪花算法</span><br><br><br>    <span class="hljs-comment"># 定义分片算法</span><br>    <span class="hljs-attr">shardingAlgorithms:</span><br>      <span class="hljs-attr">t-log-inline:</span><br>        <span class="hljs-comment"># 分片算法类型</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">INLINE</span><br>        <span class="hljs-comment"># 分片算法的属性配置</span><br>        <span class="hljs-attr">props:</span><br>          <span class="hljs-attr">algorithm-expression:</span> <span class="hljs-string">t_user_$-&gt;&#123;id</span> <span class="hljs-string">%</span> <span class="hljs-number">4</span><span class="hljs-string">&#125;</span>  <span class="hljs-comment"># 分片算法表达式，根据id字段的值进行取模运算</span><br><br>    <span class="hljs-comment"># 定义键生成器</span><br>    <span class="hljs-attr">keyGenerators:</span><br>      <span class="hljs-attr">snowflake:</span><br>        <span class="hljs-comment"># 键生成器类型</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">SNOWFLAKE</span><br><br><span class="hljs-comment"># 其他属性配置</span><br><span class="hljs-attr">props:</span><br>  <span class="hljs-attr">sql-show:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 是否显示执行的SQL语句，便于调试</span><br></code></pre></td></tr></table></figure><h4 id="User实体类"><a href="#User实体类" class="headerlink" title="User实体类"></a>User实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;t_user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String userName;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义主键生成策略"><a href="#自定义主键生成策略" class="headerlink" title="自定义主键生成策略"></a>自定义主键生成策略</h3><p>ShardingSphere不仅提供了内置的分布式主键生成器，例如UUID，SNOWFLAKE，默认使用SNOWFLAKE。</p><p>两种主键ID生成策略都是实现了KeyGenerateAlgorithm,自定义主键生成策略，也需要实现这个接口</p><p>sharding-jdbc利用了spi机制来支持自定义主键生成策略，只需要在resource/META-INF/services目录下创建org.apache.shardingsphere.sharding.spi.KeyGenerateAlgorithm文件，文件内容写自定义主键策略的全限定类名<code>com.cdr.shardingjdbc.config.CdrShardingKeyGenerator</code></p><h4 id="自定义CdrShardingKeyGenerator"><a href="#自定义CdrShardingKeyGenerator" class="headerlink" title="自定义CdrShardingKeyGenerator"></a>自定义CdrShardingKeyGenerator</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CdrShardingKeyGenerator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">KeyGenerateAlgorithm</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CdrShardingKeyGenerator</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;CDRKEY&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">generateKey</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;开始自定义生成器&quot;</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> Math.random();<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">aLong</span> <span class="hljs-operator">=</span> Long.valueOf((<span class="hljs-type">long</span>) random);<br>        System.out.println(<span class="hljs-string">&quot;生成的id值为&quot;</span>+aLong);<br>        <span class="hljs-keyword">return</span> aLong;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="修改sharding-jdbc-yml"><a href="#修改sharding-jdbc-yml" class="headerlink" title="修改sharding-jdbc.yml"></a>修改sharding-jdbc.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs yaml">  <span class="hljs-comment"># 分表路由配置</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-type">!SHARDING</span><br>    <span class="hljs-comment"># 定义需要分片的表及其分片策略</span><br>    <span class="hljs-attr">tables:</span><br>      <span class="hljs-attr">t_cdr:</span><br>        <span class="hljs-comment"># 定义实际的数据节点，包括数据源名称和表名</span><br>        <span class="hljs-attr">actualDataNodes:</span> <span class="hljs-string">master1.t_cdr</span><br>        <span class="hljs-comment"># 定义键生成策略</span><br>        <span class="hljs-attr">keyGenerateStrategy:</span><br>          <span class="hljs-attr">column:</span> <span class="hljs-string">id</span>  <span class="hljs-comment"># 指定键生成策略的列名</span><br>          <span class="hljs-attr">keyGeneratorName:</span> <span class="hljs-string">cdr-uuid-generate</span> <span class="hljs-comment"># 自定义键生成器名称</span><br>      <span class="hljs-comment">#    keyGeneratorName: snowflake # 自定义键生成器名称</span><br><br>      <span class="hljs-attr">t_user:</span><br>        <span class="hljs-comment"># 定义实际的数据节点，包括数据源名称和表名</span><br>        <span class="hljs-attr">actualDataNodes:</span> <span class="hljs-string">master1.t_user_$-&gt;&#123;0..3&#125;</span><br>        <span class="hljs-comment"># 定义表的分片策略</span><br>        <span class="hljs-attr">tableStrategy:</span><br>          <span class="hljs-attr">standard:</span><br>            <span class="hljs-comment"># 分片键和分片算法名称</span><br>            <span class="hljs-attr">shardingColumn:</span> <span class="hljs-string">id</span><br>            <span class="hljs-attr">shardingAlgorithmName:</span> <span class="hljs-string">t-log-inline</span><br>        <span class="hljs-comment"># 定义键生成策略</span><br>        <span class="hljs-attr">keyGenerateStrategy:</span><br>          <span class="hljs-attr">column:</span> <span class="hljs-string">id</span>  <span class="hljs-comment"># 指定键生成策略的列名</span><br>          <span class="hljs-attr">keyGeneratorName:</span> <span class="hljs-string">cdr-key-generate</span> <span class="hljs-comment"># 自定义键生成器名称</span><br><span class="hljs-comment">#          keyGeneratorName: snowflake  # 指定使用的键生成器名称 这里使用的雪花算法</span><br>    <span class="hljs-comment"># 定义分片算法</span><br>    <span class="hljs-attr">shardingAlgorithms:</span><br>      <span class="hljs-attr">t-log-inline:</span><br>        <span class="hljs-comment"># 分片算法类型</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">INLINE</span><br>        <span class="hljs-comment"># 分片算法的属性配置</span><br>        <span class="hljs-attr">props:</span><br>          <span class="hljs-attr">algorithm-expression:</span> <span class="hljs-string">t_user_$-&gt;&#123;id</span> <span class="hljs-string">%</span> <span class="hljs-number">4</span><span class="hljs-string">&#125;</span>  <span class="hljs-comment"># 分片算法表达式，根据id字段的值进行取模运算</span><br><br><span class="hljs-comment">#    # 定义键生成器</span><br>    <span class="hljs-attr">keyGenerators:</span><br>      <span class="hljs-attr">snowflake:</span> <br>        <span class="hljs-attr">type:</span> <span class="hljs-string">SNOWFLAKE</span><br>      <span class="hljs-attr">cdr-key-generate:</span><br>        <span class="hljs-comment"># 键生成器类型</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">CDRKEY</span> <span class="hljs-comment">#填CdrShardingKeyGenerator中getType的返回值</span><br>      <span class="hljs-attr">cdr-uuid-generate:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">UUID</span><br></code></pre></td></tr></table></figure><h3 id="日期分表配置"><a href="#日期分表配置" class="headerlink" title="日期分表配置"></a>日期分表配置</h3><p>参考文档</p><blockquote><p><a href="https://juejin.cn/post/6971978161038819341">https://juejin.cn/post/6971978161038819341</a></p></blockquote><h4 id="按照月分表"><a href="#按照月分表" class="headerlink" title="按照月分表"></a>按照月分表</h4><p>表名t_record_202301,t_record_202302,…..,t_record_210001</p><h5 id="Record-java"><a href="#Record-java" class="headerlink" title="Record.java"></a>Record.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;t_record&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Record</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String monthValue; <span class="hljs-comment">// month_value</span><br>    <span class="hljs-keyword">private</span> Date passTime<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="sharding-jdbc-ym"><a href="#sharding-jdbc-ym" class="headerlink" title="sharding-jdbc.ym"></a>sharding-jdbc.ym</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 分表路由配置</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-type">!SHARDING</span><br>    <span class="hljs-comment"># 定义需要分片的表及其分片策略</span><br>    <span class="hljs-attr">tables:</span><br>     <br>      <span class="hljs-attr">t_record:</span><br>        <span class="hljs-comment"># 定义实际的数据节点，包括数据源名称和表名</span><br>        <span class="hljs-attr">actualDataNodes:</span> <span class="hljs-string">master1.t_record_$-&gt;&#123;202103..210001&#125;</span><br>        <span class="hljs-comment"># 定义表的分片策略</span><br>        <span class="hljs-attr">tableStrategy:</span><br>          <span class="hljs-attr">standard:</span><br>            <span class="hljs-comment"># 分片键和分片算法名称 根据month_value分片，用这个字段值拼接在t_record_后面</span><br>            <span class="hljs-attr">shardingColumn:</span> <span class="hljs-string">month_value</span><br>            <span class="hljs-attr">shardingAlgorithmName:</span> <span class="hljs-string">t-month-inline</span><br>        <span class="hljs-comment"># 定义键生成策略</span><br>        <span class="hljs-attr">keyGenerateStrategy:</span><br>          <span class="hljs-attr">column:</span> <span class="hljs-string">id</span>  <span class="hljs-comment"># 指定键生成策略的列名</span><br>          <span class="hljs-attr">keyGeneratorName:</span> <span class="hljs-string">cdr-key-generate</span> <span class="hljs-comment"># 自定义键生成器名称</span><br><span class="hljs-comment">#          keyGeneratorName: snowflake  # 指定使用的键生成器名称 这里使用的雪花算法</span><br>    <span class="hljs-comment"># 定义分片算法</span><br>    <span class="hljs-attr">shardingAlgorithms:</span><br>      <span class="hljs-attr">t-month-inline:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">INLINE</span><br>        <span class="hljs-attr">props:</span><br>          <span class="hljs-attr">algorithm-expression:</span> <span class="hljs-string">t_record_$-&gt;&#123;month_value&#125;</span><br>      <span class="hljs-attr">t-log-inline:</span><br>        <span class="hljs-comment"># 分片算法类型</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">INLINE</span><br>        <span class="hljs-comment"># 分片算法的属性配置</span><br>        <span class="hljs-attr">props:</span><br>          <span class="hljs-attr">algorithm-expression:</span> <span class="hljs-string">t_user_$-&gt;&#123;id</span> <span class="hljs-string">%</span> <span class="hljs-number">4</span><span class="hljs-string">&#125;</span>  <span class="hljs-comment"># 分片算法表达式，根据id字段的值进行取模运算</span><br><br><span class="hljs-comment">#    # 定义键生成器</span><br>    <span class="hljs-attr">keyGenerators:</span><br>      <span class="hljs-attr">snowflake:</span> <br>        <span class="hljs-attr">type:</span> <span class="hljs-string">SNOWFLAKE</span><br>      <span class="hljs-attr">cdr-key-generate:</span><br>        <span class="hljs-comment"># 键生成器类型</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">CDRKEY</span> <span class="hljs-comment">#填CdrShardingKeyGenerator中getType的返回值</span><br>      <span class="hljs-attr">cdr-uuid-generate:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">UUID</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>redis</title>
    <link href="/article/redis/"/>
    <url>/article/redis/</url>
    
    <content type="html"><![CDATA[<h2 id="linux安装"><a href="#linux安装" class="headerlink" title="linux安装"></a>linux安装</h2><p>mv redis–.tar /opt<br>tar -zxvf redis–.tar<br>yum install gcc-c++ (gcc -v查看版本)<br>make(要很久)<br>make(很快)<br>make install</p><p>redis默认安装路径 /usr/local/bin</p><p>redis不是默认启动的，需要修改配置文件<br>mkdir myconfig<br>cp /opt/redis-5.0.7/redis.conf myconfig<br>vim redis.conf<br>daemonize no 改成 daemonize yes</p><p>回到/usr/local/bin下<br>用修改后的配置文件启动redis<br>redis-server myconfig/redis.conf</p><p>连接测试下<br>redis-cli -p 6379<br>ping（返回pong说明成功）</p><p>关闭redis服务器<br>shutdown<br>exit</p><p>默认有16个数据库(0-15)<br>select 15可以切换<br>dbsize</p><p>keys * 查看所有key</p><p>flushdb清空当前库<br>flushall清空全部数据库</p><h2 id="redis小知识"><a href="#redis小知识" class="headerlink" title="redis小知识"></a>redis小知识</h2><p>6379是一个明星名字，九空格按键</p><p>redis是单线程的（6之后的版本是多线程）<br>redis是很快的，官方表示redis是基于内存操作，CPU不是redis性能瓶颈，redis的瓶颈是根据机器的内存和网络<br>带宽，既然可以使用单线程来实现，就使用单线程了!</p><p>redis是C语言写的，官方提供的数据是 100000+的QPS，完全不比同样使用key-value的Memecache差</p><p>redis为什么单线程还是这么快？<br>误区1：高性能的服务器一定是多线程的？<br>误区2：多线程（CPU上下文会切换）一定比单线程效率高？</p><p>核心：redis将所有数据放在内存中，所以说使用单线程去操作效率就是最高的。多线程，cpu上下文切换是耗时的<br>操作！！！对于内存系统来说，如果没有上下文切换效率就是最高的！多次读写都是在一个cpu上，在内存情况下，<br>这个就是最佳的方案！</p><p>速度<br>cpu&gt;内存&gt;硬盘</p><h1 id="五大特殊数据类型"><a href="#五大特殊数据类型" class="headerlink" title="五大特殊数据类型"></a>五大特殊数据类型</h1><h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h2><p>默认有16个数据库(0-15)<br>select 15可以切换<br>dbsize</p><p>keys * 查看所有key</p><p>flushdb清空当前库<br>flushall清空全部数据库</p><p>set name cdr<br>get name<br>exists name(1：存在0：不存在)<br>expire name 10(name这个key10s后过期)<br>ttl name(查看name过期剩余时间)<br>move name 1(把name这个key移动到1号数据库)<br>type name(查看name是什么类型的key)<br>append name “ddd” 如果key存在就追加“ddd”,不存在就添加name，value是“ddd”</p><p>incr views （增1，常用于浏览量）<br>decr views 减1<br>步长 incrby views 10 加10<br>decrby views 10 减10</p><p>字符串范围  getrange name 0 3 获取字符串[0,3]<br>     getrange name 0 -1 获取整个字符串<br>替换 setrange name 1 newitem  替换指定位置的字符串变成newitem</p><p>setex ( set with expire) 设置过期时间  setex name 30 “hello”<br>setnx ( set if not exist) 不存在这个key才创建,在分布式锁中常常使用  setnx  name “re” 成功返回1，没成功返回0</p><p>mset key1 value1 key2 value2 创建多个key<br>mget key1 key2 获取多个key值<br>msetnx k1 v1 k4 v4    是一个原子性的操作，要么一起成功，要么一起失败</p><p>对象<br>set user:1 {name:zhangsan,age:3} 设置一个user:1对象 value为{name:zhangsan,age:3}<br>巧妙地设置  user:{id}:{field}<br>mset user:1:name zhangsan user:1:age 2</p><p>getset db redis  若不存在值则返回nil并设置新的值，存在则获取原来的值并设置新的值</p><p>String使用的场景： value除了是字符串，还可以是数字<br> 1.计时器<br> 2.统计多单位的数量 uid:99221:follow 0 incr 关注用户99221的数量<br> 3.粉丝数<br> 4.对象缓存存储</p><h2 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h2><p>在redis里面，我们可以把list玩成栈，队列，阻塞队列！</p><p>大多数的list命令都是用L开头的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; LPUSH list one <span class="hljs-comment">#将一个值或多个值，插入到列表头（左）</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; lpush list two<br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; keys<br>(error) ERR wrong number of arguments <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;keys&#x27;</span> <span class="hljs-built_in">command</span><br>127.0.0.1:6379&gt; keys *<br>1) <span class="hljs-string">&quot;list&quot;</span><br>127.0.0.1:6379&gt; lrange list 0 -1<br>1) <span class="hljs-string">&quot;two&quot;</span><br>2) <span class="hljs-string">&quot;one&quot;</span><br>127.0.0.1:6379&gt; lrange list 0 1<br>1) <span class="hljs-string">&quot;two&quot;</span><br>2) <span class="hljs-string">&quot;one&quot;</span><br>127.0.0.1:6379&gt; rpush list right1 <span class="hljs-comment">#将一个值或多个值，插入到列表尾部（右）</span><br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; lrange list 0 -1<br>1) <span class="hljs-string">&quot;two&quot;</span><br>2) <span class="hljs-string">&quot;one&quot;</span><br>3) <span class="hljs-string">&quot;right&quot;</span><br>127.0.0.1:6379&gt; <br><span class="hljs-comment">###############</span><br>127.0.0.1:6379&gt; lrange list 0 -1<br>1) <span class="hljs-string">&quot;two&quot;</span><br>2) <span class="hljs-string">&quot;one&quot;</span><br>3) <span class="hljs-string">&quot;right&quot;</span><br>127.0.0.1:6379&gt; lpop list <span class="hljs-comment">#删除list的第一个元素</span><br><span class="hljs-string">&quot;two&quot;</span><br>127.0.0.1:6379&gt; rpop list  <span class="hljs-comment">#删除list的最后一个元素</span><br><span class="hljs-string">&quot;right&quot;</span><br>127.0.0.1:6379&gt; lrange list 0 -1<br>1) <span class="hljs-string">&quot;one&quot;</span><br><span class="hljs-comment">########</span><br>lindex list 1 <span class="hljs-comment"># 通过下标获得list中的一个值</span><br><br><span class="hljs-comment">#########</span><br>Llen list <span class="hljs-comment">#返回列表的长度</span><br><br><span class="hljs-comment">###########</span><br>移除指定的值<br>Lrem list 1 one <span class="hljs-comment">#从上到下移除1个值为one的，返回移除的数量</span><br><br><span class="hljs-comment">##############</span><br><br>Rpush list <span class="hljs-string">&quot;hello&quot;</span><br>Rpush list <span class="hljs-string">&quot;hello1&quot;</span><br>Rpush list <span class="hljs-string">&quot;hello2&quot;</span><br>Rpush list <span class="hljs-string">&quot;hello3&quot;</span><br>ltrim list 1 2 <span class="hljs-comment">#通过下标截取指定的长度，这个list已经被改变了，只剩下截取的元素</span><br>lrange list 0 -1<br>1)<span class="hljs-string">&quot;hello1&quot;</span><br>2)<span class="hljs-string">&quot;hello2&quot;</span><br><br><span class="hljs-comment">##############</span><br>rpoplpush list otherlist  <span class="hljs-comment">#移除列表最后一个元素，加到另个一列表</span><br><span class="hljs-comment">#########</span><br>lset list 0 item <span class="hljs-comment">#更新item到列表index为0的位置（list这个key不存在会报错）</span><br>如果list中只有一个元素，lset list 1 item1 <br>，不存在index为1，会报错 index out of range<br><span class="hljs-comment">############</span><br>Linsert 将某个value插到列表中某个元素的前面或后面<br><br>mylist&#123;<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;world&quot;</span>&#125;<br>Linsert mylist before <span class="hljs-string">&quot;world&quot;</span> <span class="hljs-string">&quot;other&quot;</span>  <br>mylist&#123;<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;other&quot;</span>,<span class="hljs-string">&quot;world&quot;</span>&#125;<br>Linsert mylist after <span class="hljs-string">&quot;world&quot;</span> <span class="hljs-string">&quot;other2&quot;</span><br>mylist&#123;<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;other&quot;</span>,<span class="hljs-string">&quot;world&quot;</span>,<span class="hljs-string">&quot;other2&quot;</span>&#125;<br><br> <br><br><br></code></pre></td></tr></table></figure><blockquote><p>小结</p></blockquote><p>1、他实际上是个链表，before Node after ,left right 都可以插入值</p><p>2、如果key不存在，创建新的链表</p><p>3、如果key存在，新增内容</p><p>4、如果移除了所有值，空链表，也代表不存在！</p><p>5、在两边插入或者改动值，效率最高！中间元素，相对来说效率会低一点~</p><p>消息排队！消息队列（Lpush Rpop ） 栈（Lpush Lpop）</p><h2 id="set类型"><a href="#set类型" class="headerlink" title="set类型"></a>set类型</h2><p>set中的值是不可重复的</p><p>Sadd myset “hello” 添加</p><p>Smembers myset   查看指定set的所有值</p><p>sismember myset hello 判断myset中是否存在hello</p><p>scard myset 获取set集合中的元素个数</p><p>srem myset “hello” 移除</p><p>set是无序不重复集合</p><p>srandmember myset 随机抽选出一个元素</p><p>srandmember myset  2 随机抽选出两个元素</p><p>spop  myset   删除指定的set中的一个元素</p><p>smove myset myset2 “hello”     将一个指定的值，移动到另外一个set中</p><p>B站，共同关注（并集）</p><p>数字集合类：</p><p>-差集</p><p>-并集</p><p>-交集</p><p>set1（a,b,c）set2(c,d,e)</p><p>sdiff set1 set2  返回：b,a    差集</p><p>sinter set1 set2 返回 c  交集</p><p>sunion set1 set2 返回 abcde 并集</p><p>B站将所有关注 的人放在一个set中，粉丝也放在另外一个集合中</p><p>共同关注，共同爱好，二度好友，推荐好友（六度分割理论）</p><h2 id="hash类型"><a href="#hash类型" class="headerlink" title="hash类型"></a>hash类型</h2><p>Map集合，key-map！值是一个map集合！本质和string类型没有太大区别，还是一个简单的key-value!</p><p>hset myhash field1 cdr</p><p>hget myhash field1</p><p>hmset myhash field1 hello field2 world</p><p>hmget myhash field1 field2   获取多个指定</p><p>hgetall myhash    获取所有值</p><p>hdel myhash field1  删除指定的key字段，对应的value就消失了！</p><p>hlen myhash  获取hash表的字段数量！</p><p>hexists myhash field1   判断hash的指定字段是否存在!</p><p>hkeys myhash        只获得所有field</p><p>hvals myhash   获得所有value</p><p>hincr myhash field1  </p><p>hdecr myhash field1</p><p>hsetnx myhash field1 hello   如果不存在可以设置，存在不可以设置</p><p>hash存变更的数据,尤其是用户信息之类的，经常变动的信息！hash更适合与对象的存储</p><p>，String更适合于存储字符串</p><p>hset user:1 name cdr</p><p>hget user:1 name</p><h2 id="Zset类型（有序集合）"><a href="#Zset类型（有序集合）" class="headerlink" title="Zset类型（有序集合）"></a>Zset类型（有序集合）</h2><p>在set的基础上，增加了一个值，set k1 v1   zset k1 score vl</p><p>zadd myzset 1 one</p><p>zadd myzset 2 two 3 three 增加多个值</p><p>zrange myzset 0 -1</p><p>zrangebyscore myzset -inf +inf    显示所有用户 排序 (负无穷到正无穷)</p><p>zrangebyscore myzset -inf +inf withscores  显示所有用户，并附带score</p><p>zrangebyscore myzset -inf 400 withscores  显示score小于400的升序</p><p>zrevrange myzset 0 -1   从大到小排序</p><p>zrem myzset one    移除</p><p>zcard myzset 获取元素数量</p><p>zcount myzset  1 3 获取指定区间的元素数量</p><p>案例：存储成绩表，工资表排序。普通消息，1重要消息 2带权重进行判断！</p><p>排行榜应用实现</p><h1 id="三种特殊数据类型"><a href="#三种特殊数据类型" class="headerlink" title="三种特殊数据类型"></a>三种特殊数据类型</h1><h2 id="geospatial地理位置"><a href="#geospatial地理位置" class="headerlink" title="geospatial地理位置"></a>geospatial地理位置</h2><p>朋友的定位，附近的人，打车距离计算</p><p>redis的Geo在redis3.2版本就推出了！这个功能可以推算出地理位置的信息，两地之间的距离，方圆几里的人</p><p>只有6个命令</p><blockquote><p>geoadd</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#添加地理位置</span><br><span class="hljs-comment">#规则：两极无法直接添加，我们一般会下载城市数据，直接通过java一次性导入！</span><br><span class="hljs-comment">#参数 key 值（纬度，经度，名称）</span><br><span class="hljs-comment">#有效经度 -180到180  有效纬度 —85.05112878 到85.05112878</span><br>geoadd china:city 116.40,39.90 beijing<br>geoadd china:city 121.47 31.23 shanghai<br>geoadd china:city 106.50 29.53 chongqing<br><br><br><br><br></code></pre></td></tr></table></figure><blockquote><p>geopos</p></blockquote><p>获得当前定位：一定是一个坐标值！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">geopos chian:city beijing <span class="hljs-comment">#获取指定城市的经度和纬度</span><br></code></pre></td></tr></table></figure><blockquote><p>geodist</p></blockquote><p>两人之间的距离</p><p>geodist china:city beijing shanghai   查看北京到上海的直线距离</p><blockquote><p>georadius</p></blockquote><p>附近的人（获得所有附近的人的地址，定位！）通过半径赖查询！</p><p>georadius china:city 110 30 1000 km      (110,30)为中心，1000km为半径，显示城市</p><p>georadius china:city 110 30 1000 km withdist    显示到中间距离的位置</p><p>georadius china:city 110 30 1000 km withcoord  显示他人的定位信息</p><p>georadius china:city 110 30 1000 km withcoord  count 1     筛选出指定的结果</p><blockquote><p>georadiusbymember</p></blockquote><p>georadiusbymember china:city beijing 1000km   找出位于指定元素周围的其他元素</p><blockquote><p>geohash</p></blockquote><p>该命令将返回11个字符的geohash字符串！</p><p>将二维的经纬度转换为一维的字符串，如果两个字符串越接近，距离越近</p><p>geohash  china:city beijing chongqing 返回结果为：”wx4fbxxfke0”</p><blockquote><p>geo底层的实现原理其实是Zset！我们可以使用zset的命令来操作geo</p></blockquote><p>zrem china:city beijing 移除北京</p><h2 id="hyperloglog"><a href="#hyperloglog" class="headerlink" title="hyperloglog"></a>hyperloglog</h2><blockquote><p>什么是基数？</p></blockquote><p>A{1,3,5,7,8,9,7} B{1,3,,5,7,8}</p><p>基数（不重复的元素）=5 ，可以接受误差</p><blockquote><p>简介</p></blockquote><p>redis 2.8.9版本就更行了heperloglog的数据结构！</p><p>redis hyperloglog基数统计的算法！</p><p>优点：占用的内存是固定的，2^64不同元素的计数，只需要废12kb内存！如果要从内存角度来比较的话，heperloglog首选！</p><h4 id="网页的UV（一个人访问一个网站多次，但是还是算作一个人）"><a href="#网页的UV（一个人访问一个网站多次，但是还是算作一个人）" class="headerlink" title="网页的UV（一个人访问一个网站多次，但是还是算作一个人）"></a>网页的UV（一个人访问一个网站多次，但是还是算作一个人）</h4><p>传统的方式，set保存用户的id，然后就可以统计set中的元素数量作为标准判断！</p><p>这个方式如果保存大量的用户id，就会比较麻烦！我们的目的是为了计数，而不是保存用户id；</p><p>0.81%错误率！可以接受。</p><p>PFadd mykey a b c d e f g h i j a</p><p>pfcount mykey  统计元素的基数数量 10</p><p>pfadd mykey2 i j  z x c v b n m</p><p>pfmerge mykey3 mykey mykey2   把mykey和mykey2元素并集放到mykey3</p><p>如果允许容错，那么一定使用heperloglog！</p><p>不允许，就使用set或者自己的数据类型</p><h2 id="bitmaps"><a href="#bitmaps" class="headerlink" title="bitmaps"></a>bitmaps</h2><blockquote><p>位存储</p></blockquote><p> 0 1 0 0 1 0 0 0 1</p><p>统计用户信息，活跃不活跃，登录未登录，365天打卡！两个状态的都可以使用</p><p>Bitmaps位图，数据结构！都是操作二进制位来进行记录，就只有0和1两个状态</p><p>365天=365 bit    1字节=8bit</p><p>setbit sign  0 0   第一个数据为0</p><p>setbit sign 1 0    第二个数据为0</p><p>setbit sign 2 1 </p><p>setbit sign 3 0 </p><p>setbit sign 4 0 </p><p>查看某一天</p><p>getbit sign 2</p><p>统计操作</p><p>bitcount sign 统计全部</p><p>bitcount sign 0 2  统计 0,1,2</p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p><strong>redis单条命令是保证原子性的，但是事务不保证原子性</strong></p><p><strong>redis事务没有隔离级别的概念！</strong></p><p>所有的命令在十五中，并没有直接执行！只有发起执行命令的时候才会执行！Exec</p><p>Redis事务本质：一组命令的集合！一个事务中的所有命令都会被序列化，在事务执行过程中，会按照顺序执行！</p><p>一次性、顺序性、排他性！</p><p>redis的事务：</p><ul><li>开启事务（multi）</li><li>命令入队（……）</li><li>执行事务（exec）  执行完后，事务就结束了，需要重新开启</li></ul><blockquote><p>正常执行事务！</p></blockquote><p>放弃事务：discard</p><blockquote><p>编译型异常（代码有问题！命令有错！），事务中所有的命令都不会被执行</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; muti<br>ok<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; <span class="hljs-built_in">set</span> k1 v1<br>QUEUED<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; <span class="hljs-built_in">set</span> k2 v2<br>QUEUED<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; <span class="hljs-built_in">set</span> k3 v3<br>QUEUED<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; getset k3   #错误的命令<br>(error) ERR wrong number of arguments <span class="hljs-keyword">for</span> &#x27;getset&#x27; command<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; <span class="hljs-built_in">set</span> k4 v4<br>QUEUED<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; <span class="hljs-built_in">set</span> k5 v5<br>QUEUED<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; exec # 执行事务报错!<br>(error) EXECABORT Transaction discarded because of previous errors.<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; get k5  # 所有的命令都不会被执行<br>(nil)<br></code></pre></td></tr></table></figure><blockquote><p>运行时异常（1/0）,如果事务队列中存在语法性，那么执行命令的时候，其他命令可以正常执行，错误命令会抛出异常</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; <span class="hljs-built_in">set</span> k1 &quot;v1&quot;<br>ok<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; multi<br>ok<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; incr k1 # 会执行的时候失败！<br>QUEUED<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; <span class="hljs-built_in">set</span> k2 v2<br>QUEUED<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; <span class="hljs-built_in">set</span> k3 v3<br>QUEUED<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; get k3<br>QUEUED<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; exec<br><span class="hljs-number">1</span>) (error) ERR value is <span class="hljs-keyword">not</span> an integer or out of range # 虽然第一条命令报错了，但是依旧正常执行成功了<br><span class="hljs-number">2</span>) ok<br><span class="hljs-number">3</span>) ok<br><span class="hljs-number">4</span>) &quot;v3&quot;<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; get k2<br>&quot;v2&quot;<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; get k3<br>&quot;v3&quot;<br></code></pre></td></tr></table></figure><h1 id="redis实现乐观锁"><a href="#redis实现乐观锁" class="headerlink" title="redis实现乐观锁"></a>redis实现乐观锁</h1><blockquote><p>监控！Watch</p></blockquote><h2 id="悲观锁："><a href="#悲观锁：" class="headerlink" title="悲观锁："></a>悲观锁：</h2><ul><li>很悲观，什么时候都会出问题，无论做什么都会枷锁！</li></ul><h2 id="乐观锁："><a href="#乐观锁：" class="headerlink" title="乐观锁："></a>乐观锁：</h2><ul><li>很乐观，认为什么时候都不会出问题，所以不会上锁！更新数据的时候去判断一下，在此期间是否有人修改过这个数据。</li><li>获取version，自增</li><li>更新的时候比较version</li></ul><blockquote><p>Redis监视测试</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt;<span class="hljs-built_in">set</span> money <span class="hljs-number">100</span><br>ok<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; <span class="hljs-built_in">set</span> out <span class="hljs-number">0</span><br>ok<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; watch money # 监视money对象<br>ok<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; multi # 事务正常结束，数据期间没有发生变动，这个时候就正常执行成功<br>ok<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; DECRBY money <span class="hljs-number">20</span><br>QUEUED<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; INCRBY out <span class="hljs-number">20</span><br>QUEUED<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; exec<br><span class="hljs-number">1</span>) (integer) <span class="hljs-number">80</span><br><span class="hljs-number">2</span>) (integer) <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>使用Watch可以当做redis的乐观锁操作</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; watch money # 监视 money<br>ok<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; multi<br>ok<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; DECRBY money <span class="hljs-number">10</span><br>QUEUED<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; INCRBY out <span class="hljs-number">10</span><br>QUEUED<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; exec # 执行之前，另外一个线程，修改了我们的值，这个时候，就会导致事务执行失败<br>(nil)<br></code></pre></td></tr></table></figure><p>失败以后，unwatch money解锁,再去监视watch money,再去执行事务(如果数据和上次监视的值不一样，会再次执行失败)</p><h1 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h1><blockquote><p>什么是Jedis，是Redis官方推荐的Java连接开发工具！</p></blockquote><blockquote><p>测试</p></blockquote><p>1.导入对应的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--导入jedis--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--fastjson--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.62<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.编码测试</p><ul><li>连接数据库</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestPing</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.new jedis对象</span><br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">6379</span>);<br>        <span class="hljs-comment">//jedis所有的命令就是redis的命令</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">ping</span> <span class="hljs-operator">=</span> jedis.ping();<br>        System.out.println(ping);<span class="hljs-comment">//连接成功,输出pong</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>操作命令</li><li>断开连接</li></ul><h2 id="常用的API"><a href="#常用的API" class="headerlink" title="常用的API"></a>常用的API</h2><p><img src="C:\Users\cdr\AppData\Roaming\Typora\typora-user-images\image-20211202193440822.png" alt="image-20211202193440822"></p><blockquote><p>和上面redis的命令是一样的</p></blockquote><h1 id="SpringBoot整合"><a href="#SpringBoot整合" class="headerlink" title="SpringBoot整合"></a>SpringBoot整合</h1><p>SpringBoot操作数据：sping-data jpa jdbc mongodb redis!</p><p>SpringData也是和SpringBoot齐名的项目！</p><p>说明：在SpringBoot2.x之后，原来使用的jedis被替换为了lettuce</p><p>jedis:采用的直连，多个线程操作的话是不安全的，如果想要避免不安全，使用jedis pool！BIO</p><p>lettuce:采用netty，实例可以在多个线程中共享，不存在线程不安全的情况！可以减少线程数量。更像NIO模式。</p><p>1.导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.连接</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#配置redis</span><br><span class="hljs-attr">spring.redis.host</span>=<span class="hljs-string">127.0.0.1</span><br><span class="hljs-attr">spring.redis.port</span>=<span class="hljs-string">6379</span><br></code></pre></td></tr></table></figure><p>3.测试</p><blockquote><p>编写一个自己的redisTemplete</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory factory)</span><br>            <span class="hljs-keyword">throws</span> UnknownHostException &#123;<br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;String, Object&gt;();<br>        template.setConnectionFactory(factory);<br>        <span class="hljs-comment">//配置具体的序列化方式</span><br>        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br>        <span class="hljs-type">StringRedisSerializer</span> <span class="hljs-variable">stringRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br>        <span class="hljs-comment">//key采用String的序列化方式</span><br>        template.setKeySerializer(stringRedisSerializer);<br>        <span class="hljs-comment">//hash的key也采用String的系列化方式</span><br>        template.setHashKeySerializer(stringRedisSerializer);<br>        <span class="hljs-comment">//value序列化方式采用jackson</span><br>        template.setValueSerializer(jackson2JsonRedisSerializer);<br>        <span class="hljs-comment">//hash的value序列化方式采用jackson</span><br>        template.setHashValueSerializer(jackson2JsonRedisSerializer);<br>        template.afterPropertiesSet();<br>        <br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Redis-conf详解"><a href="#Redis-conf详解" class="headerlink" title="Redis.conf详解"></a>Redis.conf详解</h1><blockquote><p>单位</p></blockquote><p><img src="C:\Users\cdr\AppData\Roaming\Typora\typora-user-images\image-20211204162334508.png" alt="image-20211204162334508"></p><p>1.配置文件unit单位 对大小写不敏感</p><blockquote><p>包含</p></blockquote><p><img src="C:\Users\cdr\AppData\Roaming\Typora\typora-user-images\image-20211204162438801.png" alt="image-20211204162438801"></p><p>多配置文件包含进来</p><blockquote><p>网络</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">bind</span> 127.0.0.1 <span class="hljs-comment">#绑定的ip</span><br>protected-mode <span class="hljs-built_in">yes</span> <span class="hljs-comment">#保护模式</span><br>port 6379<br></code></pre></td></tr></table></figure><blockquote><p>通用GENERAL</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">daemonize <span class="hljs-built_in">yes</span> <span class="hljs-comment"># 以守护进程的方式运行，默认是no，需要改成yes</span><br>pidfile /var/run/redis_6379.pid <span class="hljs-comment">#如果以后台的方式运行，我们就需要指定一个pid文件！</span><br><span class="hljs-comment"># 日志</span><br><span class="hljs-comment"># Specify the server verbosity level.</span><br><span class="hljs-comment"># This can be one of:</span><br><span class="hljs-comment"># debug (a lot of information, userful for development/testing)</span><br><span class="hljs-comment"># verbose (many rarely userful info, but not a mess like the debug level)</span><br><span class="hljs-comment"># notice (moderately verbose, what you want in production probably)生产环境</span><br><span class="hljs-comment"># warning (only very important / critical messages are logged)</span><br>loglevel notice<br>logfile <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment">#日志的文件位置</span><br>database 16 <span class="hljs-comment">#数据库数量 默认16个</span><br>always-show-logo <span class="hljs-built_in">yes</span> <span class="hljs-comment">#是否总是显示log</span><br></code></pre></td></tr></table></figure><blockquote><p>快照</p></blockquote><p>持久化，在规定的时间内，执行了多少次操作，则会持久化到文件.rdb aof</p><p>redis是内存数据库，如果没有持久化，那么数据断电即失！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#如果900s内，如果至少有1 key进行了修改，我们就进行持久化操作</span><br>save 900 1<br><span class="hljs-comment">#如果300s内，如果至少有10 key进行了修改，我们就进行持久化操作</span><br>save 300 10<br><span class="hljs-comment">#如果60s内，如果至少有10000 key进行了修改，我们就进行持久化操作</span><br>save 60 10000<br><span class="hljs-comment">#之后可以自己定义</span><br><br>stop-writes-on-bgsave-errror <span class="hljs-built_in">yes</span> <span class="hljs-comment">#持久化如果出错，是否还需要继续工作</span><br><br>rdbcompression <span class="hljs-built_in">yes</span> <span class="hljs-comment">#是否压缩 rdb文件，需要消耗一些cpu资源！</span><br>rdbchecksum <span class="hljs-built_in">yes</span> <span class="hljs-comment">#保存rdb文件的时候，进行错误的检查校验</span><br><br><span class="hljs-built_in">dir</span> ./ <span class="hljs-comment">#rdb 文件保存的目录</span><br></code></pre></td></tr></table></figure><blockquote><p>REPLICATION 复制</p></blockquote><blockquote><p>SECURITY 安全</p></blockquote><p>可以在这里设置redis的密码，默认是没有密码！</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; <span class="hljs-built_in">ping</span><br>PONG<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; config get requirepass # 获取redis的密码<br><span class="hljs-number">1</span>) &quot;requirepass&quot;<br><span class="hljs-number">2</span>) &quot;&quot;<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; config <span class="hljs-built_in">set</span> requirepass &quot;<span class="hljs-number">123456</span>&quot; # 设置redis的密码<br>ok<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; config get requirepass # 发现所有的命令都没有权限了<br>(error) NOAUTH Authentication required.<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; <span class="hljs-built_in">ping</span><br>(error) NOAUTH Authentication required.<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; auth <span class="hljs-number">123456</span> # 使用密码进行登录!<br>ok<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; config get requirepass<br><span class="hljs-number">1</span>) &quot;requirepass&quot;<br><span class="hljs-number">2</span>) &quot;<span class="hljs-number">123456</span>&quot;<br></code></pre></td></tr></table></figure><blockquote><p>限制 CLIENTS</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">maxclient 1000 <span class="hljs-comment"># 设置能连接上redis的最大客户端的数量</span><br>maxmemory &lt;bytes&gt; <span class="hljs-comment"># redis 配置最大的内存容量</span><br>maxmemory-policy noeviction <span class="hljs-comment">#内存到达上限之后的处理策略</span><br>volatile-lru <span class="hljs-comment">#只对设置了过期时间的key进行LRU（默认值）</span><br>allkey-lru <span class="hljs-comment">#删除lru算法的key</span><br>volatile-random <span class="hljs-comment">#随机删除即将过期的key</span><br>allkeys-random <span class="hljs-comment">#随机删除</span><br>volatile-ttl <span class="hljs-comment">#删除即将过期的</span><br>noeviction <span class="hljs-comment">#永不过期，返回错误</span><br></code></pre></td></tr></table></figure><blockquote><p>APPENDONLY模式 aof配置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">appendonly no <span class="hljs-comment">#默认是不开启aof模式的，默认使用rdb方式持久化，大部分情况下完全够用</span><br>appendfilename <span class="hljs-string">&quot;appendonly.aof&quot;</span> <span class="hljs-comment">#持久化的文件的名字</span><br><br><span class="hljs-comment"># appendfsync always  # 每次修改都会sync，消耗性能</span><br>appendsync everysec <span class="hljs-comment"># 每秒执行一次sync，可能会丢失这1s的数据</span><br><span class="hljs-comment"># appendfsync no   # 不执行sync，这个时候操作系统自己同步数据，速度最快</span><br><br></code></pre></td></tr></table></figure><h1 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h1><p>redis是内存数据库，如果没有持久化，那么数据断电即失！</p><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p>RDB方式要比Aof更加的高效，最后一次持久化的数据可能丢失。默认情况就是RDB，一般不用修改这个配置</p><p>rdb保存的文件 dump.rdb</p><blockquote><p>触发机制</p></blockquote><p>1.save的规则满足的情况下，会自动触发rdb规则</p><p>2.执行flushall命令，也会触发rdb规则</p><p>3.退出redis，也会产生rdb文件</p><p>备份就会自动生成一个dump.rdb文件</p><blockquote><p>恢复rdb文件</p></blockquote><p>1.只需要将rdb文件放在redis启动目录，redis启动的时候就会自动检查dump.rdb恢复其中的数据</p><p>2.查看存在的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">config get <span class="hljs-built_in">dir</span><br><span class="hljs-string">&quot;dir&quot;</span><br><span class="hljs-string">&quot;/usr/local/bin&quot;</span> <span class="hljs-comment">#如果在这个目录下存在 dump.rdb文件，启动就会自动恢复其中的数据</span><br></code></pre></td></tr></table></figure><blockquote><p>默认的配置基本够用了</p></blockquote><p>优点：</p><p>1、适合大规模的数据恢复！</p><p>2、对数据的完整性要求不高！</p><p>缺点：</p><p>1、需要一定的时间间隔进行操作！如果redis意外宕机，最后一次修改数据就没了</p><p>2、fork进程的时候，会占用一定的内存空间！</p><h2 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h2><p>将所有命令都记录下来，history，恢复文件的时候，把所有命令再跑一遍</p><p>Aof保存的是appendonly.aof</p><p> 默认是不开启的！</p><p>appendoly yes，重启redis就生效了！</p><p>如果aof文件有错误，redis是启动不起来的。我们需要修复这个aof文件。</p><p>redis提供了一个工具 redis-check-aof</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-check-aof --fix appendonly.aof<br><br></code></pre></td></tr></table></figure><blockquote><p>重写规则</p></blockquote><p>aof默认就是文件的无限追加，文件会越来越大！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">auto-aof-rewrite-percentage 100<br>auto-aof-rewrite-min-size 64mb<br></code></pre></td></tr></table></figure><p>如果aof文件大于64m，太大了！fork一个新的进程来将文件进行重写！</p><blockquote><p>优点和缺点</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">appendonlu no <span class="hljs-comment">#默认是不开启aof模式的，默认使用rdb方式持久化，大部分情况下完全够用</span><br>appendfilename <span class="hljs-string">&quot;appendonly.aof&quot;</span> <span class="hljs-comment">#持久化的文件的名字</span><br><br><span class="hljs-comment"># appendfsync always  # 每次修改都会sync，消耗性能</span><br>appendsync everysec <span class="hljs-comment"># 每秒执行一次sync，可能会丢失这1s的数据</span><br><span class="hljs-comment"># appendfsync no   # 不执行sync，这个时候操作系统自己同步数据，速度最快</span><br></code></pre></td></tr></table></figure><p>优点：</p><p>1、每一次修改都同步，文件的完整性会更好</p><p>2、每秒同步一次，可能会丢失一秒的数据</p><p>3、从不同步，效率最高</p><p>缺点：</p><p>1、相对于数据文件来说，aof远远大于rdb，修复的速度也比rdb慢</p><p>2、aof运行效率也比rdb慢，所以redis默认使用rdb</p><p><img src="C:\Users\cdr\AppData\Roaming\Typora\typora-user-images\image-20211205095705174.png" alt="image-20211205095705174"></p><p> 波动。代价是如果Master/Slave同时倒掉（例如断电），会丢失十几分钟的数据，启动脚本也要比较两个Master/Slave中的rdb文件，载入较新的那个，微博就是这种架构。</p><h1 id="Redis发布订阅"><a href="#Redis发布订阅" class="headerlink" title="Redis发布订阅"></a>Redis发布订阅</h1><blockquote><p>命令</p></blockquote><p><img src="C:\Users\cdr\AppData\Roaming\Typora\typora-user-images\image-20211205100227141.png" alt="image-20211205100227141"></p><blockquote><p>测试</p></blockquote><p><img src="C:\Users\cdr\AppData\Roaming\Typora\typora-user-images\image-20211205100526685.png" alt="image-20211205100526685"></p><h1 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><img src="C:\Users\cdr\AppData\Roaming\Typora\typora-user-images\image-20211205101016227.png" alt="image-20211205101016227"></p><p>主从复制，读写分离！</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>只配置从库，不配置主库。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; info replication # 查看当前库的信息<br># Replication<br><span class="hljs-function">role: <span class="hljs-title">master</span> # 角色<span class="hljs-title">master</span></span><br><span class="hljs-function"><span class="hljs-title">connected_slaves</span>:0 # 没有从机</span><br><span class="hljs-function"><span class="hljs-title">master_replid:b63cu9dsaasdjdsf32324h2</span></span><br><span class="hljs-function"><span class="hljs-title">master_replid2</span>:0000000000000000000000</span><br><span class="hljs-function"><span class="hljs-title">master_rep1_offset</span>:0</span><br><span class="hljs-function"><span class="hljs-title">master_rep1_offset</span>:-1</span><br><span class="hljs-function"><span class="hljs-title">repl_backlog_active</span>:0</span><br><span class="hljs-function"><span class="hljs-title">repl_backlog_size</span>:1048576</span><br><span class="hljs-function"><span class="hljs-title">repl_backlog_first_byte_offset</span>:0</span><br><span class="hljs-function"><span class="hljs-title">repl_backlog_histlen</span>:0</span><br></code></pre></td></tr></table></figure><p>复制3个配置文件，然后修改对应的信息</p><p>1.端口</p><p>2.pid名字</p><p>3.log文件名字</p><p>4.dump.rdb名字</p><p>修改完毕启动三个redis服务器</p><h2 id="一主二从"><a href="#一主二从" class="headerlink" title="一主二从"></a>一主二从</h2><p>默认情况下三台都是主节点;一般情况下只用配置从机就好了！</p><p>一主（6379）二从（6380,6381）</p><p><img src="C:\Users\cdr\AppData\Roaming\Typora\typora-user-images\image-20211205102047524.png" alt="image-20211205102047524"></p><p>真是主从配置应该是在配置文件中配置，这样的话是永久的；使用命令配置是暂时的！</p><blockquote><p>细节</p></blockquote><p>主机可以写，从机只能读不能写！</p><p>测试：主机断开连接，从机依旧连接到主机，但是没有写操作！这个时候，主机如果回来了，从机依旧可以获取到主机写的信息！</p><p>如果是使用命令配置的主从，这个时候从机重启了，就会丢失主从关系，变回主机！</p><p>但是只要再变成从机，立马就会从主机中获取值！</p><blockquote><p>复制原理</p></blockquote><p>Slave启动成功连接到master后会发送一个sync命令</p><p>Master接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕后，master将传送整个数据文件到slave，并完成一次完全同步。</p><p>全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</p><p>增量复制：Master继续将新的所有收集到的修改命令依次传给slave，完成同步</p><p>但是只要是重新连接master，一次完全同步（全量复制）将被自动执行。</p><blockquote><p>层层链路</p></blockquote><p><img src="C:\Users\cdr\AppData\Roaming\Typora\typora-user-images\image-20211205103625328.png" alt="image-20211205103625328"></p><blockquote><p>如果没有主机了，这个时候能不能选择一个主机出来呢？手动</p></blockquote><p>如果主机断开了，使用 slaveof no one让自己变成主机！其他节点可以手动连接到这个主节点</p><p>如果这个时候原来的主机回来了，那就重新连接！</p><h2 id="哨兵模式（自动选举老大）"><a href="#哨兵模式（自动选举老大）" class="headerlink" title="哨兵模式（自动选举老大）"></a>哨兵模式（自动选举老大）</h2><blockquote><p>概述</p></blockquote><p><img src="C:\Users\cdr\AppData\Roaming\Typora\typora-user-images\image-20211205104203296.png" alt="image-20211205104203296"></p><p><img src="C:\Users\cdr\AppData\Roaming\Typora\typora-user-images\image-20211205104349124.png" alt="image-20211205104349124"></p><p>果由一个哨兵发起，进行failover[故障转移]操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<strong>客观下线</strong>。</p><blockquote><p>测试</p></blockquote><p>现在是一主二从</p><p>1.配置哨兵配置文件sentinel.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># sentinel monitor 被监控的名称 host port 1</span><br>sentinel monitor myredis 127.0.0.1 6379 1<br></code></pre></td></tr></table></figure><p>后面的数字1，代表主机挂了，有1个哨兵认为主机挂了就进行故障转移</p><p>如果有10个哨兵，sentinel monitor myredis 127.0.0.1 6379 6，那么当有6个哨兵认为主机挂了，才开始failover，选新的主机。</p><p>2.启动哨兵</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-sentinel myconfig/sentinel.conf<br></code></pre></td></tr></table></figure><blockquote><p>哨兵模式</p></blockquote><p>如果主机此时回来了，只能归并到新的主机下，当做从机这就是哨兵模式的规则!</p><p>优点： </p><p>1.哨兵集群，基于主从复制模式，所有的主从配置优点，他全有</p><p>2.主从可以切换，故障可以转移，系统的可用性就会更好</p><p>3.哨兵模式就是主从模式的升级，手动到自动，更加健壮！</p><p>缺点：</p><p>1.Redis不好在下扩容，集群容量一旦达到上限，在线扩容就十分麻烦！</p><p>2.实现哨兵模式的配置其实是很麻烦的，里面有很多选择！</p><h1 id="Redis的缓存穿透和雪崩"><a href="#Redis的缓存穿透和雪崩" class="headerlink" title="Redis的缓存穿透和雪崩"></a>Redis的缓存穿透和雪崩</h1><h2 id="缓存穿透（查不到导致的）"><a href="#缓存穿透（查不到导致的）" class="headerlink" title="缓存穿透（查不到导致的）"></a>缓存穿透（查不到导致的）</h2><blockquote><p>概念</p></blockquote><p>缓存穿透的概念很简单，用户想要查询一个数据，发现redis内存数据库美哦与，也就是缓存没有命中，于是向持久层数据库查询。发现也没有，于是本次查询就失败。当用户很多的时候，缓存都没有命中，于是都去请求数据库。这会给数据库造成很大的压力，就时候就相当于出现了缓存穿透。</p><blockquote><p>解决方案</p></blockquote><p>布隆过滤器</p><p>缓存空值</p><p>但是这种方法存在两个问题：</p><p>1.如果空值能够被缓存起来，这就意味着需要更多的空间存储更多的键，因为这当中可能会有很多的空值的键。</p><p>2.即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响。</p><h2 id="缓存击穿（缓存过期，请求量太大）"><a href="#缓存击穿（缓存过期，请求量太大）" class="headerlink" title="缓存击穿（缓存过期，请求量太大）"></a>缓存击穿（缓存过期，请求量太大）</h2><blockquote><p>概述</p></blockquote><p>这里需要注意和缓存击穿的区别，缓存击穿，是指一个key非常热点，在不停地扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在屏障上凿了一个洞。</p><p>当某个key在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导致使数据库瞬间压力过大。</p><blockquote><p>解决方案</p></blockquote><h3 id="设置热点数据永不过期"><a href="#设置热点数据永不过期" class="headerlink" title="设置热点数据永不过期"></a>设置热点数据永不过期</h3><p>从缓存层面来看，没有这只过期时间，所以不会出现热点key过期后产生的问题。</p><h3 id="加互斥锁"><a href="#加互斥锁" class="headerlink" title="加互斥锁"></a>加互斥锁</h3><p>分布式锁：使用分布式锁，保证对于每个key同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大。</p><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><blockquote><p>概念</p></blockquote><p>某一个时间段，缓存集中过期失效。例如redis宕机</p><p>解决方案：</p><p>redis集群</p><p>限流降级</p><p>数据预热</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>rabbitmq</title>
    <link href="/article/rabbitmq/"/>
    <url>/article/rabbitmq/</url>
    
    <content type="html"><![CDATA[<h1 id="linux下docker安装rabbitmq"><a href="#linux下docker安装rabbitmq" class="headerlink" title="linux下docker安装rabbitmq"></a>linux下docker安装rabbitmq</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -di --name myrabbit -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p 15672:15672 -p 5672:5672 -p 25672:25672 -p 61613:61613 -p 1883:1883 rabbitmq:management<br></code></pre></td></tr></table></figure><h2 id="主要模式"><a href="#主要模式" class="headerlink" title="主要模式"></a>主要模式</h2><ul><li>fanout: 发布订阅模式</li><li>direct：routingKey</li><li>topic：主题模式</li></ul><h2 id="topic模式"><a href="#topic模式" class="headerlink" title="topic模式"></a>topic模式</h2><p>路由key：</p><p>*代表必须要有且只能1个</p><p>#代表0,1或者多个</p><h2 id="docker安装延迟队列插件"><a href="#docker安装延迟队列插件" class="headerlink" title="docker安装延迟队列插件"></a>docker安装延迟队列插件</h2><h3 id="插件下载地址"><a href="#插件下载地址" class="headerlink" title="插件下载地址"></a>插件下载地址</h3><blockquote><p><a href="https://www.rabbitmq.com/community-plugins.html">https://www.rabbitmq.com/community-plugins.html</a></p></blockquote><h3 id="插件复制到容器里"><a href="#插件复制到容器里" class="headerlink" title="插件复制到容器里"></a>插件复制到容器里</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">cp</span> rabbitmq_delayed_message_exchange-3.9.0.ez myrabbit:/plugins<br></code></pre></td></tr></table></figure><p>myrabbit为容器名</p><p>启动插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rabbitmq-plugins <span class="hljs-built_in">enable</span> rabbitmq_delayed_message_exchange<br></code></pre></td></tr></table></figure><h2 id="springboot基于插件实现延迟队列"><a href="#springboot基于插件实现延迟队列" class="headerlink" title="springboot基于插件实现延迟队列"></a>springboot基于插件实现延迟队列</h2><h3 id="声明交换机、队列，绑定"><a href="#声明交换机、队列，绑定" class="headerlink" title="声明交换机、队列，绑定"></a>声明交换机、队列，绑定</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitDelayConfig</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DELAY_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delay.exchange&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DELAY_QUEUE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delay.queue&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DELAY_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delay.routingKey&quot;</span>;<br><br>    <span class="hljs-comment">// 声明交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CustomExchange <span class="hljs-title function_">customExchange</span><span class="hljs-params">()</span> &#123;<br>        HashMap&lt;String, Object&gt; args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        args.put(<span class="hljs-string">&quot;x-delayed-type&quot;</span>,<span class="hljs-string">&quot;direct&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomExchange</span>(DELAY_EXCHANGE,<span class="hljs-string">&quot;x-delayed-message&quot;</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,args);<br>    &#125;<br><br><br>    <span class="hljs-comment">// 声明队列</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">delayedQueue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(DELAY_QUEUE);<br>    &#125;<br><br>    <span class="hljs-comment">// 绑定</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">delayedQueueBindingDelayedExchange</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(delayedQueue()).to(customExchange()).with(DELAY_KEY).noargs();<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendDelayMessage</span><span class="hljs-params">(String message,Integer delayTime)</span> &#123;<br>        rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;delay.exchange&quot;</span>,<span class="hljs-string">&quot;delay.routingKey&quot;</span>,message,msg -&gt;&#123;<br>            <span class="hljs-comment">// 发送消息的时候，设置延迟时长</span><br>            msg.getMessageProperties().setDelay(delayTime);<br>            <span class="hljs-keyword">return</span> msg;<br>        &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DelayConsumer</span> &#123;<br><br>    <span class="hljs-meta">@RabbitListener(queues = &#123;&quot;delay.queue&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveMessage</span><span class="hljs-params">(Message message)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody());<br>        log.info(<span class="hljs-string">&quot;当前时间&#123;&#125;，收到延迟队列的消息：&#123;&#125;&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().toString(),msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="负载均衡-HAProxy"><a href="#负载均衡-HAProxy" class="headerlink" title="负载均衡-HAProxy"></a>负载均衡-HAProxy</h2><p>一种高效、可靠、免费的高可用负载均衡软件</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>企业微信应用</title>
    <link href="/article/qywx/"/>
    <url>/article/qywx/</url>
    
    <content type="html"><![CDATA[<h1 id="企业微信应用开发"><a href="#企业微信应用开发" class="headerlink" title="企业微信应用开发"></a>企业微信应用开发</h1><h2 id="创建企业微信应用"><a href="#创建企业微信应用" class="headerlink" title="创建企业微信应用"></a>创建企业微信应用</h2><h3 id="1-登录进企业微信后台-gt-应用管理-gt-应用-gt-创建应用"><a href="#1-登录进企业微信后台-gt-应用管理-gt-应用-gt-创建应用" class="headerlink" title="1.登录进企业微信后台 -&gt; 应用管理 -&gt;应用-&gt;创建应用"></a>1.登录进企业微信后台 -&gt; 应用管理 -&gt;应用-&gt;创建应用</h3><h3 id="2-填写相关信息"><a href="#2-填写相关信息" class="headerlink" title="2.填写相关信息"></a>2.填写相关信息</h3><h3 id="3-获取企业ID、应用ID和应用Secret"><a href="#3-获取企业ID、应用ID和应用Secret" class="headerlink" title="3.获取企业ID、应用ID和应用Secret"></a>3.获取企业ID、应用ID和应用Secret</h3><ul><li>企业ID corpId，企业微信后台-&gt;我的企业-&gt;企业信息</li><li>应用ID和应用Secret，企业微信后台-&gt;应用管理-&gt;自建的应用</li></ul><h3 id="4-配置应用主页，就是前端页面的url"><a href="#4-配置应用主页，就是前端页面的url" class="headerlink" title="4.配置应用主页，就是前端页面的url"></a>4.配置应用主页，就是前端页面的url</h3><h3 id="5-配置企业可信IP"><a href="#5-配置企业可信IP" class="headerlink" title="5.配置企业可信IP"></a>5.配置企业可信IP</h3><ul><li>URL 为自己写的回调接口地址</li><li>Token 自己填的字符</li><li>EncodingAESKey 随机获取</li></ul><h4 id="5-1-开发接口"><a href="#5-1-开发接口" class="headerlink" title="5.1 开发接口"></a>5.1 开发接口</h4><p>1.下载java版本的加解密库</p><blockquote><p>​    <a href="https://developer.work.weixin.qq.com/document/path/90307#java%E5%BA%93">https://developer.work.weixin.qq.com/document/path/90307#java%E5%BA%93</a></p></blockquote><p>下载下来解压</p><p>2.导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>dom4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dom4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.MessageUtil</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageUtil</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解析微信发来的请求（XML）.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg 消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> map</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, String&gt; <span class="hljs-title function_">parseXml</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String msg)</span> &#123;<br>        <span class="hljs-comment">// 将解析结果存储在HashMap中</span><br>        Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;();<br><br>        <span class="hljs-comment">// 从request中取得输入流</span><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(msg.getBytes(StandardCharsets.UTF_8.name()))) &#123;<br>            <span class="hljs-comment">// 读取输入流</span><br>            <span class="hljs-type">SAXReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>            <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> reader.read(inputStream);<br>            <span class="hljs-comment">// 得到xml根元素</span><br>            <span class="hljs-type">Element</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> document.getRootElement();<br>            <span class="hljs-comment">// 得到根元素的所有子节点</span><br>            List&lt;Element&gt; elementList = root.elements();<br><br>            <span class="hljs-comment">// 遍历所有子节点</span><br>            <span class="hljs-keyword">for</span> (Element e : elementList) &#123;<br>                map.put(e.getName(), e.getText());<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> map;<br>    &#125; <br></code></pre></td></tr></table></figure><p>4.把下载下来的几个文件复制进自己的项目</p><p>AesException.java,ByteGroup.java,PKCS7Encoder.java,SHA1.java,WXBizMsgCrypt.java,XMLParse.java</p><p>5.回调接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/testGet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGet</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;msg_signature&quot;)</span> String msgSignature,</span><br><span class="hljs-params">                      <span class="hljs-meta">@RequestParam(&quot;timestamp&quot;)</span>String timestamp,</span><br><span class="hljs-params">                      <span class="hljs-meta">@RequestParam(&quot;nonce&quot;)</span>String nonce,</span><br><span class="hljs-params">                      <span class="hljs-meta">@RequestParam(&quot;echostr&quot;)</span>String echostr,</span><br><span class="hljs-params">                      <span class="hljs-keyword">final</span> HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> AesException, IOException &#123;<br>    <span class="hljs-comment">// token</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">cdrToken</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;myToken&quot;</span>;<br>    <span class="hljs-comment">// 企业id</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">corpid</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;*****&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">encodingAesKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;tm7KPoP6cIToXV9XVNzQheVsCRXF8jN7CcCJ3tcADnD&quot;</span>;<br>    <span class="hljs-type">WXBizMsgCrypt</span> <span class="hljs-variable">wxcpt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WXBizMsgCrypt</span>(cdrToken,encodingAesKey,corpid);<br>    <span class="hljs-comment">// 随机字符串</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sEchoStr</span> <span class="hljs-operator">=</span> wxcpt.VerifyURL(msgSignature, timestamp, nonce, echostr);<br>    <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getWriter();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//必须要返回解密之后的明文</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;&quot;</span>.equals(sEchoStr)|| sEchoStr==<span class="hljs-literal">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;URL验证失败&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;验证成功!&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    out.write(sEchoStr);<br>    out.flush();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Nginx</title>
    <link href="/article/nginx/"/>
    <url>/article/nginx/</url>
    
    <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><blockquote><p>正向代理：代理客户端，服务端并不知道是哪个客户端</p></blockquote><p>客户端不能直接访问服务端，只能把请求发给nginx，由nginx访问服务端返回结果给客户端。服务端并不知道是哪个客户端调用的。</p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><blockquote><p>反向代理：代理服务端，客户端并不知道是哪个服务端</p></blockquote><p>客户端把请求发送给nginx，nginx再把请求转发给其中一个服务端并返回结果给客户端（负载均衡）</p><h2 id="Nginx的安装"><a href="#Nginx的安装" class="headerlink" title="Nginx的安装"></a>Nginx的安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># nginx的安装环境,直接执行下面命令安装</span><br>yum install gcc openssl openssl-devel pcre pcre-devel zlib zlib-devel -y<br><span class="hljs-comment"># 把官网下载的linux版本的安装包上传</span><br><span class="hljs-comment"># 解压</span><br>tar -zxvf nginx-1.14.2.tar.gz<br><span class="hljs-comment"># 进入nginx主文件</span><br><span class="hljs-built_in">cd</span> nginx-1.14.2<br><span class="hljs-comment"># 安装nginx到/usr/local/nginx</span><br>./configure --prefix=/usr/local/nginx<br>make <br>make install<br><br></code></pre></td></tr></table></figure><h2 id="Nginx启动"><a href="#Nginx启动" class="headerlink" title="Nginx启动"></a>Nginx启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 第一种</span><br><span class="hljs-built_in">cd</span> /usr/local/nginx/sbin<br>./nginx<br><span class="hljs-comment"># 第二种，指定配置文件启动</span><br>/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf<br></code></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p><a href="https://www.cnblogs.com/knowledgesea/p/5175711.html">https://www.cnblogs.com/knowledgesea/p/5175711.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 配置worker进程运行用户 nobody也是一个linux用户，一般用于启动程序，没有密码</span><br><span class="hljs-comment"># user body</span><br><span class="hljs-comment"># 配置工作进程数目，根据硬件调整，通常等于CPU数量或者2倍于CPU数量</span><br>worker_processes 1;<br><br><br><span class="hljs-comment"># 配置全局错误日志及类型，&#123;debug | info | notice | warn | error | crit&#125;，默认error</span><br>error_log logs/error.log;<br><span class="hljs-comment"># error_log logs/error.lognotice;</span><br><span class="hljs-comment"># error_log logs/error.loginfo;</span><br><br>pidlogs/nginx.pid; <span class="hljs-comment"># 配置进程pid文件</span><br><br><br><span class="hljs-comment">###=========================================================================</span><br><br><br><span class="hljs-comment"># 配置工作模式和连接数</span><br>events &#123;<br>worker_connections1024;<span class="hljs-comment">#配置每个worker进程连接上限(65535是最大上限)，nginx支持的总连接数就等于worker_processes * worker_connections</span><br>&#125;<br><span class="hljs-comment">###==========================================================================</span><br><br><span class="hljs-comment"># 配置http服务器，利用他的反向代理功能提供负载均衡支持</span><br>http &#123;<br><span class="hljs-comment"># 配置nginx支持哪些多媒体类型，可以在conf/mime.types查看支持哪些多媒体类型</span><br>includemime.types;<br><span class="hljs-comment"># 默认文件类型 流类型， 可以理解为支持任意类型</span><br>default <span class="hljs-built_in">type</span>application/octet-stream;<br><span class="hljs-comment"># 配置日志格式</span><br><span class="hljs-comment"># log_format main&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="hljs-comment">#&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="hljs-comment">#&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><br><span class="hljs-comment"># 配置access.log日志及存放路径，并使用上面定义的main日志格式</span><br><span class="hljs-comment"># access_log logs/access.log main;</span><br><br>sendfileon;<span class="hljs-comment"># 开启高效文件传输模式</span><br><span class="hljs-comment"># tcp_nopushon;# 防止网络阻塞</span><br><br><span class="hljs-comment"># keepalive_timeout 0;</span><br>keepalive_timeout 65;<span class="hljs-comment"># 长连接超时时间，单位是秒</span><br><br><span class="hljs-comment">#gzipon;# 开启gzip压缩输出</span><br><br><span class="hljs-comment"># 负载均衡</span><br>upstream cdr &#123;<br><span class="hljs-comment"># 轮询</span><br>server 192.168.100.123:8081; <br>server 192.168.100.123:8082;<br><span class="hljs-comment"># 加权</span><br><span class="hljs-comment"># server 192.168.100.123:8081 weight=3; # weight=3为权重</span><br><span class="hljs-comment"># server 192.168.100.123:8082 weight=1;</span><br>&#125;<br><br><span class="hljs-comment"># 配置虚拟主机</span><br>server &#123;<br>listen80;<span class="hljs-comment"># 配置监听端口</span><br>server_namelocalhost;<span class="hljs-comment"># 配置服务名（域名）</span><br><span class="hljs-comment"># charset koi8-r;# 配置字符集</span><br><br><span class="hljs-comment"># access_log logs/host.access.log main;# 配置本虚拟主机的访问日志</span><br><br><span class="hljs-comment"># 默认的匹配斜杠/的请求，当访问路径中有/,会被该location匹配到并进行处理</span><br><span class="hljs-comment"># /代表根路径，ip:端口就是根路径</span><br>location / &#123;<br><span class="hljs-comment"># root是配置服务的默认网站根目录位置，默认为nginx安装主目录的html目录</span><br>root html;<br><span class="hljs-comment"># 配置首页文件的名称</span><br>index index.html index.htm;<br>&#125;<br><span class="hljs-comment"># 配置自己的项目</span><br>location /cdr &#123;<br>root /opt/www;<span class="hljs-comment"># 在www目下再创建一个文件夹cdr，静态资源放在cdr文件夹里</span><br>index login.html;<br>&#125;<br><br><span class="hljs-comment"># 负载均衡</span><br>location /myweb &#123;<br>proxy_pass http://cdr； <span class="hljs-comment"># proxy_pass http:// 为固定格式，cdr必须和upstream相同</span><br>&#125;<br><br><span class="hljs-comment"># error_page 404/404.html;# 配置404页面</span><br><span class="hljs-comment"># redirect server error pages to the static page /50x.html</span><br><span class="hljs-comment"># error_page  500 502 503 504 /50x.html; # 配置50x错误页面</span><br><br><span class="hljs-comment"># 精确匹配</span><br>location = /50x.html &#123;<br>root html;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">########### 每个指令必须有分号结束。#################</span><br><span class="hljs-comment">#user administrator administrators;  #配置用户或者组，默认为nobody nobody。</span><br><span class="hljs-comment">#worker_processes 2;  #允许生成的进程数，默认为1</span><br><span class="hljs-comment">#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址</span><br>error_log <span class="hljs-built_in">log</span>/error.log debug;  <span class="hljs-comment">#制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span><br>events &#123;<br>    accept_mutex on;   <span class="hljs-comment">#设置网路连接序列化，防止惊群现象发生，默认为on</span><br>    multi_accept on;  <span class="hljs-comment">#设置一个进程是否同时接受多个网络连接，默认为off</span><br>    <span class="hljs-comment">#use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span><br>    worker_connections  1024;    <span class="hljs-comment">#最大连接数，默认为512</span><br>&#125;<br>http &#123;<br>    include       mime.types;   <span class="hljs-comment">#文件扩展名与文件类型映射表</span><br>    default_type  application/octet-stream; <span class="hljs-comment">#默认文件类型，默认为text/plain</span><br>    <span class="hljs-comment">#access_log off; #取消服务日志    </span><br>    log_format myFormat <span class="hljs-string">&#x27;$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for&#x27;</span>; <span class="hljs-comment">#自定义格式</span><br>    access_log <span class="hljs-built_in">log</span>/access.log myFormat;  <span class="hljs-comment">#combined为日志格式的默认值</span><br>    sendfile on;   <span class="hljs-comment">#允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span><br>    sendfile_max_chunk 100k;  <span class="hljs-comment">#每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span><br>    keepalive_timeout 65;  <span class="hljs-comment">#连接超时时间，默认为75s，可以在http，server，location块。</span><br><br>    upstream mysvr &#123;   <br>      server 127.0.0.1:7878;<br>      server 192.168.10.121:3333 backup;  <span class="hljs-comment">#热备</span><br>    &#125;<br>    error_page 404 https://www.baidu.com; <span class="hljs-comment">#错误页</span><br>    server &#123;<br>        keepalive_requests 120; <span class="hljs-comment">#单连接请求上限次数。</span><br>        listen       4545;   <span class="hljs-comment">#监听端口</span><br>        server_name  127.0.0.1;   <span class="hljs-comment">#监听地址       </span><br>        location  ~*^.+$ &#123;       <span class="hljs-comment">#请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span><br>           <span class="hljs-comment">#root path;  #根目录</span><br>           <span class="hljs-comment">#index vv.txt;  #设置默认页</span><br>           proxy_pass  http://mysvr;  <span class="hljs-comment">#请求转向mysvr 定义的服务器列表</span><br>           deny 127.0.0.1;  <span class="hljs-comment">#拒绝的ip</span><br>           allow 172.18.5.54; <span class="hljs-comment">#允许的ip           </span><br>        &#125; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Nginx主要应用"><a href="#Nginx主要应用" class="headerlink" title="Nginx主要应用"></a>Nginx主要应用</h2><ul><li>静态网站部署</li><li>负载均衡</li><li>静态代理</li><li>动静分离</li><li>虚拟主机</li></ul><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>Nginx提供的负载均衡策略有2种：内置策略和扩展策略。内置策略为轮询，加权轮询，Ip hash。扩展策略，就天马行空，只有你想不到的没有他做不到的啦，你可以参照所有的负载均衡算法，给他一一找出来做下实现。</p><h2 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h2><p>ip_hash算法，对客户端请求的ip进行hash操作，然后根据hash结果将同一个客户端ip的请求分发给同一台服务器进行处理，可以解决session不共享的问题。</p><h2 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">upstream mysvr &#123;   <br>      server 127.0.0.1:7878;<br>      sercer 127.0.0.1:7879;<br>      server 192.168.10.121:3333 backup;  <span class="hljs-comment">#热备,只有当上面两个服务器挂掉之后，请求才会转发到此服务器</span><br>      <span class="hljs-comment"># 假如要更新代码，可以先更新 backup这台服务器，然后关闭上面两个服务器，再更新上面两个服务器，再开启他们。</span><br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="最少连接"><a href="#最少连接" class="headerlink" title="最少连接"></a>最少连接</h3><p>web请求会被转发到连接数最少的服务器上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">upstream cdr &#123;<br>least conn;<br>server 127.0.0.1:8080;<br>server 127.0.0.1:8081;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>把所有的静态资源访问改为访问nginx，而不是访问tomcat，这种方式叫静态代理。因为ngin更擅长静态资源的处理，性能更好，效率更高。</p><p>所以，实际应用中，将静态资源比如：图片，css，html，js等交给nginx处理。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>netty</title>
    <link href="/article/netty/"/>
    <url>/article/netty/</url>
    
    <content type="html"><![CDATA[<h1 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h1><h2 id="Netty服务器搭建"><a href="#Netty服务器搭建" class="headerlink" title="Netty服务器搭建"></a>Netty服务器搭建</h2><ul><li>构建一对主从线程池</li><li>定义服务器启动类</li><li>为服务器设置channel</li><li>设置处理从线程池的助手类初始化</li><li>监听启动和关闭服务器</li></ul><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.netty<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>netty-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.28.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>NettyServer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cdr.springbootnetty.netty.server;<br><br><span class="hljs-keyword">import</span> io.netty.bootstrap.ServerBootstrap;<br><span class="hljs-keyword">import</span> io.netty.channel.*;<br><span class="hljs-keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;<br><span class="hljs-keyword">import</span> io.netty.channel.socket.SocketChannel;<br><span class="hljs-keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.LengthFieldBasedFrameDecoder;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.string.StringDecoder;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.string.StringEncoder;<br><span class="hljs-keyword">import</span> io.netty.handler.logging.LogLevel;<br><span class="hljs-keyword">import</span> io.netty.handler.logging.LoggingHandler;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> NettyServer</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> Netty server</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> caodengrui</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/10/25 14:50</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Email</span> 592184316@qq.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyServer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">8099</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 创建两个线程组 bossGroup 和 workerGroup</span><br><span class="hljs-comment">         * bossGroup 只是处理连接请求，真正的和客户端业务处理，会交给 workerGroup 完成</span><br><span class="hljs-comment">         *  两个都是无线循环</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">bossGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">workerGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//创建服务器端的启动对象，配置参数</span><br>            <span class="hljs-type">ServerBootstrap</span> <span class="hljs-variable">bootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>();<br>            <span class="hljs-comment">//设置两个线程组</span><br>            bootstrap.group(bossGroup, workerGroup)<br>                    <span class="hljs-comment">//使用NioServerSocketChannel 作为服务器的通道实现</span><br>                    .channel(NioServerSocketChannel.class)<br>                    <span class="hljs-comment">//设置线程队列得到连接个数</span><br>                    .option(ChannelOption.SO_BACKLOG, <span class="hljs-number">128</span>)<br>                    <span class="hljs-comment">//设置保持活动连接状态</span><br>                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="hljs-literal">true</span>)<br>                    <span class="hljs-comment">//通过NoDelay禁用Nagle,使消息立即发出去，不用等待到一定的数据量才发出去</span><br>                    .childOption(ChannelOption.TCP_NODELAY, <span class="hljs-literal">true</span>)<br>                    <span class="hljs-comment">//可以给 bossGroup 加个日志处理器</span><br>                    .handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>(LogLevel.INFO))<br>                    <span class="hljs-comment">//给workerGroup 的 EventLoop 对应的管道设置处理器</span><br>                    .childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                        <span class="hljs-comment">//给pipeline 设置处理器</span><br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel socketChannel)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            <span class="hljs-type">ChannelPipeline</span> <span class="hljs-variable">pipeline</span> <span class="hljs-operator">=</span> socketChannel.pipeline();<br>                            pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEncoder</span>());<span class="hljs-comment">//对 String 对象自动编码,属于出站站处理器</span><br>                            pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringDecoder</span>());<span class="hljs-comment">//把网络字节流自动解码为 String 对象，属于入站处理器</span><br>                            pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LengthFieldBasedFrameDecoder</span>(<span class="hljs-number">24</span>*<span class="hljs-number">1024</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>));<br>                            pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NettyServerHandler</span>());<br>                        &#125;<br>                    &#125;);<br><br>            <span class="hljs-comment">//启动服务器并绑定一个端口并且同步生成一个 ChannelFuture 对象</span><br>            <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">cf</span> <span class="hljs-operator">=</span> bootstrap.bind(port).sync();<br>            <span class="hljs-keyword">if</span> (cf.isSuccess()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;-------服务端启动成功--------&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">//对关闭通道进行监听</span><br>            cf.channel().closeFuture().sync();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//发送异常关闭</span><br>            bossGroup.shutdownGracefully();<br>            workerGroup.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>NettyServerHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cdr.springbootnetty.netty.server;<br><br><span class="hljs-keyword">import</span> io.netty.channel.ChannelHandlerContext;<br><span class="hljs-keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> NettyServerHandler</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> NettyServerHandler</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> caodengrui</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/10/25 14:54</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Email</span> 592184316@qq.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyServerHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;String&gt; &#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 通道读取</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead0</span><span class="hljs-params">(ChannelHandlerContext channelHandlerContext, String o)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;服务器接收到的消息：&quot;</span>+ o);<br>    &#125;<br><br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 通道读取完毕，给客户端响应</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelReadComplete</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        ctx.writeAndFlush(<span class="hljs-string">&quot;hello ,这里是服务端&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>NettyBoot</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cdr.springbootnetty.netty.server;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.CommandLineRunner;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> NettyBoot</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> SpringBoot集成启动netty server，同时不影响tomcat</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> caodengrui</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/10/25 15:03</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Email</span> 592184316@qq.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyBoot</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> NettyServer nettyServer;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            nettyServer.start();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Netty客户端搭建"><a href="#Netty客户端搭建" class="headerlink" title="Netty客户端搭建"></a>Netty客户端搭建</h2><p>NettyClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cdr.springbootnettyclient.netty.client;<br><br><span class="hljs-keyword">import</span> io.netty.bootstrap.Bootstrap;<br><span class="hljs-keyword">import</span> io.netty.channel.*;<br><span class="hljs-keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;<br><span class="hljs-keyword">import</span> io.netty.channel.socket.SocketChannel;<br><span class="hljs-keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.LengthFieldBasedFrameDecoder;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.string.StringDecoder;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.string.StringEncoder;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> NettyClient</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> NettyClient</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> caodengrui</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/10/25 15:05</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Email</span> 592184316@qq.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyClient</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">8099</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br>    <span class="hljs-keyword">public</span> Channel channel;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">eventLoopGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-type">Bootstrap</span> <span class="hljs-variable">bootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            bootstrap.group(eventLoopGroup)<br>                    .channel(NioSocketChannel.class)<br>                    .option(ChannelOption.SO_KEEPALIVE, <span class="hljs-literal">true</span>)<br>                    .remoteAddress(host, port)<br>                    .handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel socketChannel)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            <span class="hljs-type">ChannelPipeline</span> <span class="hljs-variable">pipeline</span> <span class="hljs-operator">=</span> socketChannel.pipeline();<br>                            pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEncoder</span>());<span class="hljs-comment">//对 String 对象自动编码,属于出站站处理器</span><br>                            pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringDecoder</span>());<span class="hljs-comment">//把网络字节流自动解码为 String 对象，属于入站处理器</span><br>                            pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LengthFieldBasedFrameDecoder</span>(<span class="hljs-number">24</span> * <span class="hljs-number">1024</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>));<br>                            pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NettyClientHandler</span>());<br>                        &#125;<br>                    &#125;);<br>            <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">future</span> <span class="hljs-operator">=</span> bootstrap.connect(host, port).sync();<br>            <span class="hljs-keyword">if</span> (future.isSuccess()) &#123;<br>                channel = future.channel();<br>                System.out.println(<span class="hljs-string">&quot;connect server  成功---------&quot;</span>);<br>            &#125;<br><span class="hljs-comment">//            给关闭通道进行监听</span><br>            future.channel().closeFuture().sync();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            eventLoopGroup.shutdownGracefully();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsg</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-built_in">this</span>.channel.writeAndFlush(msg);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>NettyClientHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cdr.springbootnettyclient.netty.client;<br><br><span class="hljs-keyword">import</span> io.netty.channel.ChannelHandlerContext;<br><span class="hljs-keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> NettyClientHandler</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> NettyClientHandler</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> caodengrui</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/10/25 15:09</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Email</span> 592184316@qq.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyClientHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;String&gt; &#123;<br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 通道读取</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead0</span><span class="hljs-params">(ChannelHandlerContext channelHandlerContext, String bucketName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;客户端接收到的消息：&quot;</span>+ bucketName);<br>    &#125;<br><br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * 通道连接就绪，与服务端建立连接</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        ctx.writeAndFlush(<span class="hljs-string">&quot;hello,这是客户端&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>NettyClientBoot</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cdr.springbootnettyclient.netty.client;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.CommandLineRunner;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> NettyBoot</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> SpringBoot集成启动netty server，同时不影响tomcat</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> caodengrui</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/10/25 15:03</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Email</span> 592184316@qq.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyClientBoot</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> NettyClient nettyClient;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            nettyClient.start();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>msyql</title>
    <link href="/article/mysql/"/>
    <url>/article/mysql/</url>
    
    <content type="html"><![CDATA[<h2 id="笔记图片显示不出来"><a href="#笔记图片显示不出来" class="headerlink" title="笔记图片显示不出来"></a>笔记图片显示不出来</h2><p>把笔记图片文件中的图片复制到C:\Users\70394\AppData\Roaming\Typora\typora-user-images下</p><h2 id="DML、DDL、DCL"><a href="#DML、DDL、DCL" class="headerlink" title="DML、DDL、DCL"></a>DML、DDL、DCL</h2><ul><li>DML：update、insert、delete，对数据库中的数据进行操作</li><li>DDL：create、alter、drop等，定义或改变表的结构，数据类型，表之间的链接和约束等初始化工作</li><li>DQL：select,数据库查询语言</li><li>DCL：数据库控制功能。用来设置或更改数据库用户或角色权限。</li></ul><h2 id="编写顺序"><a href="#编写顺序" class="headerlink" title="编写顺序"></a>编写顺序</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br><span class="hljs-keyword">from</span><br><span class="hljs-keyword">where</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span><br><span class="hljs-keyword">having</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <br>limit<br></code></pre></td></tr></table></figure><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">from</span><br><span class="hljs-keyword">on</span><br><span class="hljs-keyword">join</span><br><span class="hljs-keyword">where</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span><br>聚合函数<br><span class="hljs-keyword">having</span><br><span class="hljs-keyword">select</span><br><span class="hljs-keyword">distinct</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br>limit<br></code></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><blockquote><p>作用于字段上</p></blockquote><ul><li>非空约束    NOT NULL    限制该字段数据不能为null</li><li>唯一约束    UNIQUE    保证该字段的所有数据都是唯一的、不重复的</li><li>主键约束    PRIMARY KEY  主键是一行数据的唯一标识，要求非空且唯一</li><li>默认约束    DEFAULT  保存数据时，如果未指定该字段的值，则采用默认值</li><li>检查约束    CHECK  保证字段值满足某一个条件</li><li>外键约束    FOREIGN KEY  用来让两张表的数据之间建立连接，保证数据的一致性和完整性</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">user</span>(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment comment <span class="hljs-string">&#x27;主键&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">unique</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    age <span class="hljs-type">int</span> <span class="hljs-keyword">check</span> ( age <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> <span class="hljs-operator">&amp;&amp;</span> age <span class="hljs-operator">&lt;=</span><span class="hljs-number">120</span> ) comment <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>    status <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;1&#x27;</span> comment <span class="hljs-string">&#x27;状态&#x27;</span>,<br>    gender <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;性别&#x27;</span><br>) comment <span class="hljs-string">&#x27;用户表&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="添加外键"><a href="#添加外键" class="headerlink" title="添加外键"></a>添加外键</h3><p>emp表: 字段名dep_Id</p><p>dept表: 字段名id</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> fk_emp_dept_id <span class="hljs-keyword">foreign</span> key (dep_id) <span class="hljs-keyword">references</span> dept(id);<br></code></pre></td></tr></table></figure><h3 id="删除外键"><a href="#删除外键" class="headerlink" title="删除外键"></a>删除外键</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp <span class="hljs-keyword">drop</span> <span class="hljs-keyword">foreign</span> key fk_emp_dept_id;<br></code></pre></td></tr></table></figure><h3 id="外键删除更新行为"><a href="#外键删除更新行为" class="headerlink" title="外键删除更新行为"></a>外键删除更新行为</h3><ul><li>cascade 父表中删除/更新对应记录时，会删除/更新字表中的记录</li><li>set null 父表中删除对应记录时，会设置子表外键值为null（这就要求外键可以为null）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> fk_emp_dept_id <span class="hljs-keyword">foreign</span> key (dep_id) <span class="hljs-keyword">references</span> dept(id) <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> cascade <span class="hljs-keyword">on</span> <span class="hljs-keyword">delete</span> cascade;<br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> fk_emp_dept_id <span class="hljs-keyword">foreign</span> key (dep_id) <span class="hljs-keyword">references</span> dept(id) <span class="hljs-keyword">on</span> <span class="hljs-keyword">delete</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><ul><li>一对多  员工（N）和部门（1） 实现：在N的表建一个字段外键约束</li><li>多对多  学生（N） 和课程 （N）实现：建立中间表，至少包含两个外键，分别关联两方主键</li><li>一对一  用户与用户详情，多用于多表拆分，实现：将字段放到多个表中  ，在任意一方加入外键关联另一方主键，设置外键唯一</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 多表查询  笛卡尔积 emp<span class="hljs-operator">*</span>dept<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp,dept;<br></code></pre></td></tr></table></figure><h3 id="内连接：相当于查询A、B交集部分数据"><a href="#内连接：相当于查询A、B交集部分数据" class="headerlink" title="内连接：相当于查询A、B交集部分数据"></a>内连接：相当于查询A、B交集部分数据</h3><h4 id="隐式：select-from-a-b-where-a-id-b-id"><a href="#隐式：select-from-a-b-where-a-id-b-id" class="headerlink" title="隐式：select * from a,b where a.id = b.id;"></a>隐式：select * from a,b where a.id = b.id;</h4><h4 id="显式：select-from-a-inner-join-b-on-a-id-b-id"><a href="#显式：select-from-a-inner-join-b-on-a-id-b-id" class="headerlink" title="显式：select * from a inner join b on a.id = b.id;"></a>显式：select * from a inner join b on a.id = b.id;</h4><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><h4 id="左外连接：查询左表所有数据，以及两表交集部分数据"><a href="#左外连接：查询左表所有数据，以及两表交集部分数据" class="headerlink" title="左外连接：查询左表所有数据，以及两表交集部分数据"></a>左外连接：查询左表所有数据，以及两表交集部分数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> 左表 <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> 右表 <span class="hljs-keyword">on</span> <br></code></pre></td></tr></table></figure><h4 id="右外连接：查询右表所有数据，以及两表交集部分数据"><a href="#右外连接：查询右表所有数据，以及两表交集部分数据" class="headerlink" title="右外连接：查询右表所有数据，以及两表交集部分数据"></a>右外连接：查询右表所有数据，以及两表交集部分数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> 左表 <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> 右表 <span class="hljs-keyword">on</span> <br></code></pre></td></tr></table></figure><h3 id="自连接：当前表与自身的连接查询，自连接必须使用表别名"><a href="#自连接：当前表与自身的连接查询，自连接必须使用表别名" class="headerlink" title="自连接：当前表与自身的连接查询，自连接必须使用表别名"></a>自连接：当前表与自身的连接查询，自连接必须使用表别名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> a a1 <span class="hljs-keyword">join</span> a a2 <span class="hljs-keyword">on</span> a1.id <span class="hljs-operator">=</span> a2.id<br></code></pre></td></tr></table></figure><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><p>查询出来的字段列数必须一致，类型也要一致</p><ul><li>union  去重</li><li>union all  不去重</li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>一组操作的集合，要么全部成功，要么全部失败</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 查看事务是否自动提交<br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@autocommit</span>; # <span class="hljs-number">1</span>为自动提交<br><span class="hljs-keyword">set</span> @<span class="hljs-variable">@autocommit</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; # 改为手动<br><br># 提交事务<br><span class="hljs-keyword">commit</span>;<br># 回滚<br><span class="hljs-keyword">rollback</span>;<br></code></pre></td></tr></table></figure><h3 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 开启事务  或者 <span class="hljs-keyword">begin</span>；<br><span class="hljs-keyword">start</span> transaction; <br><br># 提交事务<br><span class="hljs-keyword">commit</span>;<br># 回滚事务<br><span class="hljs-keyword">rollback</span>;<br></code></pre></td></tr></table></figure><h3 id="事务四大特性"><a href="#事务四大特性" class="headerlink" title="事务四大特性"></a>事务四大特性</h3><ul><li>原子性：事务是不可分割的最小操作单元，要么全部成功，要么全部失败</li><li>一致性：事务完成时，必须使所有的数据都保持一致状态（有个文章的发布用户ID是100，用户表里则一定有id为100的用户）</li><li>隔离性：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><h3 id="并发事务问题"><a href="#并发事务问题" class="headerlink" title="并发事务问题"></a>并发事务问题</h3><ul><li>脏读：一个事务读到另外一个事务还没有提交的数据</li><li>不可重复读：一个事务先后读取同一条记录，但两次读取的数据不同，称为不可重复读</li><li>幻读：一个事务按照条件查询时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在</li></ul><blockquote><p>详细图解：<a href="https://blog.csdn.net/weixin_41814871/article/details/124996364">https://blog.csdn.net/weixin_41814871/article/details/124996364</a></p></blockquote><p>脏读：a事务修改张三年龄为23还没有提交，b事务查询张三时查到年龄为23 数据回滚</p><p>不可重复读：a事务先读取张三年龄为20，b事务修改张三年龄为23提交后，a事务又读取张三，发现年龄为23，和上次查询数据不同 update 两次信息结果不一样</p><p>幻读：a事务第一次查询id大于1小于10的数据，查到5条；b事务插入一条id为6的数据，a事务再查id小于10大于1的数据查到6条。  可以用间隙锁解决。</p><p>或者说a事务先查询id等于1的数据，没找到，b事务插入一条id为1的数据提交后，a再插入id为1的数据就会报主键冲突，在快照读的情况下，a事务再去查询id为1的数据还是会找不到 ，在当前读的情况下，会读到id为1的数据。</p><p>insert delete 两次读取个数不一样</p><h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><table><thead><tr><th align="left">隔离级别</th><th><strong>symbol</strong></th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td align="left">读未提交</td><td>READ-UNCOMMITTED</td><td>未解决</td><td>未解决</td><td>未解决</td></tr><tr><td align="left">读已提交</td><td>READ-COMMITTED</td><td>解决</td><td>未解决</td><td>未解决</td></tr><tr><td align="left">可重复读</td><td>REPEATABLE-READ（默认）</td><td>解决</td><td>解决</td><td>未解决</td></tr><tr><td align="left">序列化</td><td>SERIALIZABLE（所有操作都加锁）</td><td>解决</td><td>解决</td><td>解决</td></tr></tbody></table><h4 id=""><a href="#" class="headerlink" title=""></a></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 查看事务隔离级别<br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@TRANSACTION</span>_ISOLATION;<br># 设置事务隔离级别  <span class="hljs-operator">|</span>代表或<br><span class="hljs-keyword">set</span> SESSION<span class="hljs-operator">|</span><span class="hljs-keyword">GLOBAL</span> TRANSACTION ISOLATION LEVEL READ UNCOMMITTED<span class="hljs-operator">|</span>READ COMMITTED<span class="hljs-operator">|</span>REPEATABLE   READ<span class="hljs-operator">|</span>SERIALIZABLE<br></code></pre></td></tr></table></figure><h2 id="引擎"><a href="#引擎" class="headerlink" title="引擎"></a>引擎</h2><ul><li>InnoDB：是Mysql5.5后的默认存储引擎，支持事务、外键、行级锁。如果应用对事务的完整性要求比较高，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，使用InnoDB。</li><li>MyISAM：如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，用MYISAM。  mongoDB替代</li><li>MEMORY：将所有的数据保存在内存中，访问速度快，通常用于临时表缓存。MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，无法保障数据的安全性。 Redis替代。</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><blockquote><p>索引（index）是帮助mysql高效获取数据的数据结构（有序），在存储引擎层实现</p></blockquote><table><thead><tr><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>提高数据检索的效率，降低数据库的IO成本</td><td>索引列也要占用空间</td></tr><tr><td>通过索引列对数据进行排序，降低数据排序成本，降低cpu的消耗</td><td>提高了查询效率，降低了插入，更新，删除的效率</td></tr></tbody></table><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><table><thead><tr><th>索引结构</th><th>描述</th></tr></thead><tbody><tr><td>B+Tree索引（默认）</td><td>最常见，大部分引擎都支持</td></tr><tr><td>Hash索引</td><td>底层是用哈希表实现的，只有精确匹配索引列的查询才有效，不支持范围查询</td></tr><tr><td>R-tree(空间索引)</td><td>MyISAM引擎的一个特殊索引，主要用于地理空间数据类型</td></tr><tr><td>Full-text(全文索引)</td><td>通过建立倒排索引，快速匹配文档。类似于Lecene，Solr，ES</td></tr></tbody></table><table><thead><tr><th>索引</th><th>引擎</th></tr></thead><tbody><tr><td>B+Tree索引（默认）</td><td>InnoDB,MyISAM,Memory</td></tr><tr><td>Hash索引</td><td>Memory</td></tr><tr><td>R-tree(空间索引)</td><td>MyISAM</td></tr><tr><td>Full-text(全文索引)</td><td>5.6版本之后InnoDB,MyISAM</td></tr></tbody></table><h3 id="数据结构可视化网站"><a href="#数据结构可视化网站" class="headerlink" title="数据结构可视化网站"></a>数据结构可视化网站</h3><p><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></p><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>左边的数据&lt;根节点数据&lt;右边的数据</p><p><img src="/../../images/image-20220209112321698.png" alt="image-20220209112321698"></p><p><strong>缺点</strong>：顺序插入时，会形成一个单向链表，查询性能大大降低。大数据情况下，层次较深，检索速度慢。</p><p><strong>解决</strong>：通过红黑树解决，大数据量情况下，层次较深，检索速度慢。</p><h3 id="Btree（多路平衡查找树）"><a href="#Btree（多路平衡查找树）" class="headerlink" title="Btree（多路平衡查找树）"></a>Btree（多路平衡查找树）</h3><blockquote><p>以一颗最大度数为5的Btree为例，每个节点最多存储4个key，5个指针</p></blockquote><p>树的度数：一个节点的子节点个数</p><p><img src="/../../images/image-20220209134004024.png" alt="image-20220209134004024"></p><h3 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B+Tree"></a>B+Tree</h3><p><img src="/../../images/image-20220209135628331.png" alt="image-20220209135628331"></p><p>相对于btree的区别：</p><ul><li>所有的数据都出现在叶子节点</li><li>叶子节点形成一个单项链表</li></ul><p><img src="/../../images/image-20220209140934435.png" alt="image-20220209140934435"></p><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><blockquote><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，存储在hash表中。</p><p>如果两个（或多个）键值，映射到同一个槽位上，就产生了hash冲突（hash碰撞），通过链表解决</p></blockquote><p><img src="/../../images/image-20220209141452864.png" alt="image-20220209141452864"></p><p>Hash索引的特点</p><ul><li>Hash索引只能用于对等比较（=，in），不支持范围查询（between，&gt;,&lt;,…..）</li><li>无法利用索引完成排序操作</li><li>查询效率高，通常只需要一次检索就行，效率通常高于B+tree索引</li></ul><p>存储引擎支持</p><p>在Mysql中，支持hash索引的是Memory引擎，而InnoDB中具有自适应hash功能，hash索引是存储引擎根据B+tree索引在指定条件下自动构建的</p><h3 id="为什么InnoDB使用b-tree？"><a href="#为什么InnoDB使用b-tree？" class="headerlink" title="为什么InnoDB使用b+tree？"></a>为什么InnoDB使用b+tree？</h3><ul><li>相对于二叉树，层级更少，搜索效率高</li><li>对于btree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li><li>相对于hash，B+tree支持范围匹配及排序操作；</li></ul><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><p><img src="/../../images/image-20220209142351969.png" alt="image-20220209142351969"></p><p><img src="/../../images/image-20220209142446930.png" alt="image-20220209142446930"></p><p>聚集索引选取规则：</p><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引。</li><li>如果表没有主键，或没有合适的唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索引。</li></ul><p><img src="/../../images/image-20220209142901113.png" alt="image-20220209142901113"></p><p><img src="/../../images/image-20220209143027161.png" alt="image-20220209143027161"></p><h3 id="索引语法"><a href="#索引语法" class="headerlink" title="索引语法"></a>索引语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 创建索引 索引创建在多个字段上叫联合索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">unique</span><span class="hljs-operator">/</span>fulltext INDEX index_name <span class="hljs-keyword">on</span> table_name (colume1,colume2,....);<br># 创建索引时指定排序,默认是升序<br><span class="hljs-keyword">create</span> index index_age_phone_ad <span class="hljs-keyword">on</span> <span class="hljs-keyword">user</span>(age <span class="hljs-keyword">asc</span>, phone <span class="hljs-keyword">desc</span>)<br><br># 查看索引<br><span class="hljs-keyword">show</span> INDEX <span class="hljs-keyword">from</span> table_name;<br><br># 删除索引<br><span class="hljs-keyword">drop</span> INDEX index_name <span class="hljs-keyword">on</span> table_name;<br></code></pre></td></tr></table></figure><h3 id="SQL性能分析"><a href="#SQL性能分析" class="headerlink" title="SQL性能分析"></a>SQL性能分析</h3><h4 id="查看执行频率"><a href="#查看执行频率" class="headerlink" title="查看执行频率"></a>查看执行频率</h4><p>可以查看insert，update，delete，select语句执行的次数</p><h4 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h4><p>默认是关闭的，在配置文件中开启，设置超过多少秒为慢查询</p><h4 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 查看每一条<span class="hljs-keyword">sql</span>的耗时基本情况<br><span class="hljs-keyword">show</span> profiles;<br># 查看指定query_id的<span class="hljs-keyword">sql</span>语句各个阶段的耗时情况<br><span class="hljs-keyword">show</span> profile <span class="hljs-keyword">for</span> query query_id;<br># 查看指定query_id的<span class="hljs-keyword">sql</span>语句cpu的使用情况<br><span class="hljs-keyword">show</span> profile cpu <span class="hljs-keyword">for</span> query query_id;<br></code></pre></td></tr></table></figure><h4 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h4><p>查看sql的执行计划</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h3 id="索引使用"><a href="#索引使用" class="headerlink" title="索引使用"></a>索引使用</h3><h4 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h4><p>如果索引了多列（联合索引），要遵守最左前缀法则，指查询从索引的最左列开始，索引才会生效；如果跳跃了中间的字段，索引将部分失效（后面字段的索引失效）</p><p>当创建（a,b,c）的联合索引时，只有a,ab,ac,abc，索引才会生效。使用ac时，只有a索引生效。</p><h4 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h4><p>联合索引中，出现范围查询（&gt;,&lt;),范围查询右侧的列索引失效</p><p>a&gt; 1 and b =1and c=1,这时只有a生效。</p><h4 id="索引列运算"><a href="#索引列运算" class="headerlink" title="索引列运算"></a>索引列运算</h4><p>不要再索引列上进行运算操作，索引将失效</p><h4 id="字符串不加引号"><a href="#字符串不加引号" class="headerlink" title="字符串不加引号"></a>字符串不加引号</h4><p>字符串类型字段不加单引号，索引会失效。</p><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><p>如果仅仅是尾部模糊匹配，索引不会失效；头部模糊匹配，索引失效。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> depart <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%软件&#x27;</span>;  # 索引失效<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> depart <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;软件%&#x27;</span>;  # 索引不失效<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> depart <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%软件%&#x27;</span>;  # 索引失效<br></code></pre></td></tr></table></figure><h4 id="or连接的条件"><a href="#or连接的条件" class="headerlink" title="or连接的条件"></a>or连接的条件</h4><p>用or分割开的条件，如果or的条件中的一列有索引，一列没有索引，那么涉及到的索引不会被用到</p><h4 id="数据分布影响"><a href="#数据分布影响" class="headerlink" title="数据分布影响"></a>数据分布影响</h4><p>如果mysql评估使用索引比全表查询慢，则不使用索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># id为<span class="hljs-number">0</span><span class="hljs-operator">~</span><span class="hljs-number">20</span>，此时绝大部分数据id<span class="hljs-operator">&gt;</span><span class="hljs-number">5</span>，mysql不会走索引<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><h4 id="sql提示"><a href="#sql提示" class="headerlink" title="sql提示"></a>sql提示</h4><ul><li>use index: 推荐使用这个索引</li><li>ignore index: 忽略这个索引</li><li>force index: 强制使用这个索引</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> use index(idx_user_pro) <span class="hljs-keyword">where</span> profession <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;软件工程&#x27;</span>； <br></code></pre></td></tr></table></figure><h4 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h4><p>尽量使用覆盖索引（查询使用了索引，并且需要 返回的列，在该索引中已经全部能够找到），减少select *</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"># id，联合索引（name,age,status） pro<br># 下面这条<span class="hljs-keyword">sql</span>只用联合索引就可以查出所有数据，相对较快<br><span class="hljs-keyword">select</span> id,name,age,status <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;xiaohong&#x27;</span>; <br># 下面这条需要回表查询，先用联合索引找到id，再去聚集索引查pro，相对较慢<br><span class="hljs-keyword">select</span> id,name,age,status,pro <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;xioahong&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>字段为（varchar，text等），索引很长的字符串，索引会变得很大。可以只将字符串的一部分前缀，建立索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> index idx_user_name <span class="hljs-keyword">on</span> tbl_user(name(<span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><h2 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h2><h3 id="insert优化"><a href="#insert优化" class="headerlink" title="insert优化"></a>insert优化</h3><ul><li>批量插入</li><li>手动提交事务</li><li>主键顺序插入</li><li>大批量插入数据使用load</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 客户端连接服务器端是，加上参数 <span class="hljs-comment">--local-infile</span><br>mysql <span class="hljs-comment">--local-infile -u root -p</span><br># 设置全局参数local_infile为<span class="hljs-number">1</span>，开启从本地加载文件导入数据的开关<br><span class="hljs-keyword">set</span> golbal local_infile <span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br># 执行load指令将准备好的数据，加载到表结构中<br>load data <span class="hljs-keyword">local</span> infile <span class="hljs-string">&#x27;/root/sql1.log&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> `tb_user` fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;,&#x27;</span> lines terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\n&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="update优化"><a href="#update优化" class="headerlink" title="update优化"></a>update优化</h3><p>where后面不是索引字段，会变为表锁；where后是索引字段，是行锁。</p><h3 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h3><p>效率count(1)和count(*)最高</p><p>count(字段)&lt;count(id)&lt;count(1)=count(*)</p><p>count(字段):如果有非空约束，遍历表，取出每一行的字段，最后返回累加的值；没有，还需要判断是否为空</p><p>count(id):主键不可能为空，遍历表，取出每一行的id，最后返回累加的值；</p><p>count(1):遍历表，不用取值，直接有一行就给个值1，会后返回累加的值；</p><p>count(*):innodb做过优化，效率很高；</p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> replace <span class="hljs-keyword">view</span> v_stu <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> id,name <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id <span class="hljs-operator">&lt;=</span><span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><h3 id="查询视图"><a href="#查询视图" class="headerlink" title="查询视图"></a>查询视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> v_stu;<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> v_stu;<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> v_stu <span class="hljs-keyword">where</span> id <span class="hljs-operator">&lt;</span> <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><h3 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 第一种<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> replace <span class="hljs-keyword">view</span> v_stu <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> id,name <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id <span class="hljs-operator">&lt;=</span><span class="hljs-number">10</span>;<br># 第二种<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">view</span> v_stu <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> id,name <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id<span class="hljs-operator">&lt;=</span><span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> if <span class="hljs-keyword">exists</span> v_stu;<br></code></pre></td></tr></table></figure><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>存储过程是事先经过编译并存储在数据库中的一段sql语句的集合，调用存储过程可以简化开发，提高数据处理效率。</p><p>存储过程思想上很简单，就是数据库SQL语言层面的代码封装与重用。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点<img src=""></h3><ul><li>封装，复用</li><li>可以接受参数，也可以返回数据</li><li>减少网络交互，效率提升</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>创建</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> pro_name()<br><span class="hljs-keyword">begin</span><br><span class="hljs-comment">---sql语句</span><br><span class="hljs-keyword">end</span>;<br></code></pre></td></tr></table></figure><p>调用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">call</span> pro_name();<br></code></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>用户定义变量是用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用”@变量名“。作用域为当前连接。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 第一种 赋值<br><span class="hljs-keyword">set</span> <span class="hljs-variable">@var</span>_name :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;cdr&#x27;</span>;<br># 第二种<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@var</span>_name :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;cdr&#x27;</span>;<br># 第三种 把查询出来的字段值指定给变量<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">into</span> <span class="hljs-variable">@var</span>_name <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<br><br><br># 使用<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@var</span>_name;<br></code></pre></td></tr></table></figure><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>局部变量是根据需要定义在局部生效的变量，访问之前需要declare声明。可用作存储过程内的局部变量和输入参数，局部变量的范围是在期内声明的BEGIN…END块。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 变量类型就是数据库字段类型<br><span class="hljs-keyword">declare</span> 变量名 变量类型 <span class="hljs-keyword">default</span> 默认值;<br></code></pre></td></tr></table></figure><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">if 条件<span class="hljs-number">1</span> <span class="hljs-keyword">then</span><br>....<br>elseif 条件<span class="hljs-number">2</span> <span class="hljs-keyword">then</span><br>...<br><span class="hljs-keyword">else</span><br>...<br><span class="hljs-keyword">end</span> if;<br></code></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p><img src="/../../images/image-20220210162002333.png" alt="image-20220210162002333"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> pro_name(<span class="hljs-keyword">in</span><span class="hljs-operator">/</span><span class="hljs-keyword">out</span><span class="hljs-operator">/</span><span class="hljs-keyword">inout</span> 参数名 参数类型)<br><span class="hljs-keyword">begin</span><br><span class="hljs-comment">---sql语句</span><br><span class="hljs-keyword">end</span>;<br><span class="hljs-comment">--------------示例1---------------</span><br># 创建存储过程 输入参数score，输出参数<span class="hljs-keyword">result</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">PROCEDURE</span> p1(<span class="hljs-keyword">in</span> score <span class="hljs-type">int</span>,<span class="hljs-keyword">out</span> <span class="hljs-keyword">result</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>))<br><span class="hljs-keyword">BEGIN</span><br>if score <span class="hljs-operator">&gt;=</span> <span class="hljs-number">85</span> <span class="hljs-keyword">then</span> <br><span class="hljs-keyword">set</span> <span class="hljs-keyword">result</span>:<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;优秀&#x27;</span>;<br>elseif score<span class="hljs-operator">&gt;=</span><span class="hljs-number">60</span> <span class="hljs-keyword">then</span> <br><span class="hljs-keyword">set</span> <span class="hljs-keyword">result</span>:<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;良好&#x27;</span>;<br><span class="hljs-keyword">else</span> <br><span class="hljs-keyword">set</span> <span class="hljs-keyword">result</span>:<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;不及格&#x27;</span>;<br><span class="hljs-keyword">end</span> if;<br><span class="hljs-keyword">END</span>;<br><br># 调用存储过程p1，<span class="hljs-variable">@result</span>为自定义变量，用来接收p1输出结果<br><span class="hljs-keyword">call</span> p1(<span class="hljs-number">12</span>,<span class="hljs-variable">@result</span>);<br># 查询自定义参数<span class="hljs-variable">@result</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@result</span>;<br><br><span class="hljs-comment">------------示例2-------------</span><br># 将传入的<span class="hljs-number">200</span>分制的分数转换成<span class="hljs-number">100</span>分制返回<br># 创建存储过程 score既是输入参数，也是输出参数<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">PROCEDURE</span> p2(<span class="hljs-keyword">inout</span> score <span class="hljs-keyword">double</span>)<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">set</span> score:<span class="hljs-operator">=</span>score<span class="hljs-operator">*</span><span class="hljs-number">0.5</span>;<br><span class="hljs-keyword">end</span>;<br># 自定义变量 <span class="hljs-variable">@score</span><br><span class="hljs-keyword">set</span> <span class="hljs-variable">@score</span> :<span class="hljs-operator">=</span> <span class="hljs-number">78</span>;<br># 调用<br><span class="hljs-keyword">call</span> p2(<span class="hljs-variable">@score</span>); <br># 查看<span class="hljs-variable">@score</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@score</span>;<br><br></code></pre></td></tr></table></figure><h4 id="case"><a href="#case" class="headerlink" title="case"></a>case</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> p3(<span class="hljs-keyword">in</span> mon <span class="hljs-type">int</span>)<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> season <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">case</span> <br><span class="hljs-keyword">when</span> mon <span class="hljs-operator">&lt;=</span><span class="hljs-number">3</span> <span class="hljs-keyword">and</span> mon <span class="hljs-operator">&gt;=</span><span class="hljs-number">1</span> <br><span class="hljs-keyword">then</span> <span class="hljs-keyword">set</span> season:<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;第一季度&#x27;</span>;<br><span class="hljs-keyword">when</span> mon <span class="hljs-operator">&lt;=</span><span class="hljs-number">6</span> <span class="hljs-keyword">and</span> mon <span class="hljs-operator">&gt;=</span><span class="hljs-number">4</span><br><span class="hljs-keyword">then</span> <span class="hljs-keyword">set</span> season:<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;第二季度&#x27;</span>;<br><span class="hljs-keyword">when</span> mon <span class="hljs-operator">&lt;=</span><span class="hljs-number">9</span> <span class="hljs-keyword">and</span> mon <span class="hljs-operator">&gt;=</span><span class="hljs-number">7</span> <br><span class="hljs-keyword">then</span> <span class="hljs-keyword">set</span> season:<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;第三季度&#x27;</span>;<br><span class="hljs-keyword">when</span> mon <span class="hljs-operator">&lt;=</span><span class="hljs-number">12</span> <span class="hljs-keyword">and</span> mon <span class="hljs-operator">&gt;=</span><span class="hljs-number">10</span><br><span class="hljs-keyword">then</span> <span class="hljs-keyword">set</span> season:<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;第四季度&#x27;</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">set</span> season:<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;非法参数&#x27;</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">case</span>;<br><span class="hljs-keyword">select</span> season;<br><span class="hljs-keyword">end</span>;<br><br><span class="hljs-keyword">call</span> p3(<span class="hljs-number">4</span>);<br></code></pre></td></tr></table></figure><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 计算<span class="hljs-number">1</span>累加到n的值<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> p5(<span class="hljs-keyword">in</span> n <span class="hljs-type">int</span>)<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> total <span class="hljs-type">int</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>;<br>while n<span class="hljs-operator">&gt;</span><span class="hljs-number">0</span> do<br><span class="hljs-keyword">set</span> total :<span class="hljs-operator">=</span> total<span class="hljs-operator">+</span>n;<br><span class="hljs-keyword">set</span> n :<span class="hljs-operator">=</span> n<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">end</span> while;<br><span class="hljs-keyword">select</span> total;<br><span class="hljs-keyword">end</span>;<br><br></code></pre></td></tr></table></figure><h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h4><p>先执行一次，满足条件退出循环，不满足继续循环</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 计算<span class="hljs-number">1</span>累加到n的值<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> p5(<span class="hljs-keyword">in</span> n <span class="hljs-type">int</span>)<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> total <span class="hljs-type">int</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>;<br>repeat <br><span class="hljs-keyword">set</span> total :<span class="hljs-operator">=</span> total<span class="hljs-operator">+</span>n;<br><span class="hljs-keyword">set</span> n :<span class="hljs-operator">=</span> n<span class="hljs-number">-1</span>;<br>until n<span class="hljs-operator">&lt;=</span><span class="hljs-number">0</span>;<br><span class="hljs-keyword">end</span> repeat;<br><span class="hljs-keyword">select</span> total;<br><span class="hljs-keyword">end</span>;<br></code></pre></td></tr></table></figure><h4 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h4><ul><li>leave : 退出循环</li><li>iterate: 跳过当次循环，进入下一次循环</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 计算<span class="hljs-number">1</span>累加到n的值<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> p5(<span class="hljs-keyword">in</span> n <span class="hljs-type">int</span>)<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> total <span class="hljs-type">int</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>;<br>sum:loop <br>if n<span class="hljs-operator">&lt;=</span><span class="hljs-number">0</span> <span class="hljs-keyword">then</span><br>leave sum;<br><span class="hljs-keyword">end</span> if;<br><span class="hljs-keyword">set</span> total :<span class="hljs-operator">=</span> total<span class="hljs-operator">+</span>n;<br><span class="hljs-keyword">set</span> n :<span class="hljs-operator">=</span> n<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">end</span> loop sum;<br><span class="hljs-keyword">select</span> total;<br><span class="hljs-keyword">end</span>;<br><span class="hljs-comment">-----------------------------------------------</span><br># 计算<span class="hljs-number">1</span>到n之间的偶数和<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> p4(<span class="hljs-keyword">in</span> n <span class="hljs-type">int</span>)<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> total <span class="hljs-type">int</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>;<br>sum:loop <br>if n<span class="hljs-operator">&lt;=</span><span class="hljs-number">0</span> <span class="hljs-keyword">then</span><br>leave sum;<br><span class="hljs-keyword">end</span> if;<br>if n<span class="hljs-operator">%</span><span class="hljs-number">2</span> <span class="hljs-operator">&lt;&gt;</span><span class="hljs-number">0</span> <span class="hljs-keyword">then</span><br><span class="hljs-keyword">set</span> n :<span class="hljs-operator">=</span> n<span class="hljs-number">-1</span>;<br>iterate sum;<br><span class="hljs-keyword">end</span> if;<br><span class="hljs-keyword">set</span> total :<span class="hljs-operator">=</span> total<span class="hljs-operator">+</span>n;<br><span class="hljs-keyword">set</span> n :<span class="hljs-operator">=</span> n<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">end</span> loop sum;<br><span class="hljs-keyword">select</span> total;<br><span class="hljs-keyword">end</span>;<br><br><span class="hljs-keyword">call</span> p4(<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><h4 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 根据传人参数uage，来查询用户表tb_user中，所有的用户年龄小于等于uage的用户姓名（name）,和专业（profession），并将用户的姓名和专业插入到所创建的一张新表（id,name,profession）<br># 第一种<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> p6(<span class="hljs-keyword">in</span> uage <span class="hljs-type">int</span>)<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> uname <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>);<br><span class="hljs-keyword">declare</span> upro <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>);<br><span class="hljs-keyword">declare</span> u_cursor <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">select</span> name,profession <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> age <span class="hljs-operator">&lt;=</span> uage;<br><span class="hljs-keyword">declare</span> exit handler <span class="hljs-keyword">for</span> <span class="hljs-keyword">not</span> found <span class="hljs-keyword">close</span> u_cursor;<br><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> tb_user_pro;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> tb_user_pro(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>        name <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>),<br>        profession <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    );<br>    <br>    <span class="hljs-keyword">open</span> u_cursor;<br>    while <span class="hljs-literal">true</span> do<br>    <span class="hljs-keyword">fetch</span> u_cursor <span class="hljs-keyword">into</span> uname,upro;<br>    <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_user_pro <span class="hljs-keyword">values</span>(<span class="hljs-keyword">null</span>,uname,upro)<br>    <span class="hljs-keyword">end</span> while;<br>    <span class="hljs-keyword">close</span> u_cursor;<br><br><span class="hljs-keyword">end</span>;<br><br>#  第二种<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> p6(<span class="hljs-keyword">in</span> uage <span class="hljs-type">int</span>)<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> uname <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>);<br><span class="hljs-keyword">declare</span> upro <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>);<br><span class="hljs-keyword">declare</span> u_cursor <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">select</span> name,profession <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> age <span class="hljs-operator">&lt;=</span> uage;<br><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> tb_user_pro;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> tb_user_pro(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>        name <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>),<br>        profession <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    );<br>    <br>    <span class="hljs-keyword">open</span> u_cursor;<br>    myLoop:loop<br>    <span class="hljs-keyword">fetch</span> u_cursor <span class="hljs-keyword">into</span> uname,upro;<br>    <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_user_pro <span class="hljs-keyword">values</span>(<span class="hljs-keyword">null</span>,uname,upro)<br>    exit <span class="hljs-keyword">when</span> u_cursor<span class="hljs-operator">%</span>NOTFOUND;<br>    <span class="hljs-keyword">end</span> loop myLoop;<br>    <span class="hljs-keyword">close</span> u_cursor;<br><br><span class="hljs-keyword">end</span>;<br></code></pre></td></tr></table></figure><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>OLD表示原来的老记录，NEW表示新记录。现在触发器只支持行级触发，不支持语句级触发器</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 创建<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> trigger_name<br>before<span class="hljs-operator">/</span>after <span class="hljs-keyword">insert</span><span class="hljs-operator">/</span><span class="hljs-keyword">update</span><span class="hljs-operator">/</span><span class="hljs-keyword">delete</span><br><span class="hljs-keyword">on</span> tbl_name <span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> <span class="hljs-type">row</span>    <span class="hljs-comment">-- 行级触发器</span><br><span class="hljs-keyword">begin</span><br>...;<br><span class="hljs-keyword">end</span>;<br><br># 查看<br><span class="hljs-keyword">show</span> triggers;<br><br># 删除<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">trigger</span> database_name.trigger_name;<br></code></pre></td></tr></table></figure><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><ul><li>全局锁：锁定数据库中的所有表</li><li>表级锁：每次操作锁住整张表</li><li>行级锁，每次操作锁住对应的行数据</li></ul><h3 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h3><p>全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态</p><p>典型的使用场景：做全库的逻辑备份</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 加全局锁<br>flush tables <span class="hljs-keyword">with</span> read lock;<br># 备份,退出mysql才能用mysqldump<br>mysqldump <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p123456 db_name <span class="hljs-operator">&gt;</span> db_name.sql<br># 解锁<br>unlock tables;<br># innodb引擎中，可以不加锁完成备份（快照读）<br>mysqldump <span class="hljs-comment">--single-transaction -uroot -p123456 db_name &gt; db_name.sql;</span><br></code></pre></td></tr></table></figure><h3 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h3><ul><li>表锁</li><li>元数据锁（meta data lock，MDL）</li><li>意向锁</li></ul><p>读锁：只读</p><p>写锁：只写</p><p>表锁语法：</p><p>加锁语法：lock tables 表名…  read/write</p><p>释放锁：unlock tables   或者断开连接</p><h3 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h3><p>InnoDB的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录加的锁。</p><ul><li>行锁（Record Lock）:锁定单个行记录的锁，防止其他事务对此进行update和delete。RC、RR隔离级别下都支持</li><li>间隙锁（Gap Lock）:锁定索引记录间隙（不含该记录），确保索引记录间隙不变，防止其他事务在这个间隙进行insert，产生幻读。在RR隔离级别下支持</li><li>临键锁（Next-Key Lock):行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙Gap。RR隔离级别下支持</li></ul><h4 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h4><ul><li>共享锁：运行一个事务去读一行，阻止其他事务获得相同数据集的排他锁</li><li>排他锁：运行获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁</li></ul><h2 id="InnoDB引擎"><a href="#InnoDB引擎" class="headerlink" title="InnoDB引擎"></a>InnoDB引擎</h2><p>表空间：ibd文件，存储记录和索引</p><p>段：数据段，索引段，回滚段。数据段是B+树的叶子节点，索引段是非叶子节点</p><p>区：表空间的单元结构，大小为1M。默认情况下，页大小为16k，一个区中有64个连续的页</p><p>页：InnoDB磁盘管理的最小单元，每个页默认16k。为了保证页的连续性，InnoDB每次从磁盘申请4-5个区</p><p>行：InnoDB数据按行进行存放的</p><h3 id="事务原理"><a href="#事务原理" class="headerlink" title="事务原理"></a>事务原理</h3><p><img src="/../../images/image-20220214101311186.png" alt="image-20220214101311186"></p><p>redo log解决持久性，物理日志</p><p>undo log解决原子性，逻辑日志，数据回滚（有一条delete的sql，undo log就会有一天Insert的sql）</p><h3 id="MVCC（多版本并发控制）"><a href="#MVCC（多版本并发控制）" class="headerlink" title="MVCC（多版本并发控制）"></a>MVCC（多版本并发控制）</h3><p>只有在RC和RR两种隔离级别下，MVCC才生效</p><ul><li>当前读：读取的是记录最新版本，读取是还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。select…lock in share mode(共享锁),select…for update,update,insert,delete(排他锁)都是当前读。</li><li>快照读：简单的select（不加锁）就是快照读，快照读，读取的是记录可见的版本，有可能是历史数据，不加锁，是非阻塞读。<ul><li>Read Committed：每次select，都生成一个快照读</li><li>Repeatable Read：开启事务后第一个select语句才是快照读的地方</li><li>Seriablizable：快照读会退化为当前读</li></ul></li><li>MVCC：多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突，快照读为Mysql实现MVCC提供了一个非阻塞功能。MVCC的具体实现，还需要依赖数据库记录中的三个隐式字段、undo log、readView</li></ul><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>隐藏字段</p><p><img src="/../../images/image-20220214102924897.png" alt="image-20220214102924897"></p><p>undolog版本链</p><p>readview：读视图是快照读sql执行时MVCC提取数据的依据，记录并维护系统当前活跃的事务（未提交的）id</p><p>包含四个核心字段：</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>m_ids</td><td>当前活跃的事务id集合</td></tr><tr><td>min_trx_id</td><td>最小活跃事务id</td></tr><tr><td>max_trx_id</td><td>预分配事务id，当前最大事务id+1）（因为事务id是自增的）</td></tr><tr><td>creator_trx_id</td><td>readview创建者的事务id</td></tr></tbody></table><p>不同的隔离级别下，生成readview时机不同：</p><p>1.read committed：在事务中每次一执行快照读时生成readview</p><p>2.repeatable read：仅在事务中第一次执行快照读时生成readview，后续复用该readview</p><p>开始事务时创建readview，readview维护当前活动的事务id，即未提交的事务id，排序生成一个数组[7,8,9]</p><p>访问数据获取最大事务id的记录，对比readview，比readview小（意味着事务已提交），可以访问；比readview大（事务未提交不可访问），获取DB_ROLL_PTR,取上一版本的事务id重新对比</p><h2 id="MySQL管理工具"><a href="#MySQL管理工具" class="headerlink" title="MySQL管理工具"></a>MySQL管理工具</h2><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p>该mysql不是指mysql服务，而是指mysql客户端工具。</p><ul><li>-u : 指定用户名</li><li>-p:指定密码</li><li>-h:指定服务器IP或域名</li><li>-P:指定连接端口</li><li>-e: 执行SQL语句并退出</li></ul><p>-e选项可以在Mysql客户端执行SQL语句，而不用连接到MySQL数据库再执行，批处理脚本可以使用，</p><p>例如 mysql -uroot -p123456 dbname -e “select * from user”;</p><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>1.Master主库在事务提交时，会把数据变更记录在二进制日志文件Binlog中。</p><p>2.从库读取主库的二进制日志文件Binlog，写入到从库的中继日志Relay Log。</p><p>3.从库重做中继日志中的事件，变更数据。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>2台服务器，开放3306端口，或者直接关闭防火墙</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 开放指定的<span class="hljs-number">3306</span>端口<br>firewall-<span class="hljs-built_in">cmd</span> --zone=public --add-port=<span class="hljs-number">3306</span>/tcp-permanent<br>firewall-<span class="hljs-built_in">cmd</span>-reload<br><br># 关闭服务器的防火墙<br>systemctl stop firewalld<br>systemctl disable firewalld<br></code></pre></td></tr></table></figure><h4 id="主库的配置"><a href="#主库的配置" class="headerlink" title="主库的配置"></a>主库的配置</h4><p>1.修改配置文件 /etc/my.cnf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cnf"># mysql服务id，保证整个集群环境中唯一，取值范围：1-2^32-1,默认为1<br>server-id=1<br># 是否只读，1代表只读，0代表读写<br>read-only=0<br># 忽略的数据，指不需要同步的数据库，非必写<br># binlog-ignore-db=db01<br># 指定同步的数据库，非必写<br># binlog-do-db=db02<br><br></code></pre></td></tr></table></figure><p>2.重启mysql服务器</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">systemctl restart mysqld<br></code></pre></td></tr></table></figure><p>3.登录msyql，创建远程连接的账号，并授予主从复制权限</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 创建用户，设置密码，该用户可以在任意主机连接mysql<br>create user &#x27;cdr&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;<span class="hljs-number">123456</span>&#x27;;<br># 为&#x27;cdr&#x27;@&#x27;%&#x27;分配主从复制权限<br>grant replication slave on *.* to &#x27;cdr&#x27;@&#x27;%&#x27;;<br></code></pre></td></tr></table></figure><p>4.通过指令，查看二进制日志坐标</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">show master status;<br></code></pre></td></tr></table></figure><p>字段含义说明：</p><p>​    file：从哪个日志文件开始推送日志</p><p>​    position：从哪个位置开始推送日志</p><p>​    binlog_ignore_db:指定不需要同步的数据库</p><p>​    bin_do_db: 指定需要同步的数据库</p><h4 id="从库的配置"><a href="#从库的配置" class="headerlink" title="从库的配置"></a>从库的配置</h4><p>1.修改配置文件 /etc/my.cnf</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">server-id=<span class="hljs-number">2</span><br>read-only=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>2.重启mysql服务器</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">systemctl restart mysqld<br></code></pre></td></tr></table></figure><p>3.登录msyql，设置连接主库</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">change replication source to source_host=&#x27;&#x27;,source_user=&#x27;&#x27;,source_password=&#x27;&#x27;,source_log_file=&#x27;&#x27;,source_log_pos=xxx;<br></code></pre></td></tr></table></figure><p>上面是8.0.23的语法。如果msyql是8.0.23之前的版本，执行下面的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">change master <span class="hljs-keyword">to</span> master_host<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span>,master_user<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span>,master_password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span>,master_log_file<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span>,master_log_pos<span class="hljs-operator">=</span>xxx;<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数名</th><th>含义</th><th>8.0.23之前</th></tr></thead><tbody><tr><td>source_host</td><td>主库ip地址</td><td>master_host</td></tr><tr><td>source_user</td><td>连接主库的用户名</td><td>master_user</td></tr><tr><td>source_password</td><td>连接主库的密码</td><td>master_password</td></tr><tr><td>source_log_file</td><td>binlog日志文件名</td><td>master_log_file</td></tr><tr><td>source_log_pos</td><td>binlog日志文件位置</td><td>master_log_pos</td></tr></tbody></table><p>4.开启同步操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">start</span> replica;  # <span class="hljs-number">8.0</span><span class="hljs-number">.23</span>以及之后<br><span class="hljs-keyword">start</span> slave; # <span class="hljs-number">8.0</span><span class="hljs-number">.23</span>之前<br></code></pre></td></tr></table></figure><p>5.查看主从同步状态</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> replica status;   # <span class="hljs-number">8.0</span><span class="hljs-number">.23</span>以及之后<br><span class="hljs-keyword">show</span> slave status;     # <span class="hljs-number">8.0</span><span class="hljs-number">.23</span>之前<br><br><br># 把每一列数据转换成每一行  \G<br><span class="hljs-keyword">show</span> replica status \G;<br><br></code></pre></td></tr></table></figure><p>Replica_IO_Running和Replica_SQL_Running 的值为yes，说明主从配置成功。</p><h2 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h2><ul><li>垂直分库、垂直分表：垂直拆结构</li><li>水平分库、水平分表：水平拆数据</li></ul><h3 id="实现技术"><a href="#实现技术" class="headerlink" title="实现技术"></a>实现技术</h3><ul><li>shardingJDBC： 基于aop原理，在应用程序中对本地执行的sql进行拦截，解析、改写、路由处理。需要自行编码配置实现，只支持java语言，性能较高。</li><li>MyCat：数据库分库分表中间件，不用调整代码即可实现分库分表，支持多种语言，性能不及前者。</li></ul><h3 id="MyCat"><a href="#MyCat" class="headerlink" title="MyCat"></a>MyCat</h3><p>可以把MyCat看成MySQL</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>1.下载</p><p>下载地址：<a href="http://dl.mycat.org.cn/">http://dl.mycat.org.cn/</a></p><p>还需要安装jdk，mysql</p><table><thead><tr><th>服务器</th><th>安装软件</th><th>说明</th></tr></thead><tbody><tr><td>192.168.0.100</td><td>jdk,mycat</td><td>MyCat中间件服务器</td></tr><tr><td>192.168.0.101</td><td>MySQL</td><td>分片服务器</td></tr><tr><td>192.168.0.102</td><td>MySQL</td><td>分片服务器</td></tr><tr><td>192.168.0.103</td><td>MySQL</td><td>分片服务器</td></tr></tbody></table><p>2.MyCat安装包上传到服务器</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 解压<br>tar -zxvf MyCat-server-<span class="hljs-number">1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">7</span>-release-<span class="hljs-number">20210913163959</span>-linux.tag.gz -C /usr/local/<br><span class="hljs-built_in">cd</span> /usr/local/mycat<br></code></pre></td></tr></table></figure><p>文件介绍:</p><p>​    bin：存放可执行文件，用于启动停止mycat</p><p>​    conf：存放mycat的配置文件</p><p>​    lib：存放mycat的项目依赖包（jar)</p><p>​    logs：存放mycat的日志文件</p><p>删掉lib下的mysql-connector-java-5.0.1.jar，上传mysql-connector-java-8.0.22.jar</p><p>授权，chmod 777 mysql-connector-java-8.0.22.jar</p><h4 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h4><p>对tb_order表进行数据分片，分为三个数据节点，每一个节点位于不同服务器（水平拆分）</p><p>要关闭3台MySQL服务器的防火墙，或者开放3306端口</p><p>创建数据库db01</p><p>分片配置（schema.xml）</p><p>rule=”auto-sharding-long”      分片规则</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mycat:schema</span> <span class="hljs-attr">xmlns:mycat</span>=<span class="hljs-string">&quot;http://io.mycat&quot;</span></span><br><span class="hljs-tag">             &lt;<span class="hljs-attr">schema</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;db01&quot;</span> <span class="hljs-attr">checkSQLschema</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">sqlMaxLimit</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tb_order&quot;</span> <span class="hljs-attr">dataNode</span>=<span class="hljs-string">&quot;dn1,dn2,dn3&quot;</span> <span class="hljs-attr">rule</span>=<span class="hljs-string">&quot;auto-sharding-long&quot;</span> /&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">schema</span>&gt;</span><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">dataNode</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dn1&quot;</span> <span class="hljs-attr">dataHost</span>=<span class="hljs-string">&quot;dhost1&quot;</span> <span class="hljs-attr">database</span>=<span class="hljs-string">&quot;db01&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">dataNode</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dn2&quot;</span> <span class="hljs-attr">dataHost</span>=<span class="hljs-string">&quot;dhost2&quot;</span> <span class="hljs-attr">database</span>=<span class="hljs-string">&quot;db01&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dataNode</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dn3&quot;</span> <span class="hljs-attr">dataHost</span>=<span class="hljs-string">&quot;dhost3&quot;</span> <span class="hljs-attr">database</span>=<span class="hljs-string">&quot;db01&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">dataHost</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dhost1&quot;</span> <span class="hljs-attr">maxCon</span>=<span class="hljs-string">&quot;1000&quot;</span> <span class="hljs-attr">minCon</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">balance</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">writeType</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">dbType</span>=<span class="hljs-string">&quot;mysql&quot;</span> <span class="hljs-attr">dbDriver</span>=<span class="hljs-string">&quot;jdbc&quot;</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">heartbeat</span>&gt;</span>select user()<span class="hljs-tag">&lt;/<span class="hljs-name">heartbeat</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">writeHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;master&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;jdbc:mysql://192.168.0.101:3306?useSSL=false<span class="hljs-symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;root&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123456&quot;</span>&gt;</span><br>                 <span class="hljs-tag">&lt;/<span class="hljs-name">writeHost</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataHost</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dataHost</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dhost2&quot;</span> <span class="hljs-attr">maxCon</span>=<span class="hljs-string">&quot;1000&quot;</span> <span class="hljs-attr">minCon</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">balance</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">writeType</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">dbType</span>=<span class="hljs-string">&quot;mysql&quot;</span> <span class="hljs-attr">dbDriver</span>=<span class="hljs-string">&quot;jdbc&quot;</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">heartbeat</span>&gt;</span>select user()<span class="hljs-tag">&lt;/<span class="hljs-name">heartbeat</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">writeHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;master&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;jdbc:mysql://192.168.0.102:3306?useSSL=false<span class="hljs-symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;root&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123456&quot;</span>&gt;</span><br>                 <span class="hljs-tag">&lt;/<span class="hljs-name">writeHost</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataHost</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dataHost</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dhost3&quot;</span> <span class="hljs-attr">maxCon</span>=<span class="hljs-string">&quot;1000&quot;</span> <span class="hljs-attr">minCon</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">balance</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">writeType</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">dbType</span>=<span class="hljs-string">&quot;mysql&quot;</span> <span class="hljs-attr">dbDriver</span>=<span class="hljs-string">&quot;jdbc&quot;</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">heartbeat</span>&gt;</span>select user()<span class="hljs-tag">&lt;/<span class="hljs-name">heartbeat</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">writeHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;master&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;jdbc:mysql://192.168.0.103:3306?useSSL=false<span class="hljs-symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;root&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123456&quot;</span>&gt;</span><br>                 <span class="hljs-tag">&lt;/<span class="hljs-name">writeHost</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataHost</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mycat:schema</span>&gt;</span><br></code></pre></td></tr></table></figure><p>server.xml</p><p>配置MyCat的用户以及用户的权限信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;root&quot;</span> <span class="hljs-attr">defaultAccount</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;schemas&quot;</span>&gt;</span>db01<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 表级 DML 权限设置 --&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    &lt;privileges check=&quot;false&quot;&gt;</span><br><span class="hljs-comment">        &lt;schema name=&quot;testdb&quot; dml=&quot;0110&quot;&gt;</span><br><span class="hljs-comment">        &lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt;</span><br><span class="hljs-comment">            &lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt;</span><br><span class="hljs-comment">        &lt;/schema&gt;</span><br><span class="hljs-comment">    &lt;/privileges&gt;</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;schemas&quot;</span>&gt;</span>db01<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;readOnly&quot;</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>启动服务</p><p>切换到MyCat的安装目录，执行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 启动<br>bin/mycat <span class="hljs-built_in">start</span><br># 停止<br>bin/mycat stop<br><br></code></pre></td></tr></table></figure><p>启动后占用端口8066</p><p>登录MyCat</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mysql -h <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.<span class="hljs-number">100</span> -P <span class="hljs-number">8066</span> -uroot -p123456<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql中对json类型字段的处理</title>
    <link href="/article/mysql-json/"/>
    <url>/article/mysql-json/</url>
    
    <content type="html"><![CDATA[<h2 id="mysql中使用json格式"><a href="#mysql中使用json格式" class="headerlink" title="mysql中使用json格式"></a>mysql中使用json格式</h2><h3 id="json格式替换固定字符"><a href="#json格式替换固定字符" class="headerlink" title="json格式替换固定字符"></a>json格式替换固定字符</h3><p>表名：sys_operator</p><p>字段：PHOTO</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;PERSONTYPE&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>&#x27;<span class="hljs-number">123</span>&#x27;<span class="hljs-punctuation">,</span>&#x27;<span class="hljs-number">4444</span>&#x27;<span class="hljs-punctuation">,</span>&#x27;<span class="hljs-number">1111</span>&#x27;<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;DEPARTMENT&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>&#x27;<span class="hljs-number">123</span>&#x27;<span class="hljs-punctuation">,</span>&#x27;<span class="hljs-number">4444</span>&#x27;<span class="hljs-punctuation">,</span>&#x27;<span class="hljs-number">123111</span>&#x27;<span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 返回PERSONTYPE中<span class="hljs-string">&#x27;4444&#x27;</span>的数组下标，返回值为：&quot;$[1]&quot;<br><span class="hljs-keyword">select</span> JSON_SEARCH(PHOTO <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;$.PERSONTYPE&#x27;</span>,<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;4444&#x27;</span> ) <span class="hljs-keyword">as</span> cdrnb <br><span class="hljs-keyword">from</span> sys_operator <br><span class="hljs-keyword">where</span> JSON_SEARCH(PHOTO <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;$.PERSONTYPE&#x27;</span>,<span class="hljs-string">&#x27;all&#x27;</span>,<span class="hljs-string">&#x27;4444&#x27;</span> ) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br><br><br># 更新 PEROSNTYPE中下标为<span class="hljs-number">1</span>的数据为<span class="hljs-string">&#x27;cdrnb&#x27;</span><br><span class="hljs-keyword">update</span> sys_operator <br><span class="hljs-keyword">set</span> PHOTO <span class="hljs-operator">=</span> JSON_REPLACE(PHOTO,<span class="hljs-string">&#x27;$.PERSONTYPE[1]&#x27;</span>,<span class="hljs-string">&#x27;cdrnb&#x27;</span>) <br><span class="hljs-keyword">where</span> LOGIN_ID <span class="hljs-operator">=</span><span class="hljs-string">&#x27;20140150&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>自定义MyBatis插件</title>
    <link href="/article/mybatis-plugins/"/>
    <url>/article/mybatis-plugins/</url>
    
    <content type="html"><![CDATA[<h1 id="自定义MyBatis插件"><a href="#自定义MyBatis插件" class="headerlink" title="自定义MyBatis插件"></a>自定义MyBatis插件</h1><h2 id="1-实现Interceptor接口"><a href="#1-实现Interceptor接口" class="headerlink" title="1.实现Interceptor接口"></a>1.实现Interceptor接口</h2><h3 id="1-1-可以拦截的四个类型"><a href="#1-1-可以拦截的四个类型" class="headerlink" title="1.1 可以拦截的四个类型"></a>1.1 可以拦截的四个类型</h3><ul><li>Executor: 拦截执行器的方法</li><li>ParameterHandler: 拦截参数的处理</li><li>ResultHandler: 拦截结果处理集的处理</li><li>StatementHandler:拦截sql语法构建的处理</li></ul><h3 id="1-2-规则"><a href="#1-2-规则" class="headerlink" title="1.2 规则"></a>1.2 规则</h3><h4 id="1-2-1-Intercepts"><a href="#1-2-1-Intercepts" class="headerlink" title="1.2.1 Intercepts"></a>1.2.1 Intercepts</h4><p>Intercepts注解需要一个Signature参数数组。通过Signature来指定拦截哪个对象里面的哪个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Intercepts &#123;<br>    Signature[] value();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-2-2-Signature"><a href="#1-2-2-Signature" class="headerlink" title="1.2.2 Signature"></a>1.2.2 Signature</h4><p>Signature来指定需要拦截哪个对象的哪个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Signature &#123;<br>    <span class="hljs-comment">// 拦截的四个类</span><br>    class&lt;?&gt; type();<br>    <span class="hljs-comment">// 拦截的类的方法</span><br>    String <span class="hljs-title function_">method</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">// 拦截的类的方法的参数，方法有重载，注意参数类型和顺序</span><br>    Class&lt;?&gt; args();<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="1-2-3-注解的使用"><a href="#1-2-3-注解的使用" class="headerlink" title="1.2.3 注解的使用"></a>1.2.3 注解的使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Intercepts(&#123;</span><br><span class="hljs-meta">        @Signature(type = Executor.class, method = &quot;query&quot;,</span><br><span class="hljs-meta">                args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class, CacheKey.class, BoundSql.class&#125;),</span><br><span class="hljs-meta">        @Signature(type = Executor.class, method = &quot;query&quot;,</span><br><span class="hljs-meta">                args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;),</span><br><span class="hljs-meta">        @Signature(type = Executor.class, method = &quot;update&quot;, args = &#123;MappedStatement.class, Object.class&#125;),</span><br><span class="hljs-meta">&#125;)</span><br></code></pre></td></tr></table></figure><h4 id="1-2-4-实现Interceptor"><a href="#1-2-4-实现Interceptor" class="headerlink" title="1.2.4 实现Interceptor"></a>1.2.4 实现Interceptor</h4><p>实现<code>org.apache.ibatis.plugin.Interceptor</code>，再重新下面的三个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Interceptor</span> &#123;<br>    Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Invocation invocation)</span> <span class="hljs-keyword">throws</span> Throwable;<br><br>    <span class="hljs-keyword">default</span> Object <span class="hljs-title function_">plugin</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-keyword">return</span> Plugin.wrap(target, <span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties properties)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-实战"><a href="#1-3-实战" class="headerlink" title="1.3 实战"></a>1.3 实战</h3><h4 id="1-3-1-自定义超时sql写入日志插件"><a href="#1-3-1-自定义超时sql写入日志插件" class="headerlink" title="1.3.1 自定义超时sql写入日志插件"></a>1.3.1 自定义超时sql写入日志插件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> com.cdr.java.plugins;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.ibatis.cache.CacheKey;<br><span class="hljs-keyword">import</span> org.apache.ibatis.executor.Executor;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.mapping.BoundSql;<br><span class="hljs-keyword">import</span> org.apache.ibatis.mapping.MappedStatement;<br><span class="hljs-keyword">import</span> org.apache.ibatis.mapping.ParameterMapping;<br><span class="hljs-keyword">import</span> org.apache.ibatis.plugin.Interceptor;<br><span class="hljs-keyword">import</span> org.apache.ibatis.plugin.Intercepts;<br><span class="hljs-keyword">import</span> org.apache.ibatis.plugin.Invocation;<br><span class="hljs-keyword">import</span> org.apache.ibatis.plugin.Signature;<br><span class="hljs-keyword">import</span> org.apache.ibatis.reflection.MetaObject;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.Configuration;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.ResultHandler;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.RowBounds;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.TypeHandlerRegistry;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">import</span> java.text.DateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Locale;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> MybatisTestPlugins</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 自定义mybatis插件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> caodengrui</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/8/16 14:23</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Email</span> 592184316@qq.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> **/</span><br><br><span class="hljs-meta">@Intercepts(&#123;</span><br><span class="hljs-meta">        @Signature(type = Executor.class, method = &quot;query&quot;,</span><br><span class="hljs-meta">                args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class, CacheKey.class, BoundSql.class&#125;),</span><br><span class="hljs-meta">        @Signature(type = Executor.class, method = &quot;query&quot;,</span><br><span class="hljs-meta">                args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;),</span><br><span class="hljs-meta">        @Signature(type = Executor.class, method = &quot;update&quot;, args = &#123;MappedStatement.class, Object.class&#125;),</span><br><span class="hljs-meta">&#125;)</span><br><br><span class="hljs-comment">/*@Intercepts(&#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        @Signature(type = StatementHandler.class, method = &quot;prepare&quot;,args = &#123;Connection.class,Integer.class&#125;)</span><br><span class="hljs-comment">&#125;)*/</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisTestPlugins</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Interceptor</span> &#123;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Invocation invocation)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br><br>        <span class="hljs-comment">// 方法执行前拦截 do something...</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> invocation.getTarget(); <span class="hljs-comment">// 被代理对象</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> invocation.getMethod(); <span class="hljs-comment">// 代理方法</span><br>        Object[] args = invocation.getArgs(); <span class="hljs-comment">// 方法参数</span><br><br><br>        <span class="hljs-comment">// 获取执行方法的MappedStatement参数</span><br>        <span class="hljs-type">MappedStatement</span> <span class="hljs-variable">mappedStatement</span> <span class="hljs-operator">=</span> (MappedStatement) invocation.getArgs()[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">parameter</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (invocation.getArgs().length &gt; <span class="hljs-number">1</span>) &#123;<br>            parameter = invocation.getArgs()[<span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sqlId</span> <span class="hljs-operator">=</span> mappedStatement.getId();<br>        <span class="hljs-type">BoundSql</span> <span class="hljs-variable">boundSql</span> <span class="hljs-operator">=</span> mappedStatement.getBoundSql(parameter);<br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> mappedStatement.getConfiguration();<br>        <span class="hljs-comment">// 替换过参数后的sql</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fullSql</span> <span class="hljs-operator">=</span> getFullSql(configuration, boundSql);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>            result = invocation.proceed();  <span class="hljs-comment">// 执行</span><br>            <br>            <span class="hljs-comment">// 方法执行后拦截 do something...</span><br>            <span class="hljs-type">Long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>            <span class="hljs-comment">// sql执行时间</span><br>            <span class="hljs-type">Long</span> <span class="hljs-variable">executeTime</span> <span class="hljs-operator">=</span> endTime - startTime;<br>            <span class="hljs-comment">// 超过5s</span><br>            <span class="hljs-keyword">if</span> (executeTime &gt; <span class="hljs-number">5</span>*<span class="hljs-number">1000</span>) &#123;<br>                log.info(<span class="hljs-string">&quot;SQL执行时间过长&quot;</span>);<br>                log.info(<span class="hljs-string">&quot;SQL语句:&#123;&#125;&quot;</span>,fullSql);<br>                log.info(<span class="hljs-string">&quot;SQL执行时间:&#123;&#125;ms&quot;</span>,executeTime);<br>                <span class="hljs-comment">// 在这里可以发邮件通知一下</span><br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;SQL异常：&quot;</span>+e);<br>            log.info(<span class="hljs-string">&quot;SQL语句：&#123;&#125;&quot;</span>,fullSql);<br>            <span class="hljs-comment">// 在这里可以发邮件通知一下</span><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  决定要返回对象是目标对象还是对应的代理对象</span><br><span class="hljs-comment">     *  一般两种情况：</span><br><span class="hljs-comment">     *  1. return target: 直接返回目标对象，当前Interceptor没起作用，不会调用上面的intercept()方法</span><br><span class="hljs-comment">     *  2. return Plugin.wrap(target,this): 返回代理对象，会调用上面的intercept()方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">plugin</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-keyword">return</span> Interceptor.<span class="hljs-built_in">super</span>.plugin(target);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties properties)</span> &#123;<br><br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转义正则特殊字符 （$()*+.[]?\^&#123;&#125;</span><br><span class="hljs-comment">     * \\需要第一个替换，否则replace方法替换时会有逻辑bug</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">makeQueryStringAllRegExp</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-keyword">if</span> (str != <span class="hljs-literal">null</span> &amp;&amp; !<span class="hljs-string">&quot;&quot;</span>.equals(str)) &#123;<br>            <span class="hljs-keyword">return</span> str.replace(<span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-string">&quot;\\\\&quot;</span>)<br>                    .replace(<span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;\\*&quot;</span>)<br>                    .replace(<span class="hljs-string">&quot;+&quot;</span>, <span class="hljs-string">&quot;\\+&quot;</span>)<br>                    .replace(<span class="hljs-string">&quot;|&quot;</span>, <span class="hljs-string">&quot;\\|&quot;</span>)<br>                    .replace(<span class="hljs-string">&quot;&#123;&quot;</span>, <span class="hljs-string">&quot;\\&#123;&quot;</span>)<br>                    .replace(<span class="hljs-string">&quot;&#125;&quot;</span>, <span class="hljs-string">&quot;\\&#125;&quot;</span>)<br>                    .replace(<span class="hljs-string">&quot;(&quot;</span>, <span class="hljs-string">&quot;\\(&quot;</span>)<br>                    .replace(<span class="hljs-string">&quot;)&quot;</span>, <span class="hljs-string">&quot;\\)&quot;</span>)<br>                    .replace(<span class="hljs-string">&quot;^&quot;</span>, <span class="hljs-string">&quot;\\^&quot;</span>)<br>                    .replace(<span class="hljs-string">&quot;$&quot;</span>, <span class="hljs-string">&quot;\\$&quot;</span>)<br>                    .replace(<span class="hljs-string">&quot;[&quot;</span>, <span class="hljs-string">&quot;\\[&quot;</span>)<br>                    .replace(<span class="hljs-string">&quot;]&quot;</span>, <span class="hljs-string">&quot;\\]&quot;</span>)<br>                    .replace(<span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;\\?&quot;</span>)<br>                    .replace(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-string">&quot;\\,&quot;</span>)<br>                    .replace(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;\\.&quot;</span>)<br>                    .replace(<span class="hljs-string">&quot;&amp;&quot;</span>, <span class="hljs-string">&quot;\\&amp;&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取参数对应的string值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> obj 参数对应的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getParameterValue</span><span class="hljs-params">(Object obj)</span> &#123;<br>        String value;<br>        <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> String) &#123;<br>            value = <span class="hljs-string">&quot;&#x27;&quot;</span> + obj + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> Date) &#123;<br>            <span class="hljs-type">DateFormat</span> <span class="hljs-variable">formatter</span> <span class="hljs-operator">=</span><br>                    DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.CHINA);<br>            value = <span class="hljs-string">&quot;&#x27;&quot;</span> + formatter.format(obj) + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (obj != <span class="hljs-literal">null</span>) &#123;<br>                value = obj.toString();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                value = <span class="hljs-string">&quot;&quot;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 对特殊字符进行转义，方便之后处理替换</span><br>        <span class="hljs-keyword">return</span> value != <span class="hljs-literal">null</span> ? makeQueryStringAllRegExp(value) : <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取完整的执行SQL</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getFullSql</span><span class="hljs-params">(Configuration configuration, BoundSql boundSql)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> parseAndExtractFullSql(configuration, boundSql);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// 如果解析失败返回原始SQL</span><br>            <span class="hljs-keyword">return</span> boundSql.getSql();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 组装完整的sql语句并把把对应的参数都代入到sql语句里面</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> configuration Configuration</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> boundSql      BoundSql</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> sql完整语句</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">parseAndExtractFullSql</span><span class="hljs-params">(Configuration configuration, BoundSql boundSql)</span> &#123;<br>        <span class="hljs-comment">// 获取mapper里面方法上的参数</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">sqlParameter</span> <span class="hljs-operator">=</span> boundSql.getParameterObject();<br>        <span class="hljs-comment">// sql语句里面需要的参数</span><br>        List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();<br>        <span class="hljs-comment">// sql原始语句(?还没有替换成我们具体的参数)</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> boundSql.getSql().replaceAll(<span class="hljs-string">&quot;[\\s]+&quot;</span>, <span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-keyword">if</span> (!parameterMappings.isEmpty() &amp;&amp; sqlParameter != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// sql语句里面的?替换成真实的参数</span><br>            <span class="hljs-type">TypeHandlerRegistry</span> <span class="hljs-variable">typeHandlerRegistry</span> <span class="hljs-operator">=</span> configuration.getTypeHandlerRegistry();<br>            <span class="hljs-keyword">if</span> (typeHandlerRegistry.hasTypeHandler(sqlParameter.getClass())) &#123;<br>                sql = sql.replaceFirst(<span class="hljs-string">&quot;\\?&quot;</span>, getParameterValue(sqlParameter));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaObject</span> <span class="hljs-operator">=</span> configuration.newMetaObject(sqlParameter);<br>                <span class="hljs-keyword">for</span> (ParameterMapping parameterMapping : parameterMappings) &#123;<br>                    <span class="hljs-comment">// 按顺序把?替换成对应的值</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">propertyName</span> <span class="hljs-operator">=</span> parameterMapping.getProperty();<br>                    <span class="hljs-keyword">if</span> (metaObject.hasGetter(propertyName)) &#123;<br>                        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> metaObject.getValue(propertyName);<br>                        sql = sql.replaceFirst(<span class="hljs-string">&quot;\\?&quot;</span>, getParameterValue(obj));<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (boundSql.hasAdditionalParameter(propertyName)) &#123;<br>                        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> boundSql.getAdditionalParameter(propertyName);<br>                        sql = sql.replaceFirst(<span class="hljs-string">&quot;\\?&quot;</span>, getParameterValue(obj));<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sql;<br>    &#125;<br><br><br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>分布式文件存储Minio</title>
    <link href="/article/minio/"/>
    <url>/article/minio/</url>
    
    <content type="html"><![CDATA[<h1 id="Minio"><a href="#Minio" class="headerlink" title="Minio"></a>Minio</h1><h2 id="1-Minio应用场景"><a href="#1-Minio应用场景" class="headerlink" title="1. Minio应用场景"></a>1. Minio应用场景</h2><p>适合存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器虚拟机镜像等。</p><h3 id="1-1-Minio的基础概念"><a href="#1-1-Minio的基础概念" class="headerlink" title="1.1 Minio的基础概念"></a>1.1 Minio的基础概念</h3><ul><li>Object: 存储到Minio的基本对象，如文件、字节流</li><li>Bucket：用来存储Object的逻辑空间。每个Bucket之间的数据是相互隔离的。</li><li>Drive：存储数据的磁盘，在Minio启动时，以参数的方式传入，所有数据对象都会存储在Drive里。</li><li>Set：一组Drive的集合，分布式部署根据集群规模自动划分一个或多个Set，每个Set中的Drive分布在不同位置。一个对象存储在一个Set上。<ul><li>一个对象存储在一个Set上</li><li>一个集群划分为多个Set</li><li>一个Set包含的Drive数量是固定的，默认由系统根据集群回魔自动计算得出</li><li>一个Set中的Drive尽可能分布在不同的节点上</li></ul></li></ul><h3 id="1-2-纠删码模式"><a href="#1-2-纠删码模式" class="headerlink" title="1.2 纠删码模式"></a>1.2 纠删码模式</h3><p>假设你有一个1MB的对象，你想用minio存储它。你可以选择STANDARD存储级别，设置n=4，也就是说你要生成4个奇偶校验块。那么，minio会把这个对象拆分成4个256KB的数据块和4个256KB的奇偶校验块，一共8个块。然后，minio会把这8个块分散存储在一个Erasure Set中，这个Erasure Set包含8个磁盘，每个磁盘存储一个块。这样，你的对象就被安全地存储了。</p><p>如果有一天，其中一个磁盘发生了故障，比如说存储了第一个数据块的磁盘。那么，minio就会利用剩下的7个块，通过Reed-Solomon code算法，计算出第一个数据块的内容，并把它恢复出来。这样，你就不会丢失你的对象。即使有4个磁盘同时发生故障，minio也可以恢复出你的对象。但是如果有5个或更多的磁盘发生故障，那么minio就无法恢复出你的对象了。</p><h2 id="2-Docker创建Minio"><a href="#2-Docker创建Minio" class="headerlink" title="2. Docker创建Minio"></a>2. Docker创建Minio</h2><h3 id="2-1-拉取Minio镜像"><a href="#2-1-拉取Minio镜像" class="headerlink" title="2.1 拉取Minio镜像"></a>2.1 拉取Minio镜像</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">docker pull minio/minio<br></code></pre></td></tr></table></figure><h3 id="2-2-启动"><a href="#2-2-启动" class="headerlink" title="2.2 启动"></a>2.2 启动</h3><p>没有纠删码模式的启动</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">docker run -d -p <span class="hljs-number">9000</span>:<span class="hljs-number">9000</span> -p <span class="hljs-number">9090</span>:<span class="hljs-number">9090</span> --name minio -e &quot;MINIO_ROOT_USER=admin&quot; -e &quot;MINIO_ROOT_PASSWORD=<span class="hljs-number">12345678</span>&quot; -v /mnt/data:/data -v /mnt/config:/root/.minio minio/minio server --console-address &quot;:<span class="hljs-number">9090</span>&quot; /data<br></code></pre></td></tr></table></figure><h2 id="3-SpringBoot集成Minio"><a href="#3-SpringBoot集成Minio" class="headerlink" title="3 SpringBoot集成Minio"></a>3 SpringBoot集成Minio</h2><h3 id="3-1-maven依赖"><a href="#3-1-maven依赖" class="headerlink" title="3.1 maven依赖"></a>3.1 maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.cdr<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springboot-minio<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>springboot-minio<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>springboot-minio<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <br><br>      <br>        <span class="hljs-comment">&lt;!--minio--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.minio<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>minio<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.5.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <br>       <br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- commons-lang3 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>  <br>   <br><br><br></code></pre></td></tr></table></figure><h3 id="3-2-yaml配置minio信息"><a href="#3-2-yaml配置minio信息" class="headerlink" title="3.2 yaml配置minio信息"></a>3.2 yaml配置minio信息</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">erver:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8088</span><br><br><br><br><span class="hljs-comment"># minio</span><br><span class="hljs-attr">minio:</span><br>  <span class="hljs-attr">endpoint:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.140</span><span class="hljs-number">.129</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9000</span><br>  <span class="hljs-attr">accessKey:</span> <span class="hljs-string">admin</span><br>  <span class="hljs-attr">secretKey:</span> <span class="hljs-number">12345678</span><br>  <span class="hljs-attr">bucketname:</span> <span class="hljs-string">testcdr</span> <span class="hljs-comment"># 可以动态传</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">multipart:</span><br>      <span class="hljs-attr">max-file-size:</span> <span class="hljs-string">10240MB</span><br>      <span class="hljs-attr">max-request-size:</span> <span class="hljs-string">64MB</span><br></code></pre></td></tr></table></figure><h3 id="3-3-创建MinioConfig-java"><a href="#3-3-创建MinioConfig-java" class="headerlink" title="3.3 创建MinioConfig.java"></a>3.3 创建MinioConfig.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cdr.springbootminio.config;<br><br><br><span class="hljs-keyword">import</span> io.minio.MinioClient;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> MinioConfig</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> Minio配置类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> caodengrui</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/7/7 15:26</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Email</span> 592184316@qq.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">// 加载yml文件中以minio开头的配置项</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MinioConfig</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;minio.endpoint&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String endpoint;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;minio.accessKey&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String accessKey;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;minio.secretKey&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String secretKey;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;minio.port&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer port;<br><br><br><br>    <span class="hljs-comment">// 把MinioClient注册到ioc容器里</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MinioClient <span class="hljs-title function_">getMinioClient</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MinioClient</span> <span class="hljs-variable">minioClient</span> <span class="hljs-operator">=</span> MinioClient.builder()<br>                .endpoint(endpoint,port,<span class="hljs-literal">false</span>)<br>                .credentials(getAccessKey(),getSecretKey())<br>                .build();<br>        <span class="hljs-keyword">return</span> minioClient;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-4-创建MinioUtil-java"><a href="#3-4-创建MinioUtil-java" class="headerlink" title="3.4 创建MinioUtil.java"></a>3.4 创建MinioUtil.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cdr.springbootminio.utils;<br><br><span class="hljs-keyword">import</span> com.cdr.springbootminio.config.MinioConfig;<br><span class="hljs-keyword">import</span> io.minio.*;<br><br><span class="hljs-keyword">import</span> io.minio.errors.*;<br><span class="hljs-keyword">import</span> io.minio.http.Method;<br><span class="hljs-keyword">import</span> io.minio.messages.Bucket;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.security.InvalidKeyException;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MinioUtil</span> &#123;<br><br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> io.minio.MinioClient minioClient;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MinioConfig minioConfig;<br>   <span class="hljs-comment">/* @Value(&quot;$&#123;minio.bucketname&#125;&quot;)</span><br><span class="hljs-comment">    private String bucketName;*/</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> DEFAULT_EXPIRE_TIME= <span class="hljs-number">7</span> * <span class="hljs-number">24</span> * <span class="hljs-number">3600</span>; <span class="hljs-comment">// 一星期</span><br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bucketName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 查看bucket是否存在</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">bucketExists</span><span class="hljs-params">(String bucketName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">found</span> <span class="hljs-operator">=</span> minioClient.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build());<br>        <span class="hljs-keyword">return</span> found;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 查看所有bucket</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServerException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> InsufficientDataException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ErrorResponseException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> NoSuchAlgorithmException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> InvalidKeyException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> InvalidResponseException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> XmlParserException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> InternalException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;Bucket&gt; <span class="hljs-title function_">listBuckets</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        List&lt;Bucket&gt; buckets = minioClient.listBuckets();<br>        <span class="hljs-keyword">return</span> buckets;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新建一个bucket</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bucketName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServerException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> InsufficientDataException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ErrorResponseException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> NoSuchAlgorithmException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> InvalidKeyException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> InvalidResponseException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> XmlParserException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> InternalException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeBucket</span><span class="hljs-params">(String bucketName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        minioClient.makeBucket(<br>                MakeBucketArgs.builder()<br>                        .bucket(bucketName)<br>                        .build());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除一个空的bucket</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bucketName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServerException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> InsufficientDataException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ErrorResponseException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> NoSuchAlgorithmException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> InvalidKeyException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> InvalidResponseException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> XmlParserException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> InternalException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeBucket</span><span class="hljs-params">(String bucketName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        minioClient.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bucketName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> objectName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 获取文件外链url,7天</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getObjectURLSevenDay</span><span class="hljs-params">(String bucketName, String objectName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getObjectURL(bucketName, objectName,<span class="hljs-number">7</span>,TimeUnit.DAYS);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bucketName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> objectName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> expires 过期时间&lt;=7</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 获取文件外链url</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getObjectURL</span><span class="hljs-params">(String bucketName, String objectName, Integer expires, TimeUnit timeUnit)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> minioClient.getPresignedObjectUrl(<br>                GetPresignedObjectUrlArgs<br>                        .builder()<br>                        .method(Method.GET)<br>                        .bucket(bucketName)<br>                        .object(objectName)<br>                        .expiry(expires,timeUnit)<br>                        .build());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bucketName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> objectName 文件名称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 获取文件 二进制流</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> InputStream <span class="hljs-title function_">getObject</span><span class="hljs-params">(String bucketName, String objectName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> minioClient.getObject(GetObjectArgs.builder().bucket(bucketName).object(objectName).build());<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bucketName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> objectName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeObject</span><span class="hljs-params">(String bucketName, String objectName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        minioClient.removeObject(RemoveObjectArgs.builder().bucket(bucketName).object(objectName).build());<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">putObject</span><span class="hljs-params">(String bucketName,String objectName,InputStream inputStream)</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            minioClient.putObject(<br>                    PutObjectArgs.builder()<br>                            .bucket(bucketName)<br>                            .object(objectName)<br>                            .stream(inputStream, -<span class="hljs-number">1</span>, <span class="hljs-number">10485760</span>)<br>                            .build());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> minioConfig.getEndpoint()+<span class="hljs-string">&quot;:&quot;</span>+minioConfig.getPort()+<span class="hljs-string">&quot;/&quot;</span>+bucketName+<span class="hljs-string">&quot;/&quot;</span>+objectName;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-5-MinioTestController"><a href="#3-5-MinioTestController" class="headerlink" title="3.5 MinioTestController"></a>3.5 MinioTestController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cdr.springbootminio.controller;<br><br><span class="hljs-keyword">import</span> com.cdr.springbootminio.utils.MinioUtil;<br><span class="hljs-keyword">import</span> com.sun.deploy.net.HttpResponse;<br><span class="hljs-keyword">import</span> io.minio.messages.Bucket;<br><span class="hljs-keyword">import</span> org.apache.commons.io.IOUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> javax.servlet.ServletOutputStream;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.URLEncoder;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> MinioTest</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 测试Minio</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> caodengrui</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/7/7 15:52</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Email</span> 592184316@qq.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> **/</span><br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/minio/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MinioTestController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> MinioUtil minioUtil;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 上传文件到minio</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> file</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/uploadMinio&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">uploadMinio</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">bucketName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;testcdr&quot;</span>;<br><br>        <span class="hljs-comment">// 拿到文件名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br><br>        <span class="hljs-comment">// 用UUID+类型，解决重名问题</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileType</span> <span class="hljs-operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">newFileName</span> <span class="hljs-operator">=</span> uuid + fileType;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> minioUtil.putObject(bucketName, newFileName, file.getInputStream());<br>        System.out.println(s);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新建bucket</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/makeBucket&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeBucket</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">bucketName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test1&quot;</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> minioUtil.bucketExists(bucketName);<br>        <span class="hljs-keyword">if</span> (!b) &#123;<br>            minioUtil.makeBucket(bucketName);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除bucket</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/removeBucket&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeBucket</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">bucketName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test1&quot;</span>;<br>        minioUtil.removeBucket(bucketName);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 查看所有bucket</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/bucketList&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Bucket&gt; <span class="hljs-title function_">bucketList</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> minioUtil.listBuckets();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 7天，文件外链</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/getObjectURLSevenDay&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getObjectURLSevenDay</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">bucketName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;testcdr&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">objectName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;92eef3e3-2e22-4ffe-8837-5f0f8fb02197.jpg&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> minioUtil.getObjectURLSevenDay(bucketName,objectName);<br>        <span class="hljs-keyword">return</span> url;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 文件流</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/getObject&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getObject</span><span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">bucketName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;testcdr&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">objectName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;92eef3e3-2e22-4ffe-8837-5f0f8fb02197.jpg&quot;</span>;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> minioUtil.getObject(bucketName, objectName);<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>        response.setContentType(<span class="hljs-string">&quot;application/octet-stream&quot;</span>);<br>        response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<span class="hljs-string">&quot;attachment;filename=&quot;</span>+ URLEncoder.encode(objectName,<span class="hljs-string">&quot;utf-8&quot;</span>));<br>        response.setHeader(<span class="hljs-string">&quot;Access-Control-Expose-Headers&quot;</span>,<span class="hljs-string">&quot;Content-Disposition&quot;</span>);<br>        IOUtils.copy(object,outputStream);<br>        <span class="hljs-comment">//刷新输出流</span><br>        outputStream.flush();<br>        <span class="hljs-comment">//关闭输出流</span><br>        outputStream.close();<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/removeObject&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">bucketName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;testcdr&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">objectName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;b539bf7a-a8fd-48ae-bb35-b48595e9bdfb.zip&quot;</span>;<br>        minioUtil.removeObject(bucketName,objectName);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-6-图片上传到minio，实现预览"><a href="#3-6-图片上传到minio，实现预览" class="headerlink" title="3.6 图片上传到minio，实现预览"></a>3.6 图片上传到minio，实现预览</h4><p>新建一个枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ViewContentTypeEnum</span> &#123;<br>    DEFAULT(<span class="hljs-string">&quot;default&quot;</span>,<span class="hljs-string">&quot;application/octet-stream&quot;</span>),<br>    PNG(<span class="hljs-string">&quot;png&quot;</span>, <span class="hljs-string">&quot;image/png&quot;</span>),<br>    JPEG(<span class="hljs-string">&quot;jpeg&quot;</span>, <span class="hljs-string">&quot;image/jpeg&quot;</span>),<br>    JPG(<span class="hljs-string">&quot;jpg&quot;</span>, <span class="hljs-string">&quot;image/jpeg&quot;</span>),<br>    GIF(<span class="hljs-string">&quot;gif&quot;</span>, <span class="hljs-string">&quot;image/gif&quot;</span>),<br>    WBMP(<span class="hljs-string">&quot;wbmp&quot;</span>, <span class="hljs-string">&quot;image/vnd.wap.wbmp&quot;</span>),<br>    TIFF(<span class="hljs-string">&quot;tiff&quot;</span>, <span class="hljs-string">&quot;image/tiff&quot;</span>),<br>    JFIF(<span class="hljs-string">&quot;jfif&quot;</span>, <span class="hljs-string">&quot;image/jpeg&quot;</span>),<br>    TIF(<span class="hljs-string">&quot;tif&quot;</span>, <span class="hljs-string">&quot;image/tiff&quot;</span>),<br>    FAX(<span class="hljs-string">&quot;fax&quot;</span>, <span class="hljs-string">&quot;image/fax&quot;</span>),<br>    JPE(<span class="hljs-string">&quot;jpe&quot;</span>, <span class="hljs-string">&quot;image/jpeg&quot;</span>),<br>    NET(<span class="hljs-string">&quot;net&quot;</span>, <span class="hljs-string">&quot;image/pnetvue&quot;</span>),<br>    RP(<span class="hljs-string">&quot;rp&quot;</span>, <span class="hljs-string">&quot;image/vnd.rn-realpix&quot;</span>),<br>    ICO(<span class="hljs-string">&quot;ico&quot;</span>, <span class="hljs-string">&quot;image/x-icon&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> String prefix;<br><br>    <span class="hljs-keyword">private</span> String type;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, ViewContentTypeEnum&gt; ENUM_MAP = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        ViewContentTypeEnum[] values = values();<br>        <span class="hljs-keyword">for</span> (ViewContentTypeEnum value : values) &#123;<br>            ENUM_MAP.put(value.getPrefix(), value);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getTypeByPrefix</span><span class="hljs-params">(String prefix)</span> &#123;<br>        <span class="hljs-type">ViewContentTypeEnum</span> <span class="hljs-variable">viewContentTypeEnum</span> <span class="hljs-operator">=</span> ENUM_MAP.get(prefix);<br>        <span class="hljs-keyword">if</span> (viewContentTypeEnum == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> prefix;<br>        &#125;<br>        <span class="hljs-keyword">return</span> viewContentTypeEnum.getType();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getContentType</span><span class="hljs-params">(String prefix)</span>&#123;<br>        <span class="hljs-keyword">if</span>(prefix == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(prefix))&#123;<br>            <span class="hljs-keyword">return</span> DEFAULT.getType();<br>        &#125;<br>        prefix = prefix.substring(prefix.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>) + <span class="hljs-number">1</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> getTypeByPrefix(prefix);<br>        <span class="hljs-keyword">if</span> (type != <span class="hljs-literal">null</span> &amp;&amp; !<span class="hljs-string">&quot;&quot;</span>.equals(type)) &#123;<br>            <span class="hljs-keyword">return</span> type;<br>        &#125;<br>        <span class="hljs-keyword">return</span> DEFAULT.getType();<br>    &#125;<br><br>    ViewContentTypeEnum(String prefix, String type) &#123;<br>        <span class="hljs-built_in">this</span>.prefix = prefix;<br>        <span class="hljs-built_in">this</span>.type = type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPrefix</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> prefix;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> type;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改MinioUtil.java的putObject方法</p><p>增加contentType（）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">putObject</span><span class="hljs-params">(String bucketName,String objectName,InputStream inputStream)</span> &#123;<br><br>       <span class="hljs-keyword">try</span> &#123;<br>           minioClient.putObject(<br>                   PutObjectArgs.builder()<br>                           .bucket(bucketName)<br>                           .object(objectName)<br>                           .contentType(ViewContentTypeEnum.getContentType(objectName))<br>                           .stream(inputStream, -<span class="hljs-number">1</span>, <span class="hljs-number">10485760</span>)<br>                           .build());<br>       &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>           e.printStackTrace();<br>       &#125;<br>       <span class="hljs-keyword">return</span> minioConfig.getEndpoint()+<span class="hljs-string">&quot;:&quot;</span>+minioConfig.getPort()+<span class="hljs-string">&quot;/&quot;</span>+bucketName+<span class="hljs-string">&quot;/&quot;</span>+objectName;<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot发送邮箱</title>
    <link href="/article/mail/"/>
    <url>/article/mail/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot发送邮箱"><a href="#SpringBoot发送邮箱" class="headerlink" title="SpringBoot发送邮箱"></a>SpringBoot发送邮箱</h1><h2 id="QQ邮箱开启POP3-SMTP服务"><a href="#QQ邮箱开启POP3-SMTP服务" class="headerlink" title="QQ邮箱开启POP3/SMTP服务"></a>QQ邮箱开启POP3/<a href="https://so.csdn.net/so/search?q=SMTP&spm=1001.2101.3001.7020">SMTP</a>服务</h2><ul><li>进入QQ邮箱，点击设置</li><li>选中账号</li><li>找打POP3/SMTP服务，开启</li><li>保存好授权码</li></ul><h2 id="添加依赖和配置"><a href="#添加依赖和配置" class="headerlink" title="添加依赖和配置"></a>添加依赖和配置</h2><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mail:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">smtp.qq.com</span>     <span class="hljs-comment"># 默认平台服务地址无需更改</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">**********@qq.com</span>   <span class="hljs-comment"># 自己邮箱号</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">mskctkdiaevodcee</span>   <span class="hljs-comment"># 授权码 </span><br>    <span class="hljs-attr">default-encoding:</span> <span class="hljs-string">utf-8</span> <span class="hljs-comment"># 改编码格式</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">smtp</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">25</span> <span class="hljs-comment"># 端口号</span><br>    <span class="hljs-attr">properties:</span><br>      <span class="hljs-attr">mail.smtp.socketFactory.class:</span> <span class="hljs-string">javax.net.ssl.SSLSocketFactory</span><br><br></code></pre></td></tr></table></figure><h2 id="核心业务代码"><a href="#核心业务代码" class="headerlink" title="核心业务代码"></a>核心业务代码</h2><h3 id="MailServiceImpl"><a href="#MailServiceImpl" class="headerlink" title="MailServiceImpl"></a>MailServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 邮箱实现类</span><br><span class="hljs-comment">* @author cdr</span><br><span class="hljs-comment">* */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MailServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MailService</span> &#123;<br>    <span class="hljs-comment">// SpringBoot专门发送邮件接口</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> JavaMailSender mailSender;<br><br>    <span class="hljs-keyword">private</span> String from;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MailServiceImpl</span><span class="hljs-params">(JavaMailSender mailSender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.mailSender = mailSender;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">sendMail</span><span class="hljs-params">(String receiver, String subject, String text)</span> &#123;<br>        <span class="hljs-type">SimpleMailMessage</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleMailMessage</span>();<br>        <span class="hljs-comment">// 发送邮件的邮箱</span><br>        msg.setFrom(<span class="hljs-string">&quot;xxxxxx@qq.com&quot;</span>);<br>        <span class="hljs-comment">// 接收人邮箱</span><br>        msg.setTo(receiver);<br>        <span class="hljs-comment">// 邮箱标题</span><br>        msg.setSubject(subject);<br>        <span class="hljs-comment">// 邮箱文本内容</span><br>        msg.setText(text);<br>        <span class="hljs-keyword">try</span> &#123;<br>            mailSender.send(msg);<br>        &#125; <span class="hljs-keyword">catch</span> (MailException me) &#123;<br>            System.err.println(me.getMessage());<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux安装mysql和jdk</title>
    <link href="/article/linux-mysql/"/>
    <url>/article/linux-mysql/</url>
    
    <content type="html"><![CDATA[<h1 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h1><p><strong>安装</strong> <strong>JDK</strong></p><p>1、删除 CentOS 自带的 OpenJDK</p><p>2、通过 Xftp 将安装包拷贝到 CentOS 中 </p><p>3、通过命令安装 JDK</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">rpm -ivh jdk-<span class="hljs-number">8</span>u221-linux-x64.rpm<br></code></pre></td></tr></table></figure><p>4、配环境变量</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">JAVA_HOME=/usr/java/jdk1.<span class="hljs-number">8</span>.<span class="hljs-number">0</span>_221-amd64 CLASSPATH=<span class="hljs-variable">%JAVA_HOME%</span>/lib:<span class="hljs-variable">%JAVA_HOME%</span>/jre/l ibPATH=$<span class="hljs-built_in">PATH</span>:$JAVA_HOME/bin:$JAVA_HOME/jre/bi nexport <span class="hljs-built_in">PATH</span> CLASSPATH JAVA_HOME<br></code></pre></td></tr></table></figure><p>5、让配置生效</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">source /etc/profile<br></code></pre></td></tr></table></figure><p>/usr/local/mysql<br>/home/myproject/image/upload<br>/home/myproject/project<br>/home/myproject/react</p><p>//赋予用户视图权限<br>facial:数据库<br>v_record：视图<br>test123：用户名<br>grant select on facial.v_record to test123;</p><h1 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm -pa | grep mysql   # 查看是否安装mysql<br><span class="hljs-meta"># </span><span class="language-bash">卸载</span><br>find / -name mysql   # 查出配置文件<br>/var/lib/mysql   # 可能会出现的文件名<br>rm -rf /var/lib/mysql   # 删除配置文件<br></code></pre></td></tr></table></figure><p>解压</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">tar -xvf mysql-<span class="hljs-number">8</span>.<span class="hljs-number">0</span>.<span class="hljs-number">20</span>-<span class="hljs-number">1</span>.el7.x86_64.rpm- bundle.tar # 解压mysql<br><br>rpm -qa | grep mariadb # 查看系统mariadb<br>rpm -e mariadb-libs-<span class="hljs-number">5</span>.<span class="hljs-number">5</span>.<span class="hljs-number">44</span>-<span class="hljs-number">2</span>.el7.centos.x86_64 --nodeps # 删除<br></code></pre></td></tr></table></figure><p>安装mysql</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">rpm -ivh mysql-community-common-<span class="hljs-number">8</span>.<span class="hljs-number">0</span>.<span class="hljs-number">20</span>-<span class="hljs-number">1</span>.el7.x86_64.rpm --nodeps --force <br>rpm -ivh mysql-community-libs-<span class="hljs-number">8</span>.<span class="hljs-number">0</span>.<span class="hljs-number">20</span>-<span class="hljs-number">1</span>.el7.x86_64.rpm --nodeps --force <br>rpm -ivh mysql-community-client-<span class="hljs-number">8</span>.<span class="hljs-number">0</span>.<span class="hljs-number">20</span>-<span class="hljs-number">1</span>.el7.x86_64.rpm --nodeps --force <br>rpm -ivh mysql-community-server-<span class="hljs-number">8</span>.<span class="hljs-number">0</span>.<span class="hljs-number">20</span>-<span class="hljs-number">1</span>.el7.x86_64.rpm --nodeps --force<br></code></pre></td></tr></table></figure><p>初始化mysql</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mysqld --initialize<br></code></pre></td></tr></table></figure><p>授权防火墙</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">chown mysql:mysql /var/lib/mysql -R; <br>systemctl <span class="hljs-built_in">start</span> mysqld.service;<br>systemctl enable mysqld;<br></code></pre></td></tr></table></figure><p>查看数据库初始密码</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">cat /var/log/mysqld.log | grep password<br></code></pre></td></tr></table></figure><p>登录</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mysql -uroot -p<br></code></pre></td></tr></table></figure><p>修改密码</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;root&#x27;;<br></code></pre></td></tr></table></figure><p>在mysql中开启远程访问</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">create user &#x27;root&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;root&#x27;; <br>grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; with grant option; <br>flush privileges;<br></code></pre></td></tr></table></figure><p>退出mysql，开启3306端口</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">firewall-<span class="hljs-built_in">cmd</span> --zone=public --add-port=<span class="hljs-number">3306</span>/tcp --permanent <br>systemctl restart firewalld.service <br>firewall-<span class="hljs-built_in">cmd</span> --reload<br></code></pre></td></tr></table></figure><p>加8小时</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">set</span> global time_zone=&#x27;+<span class="hljs-number">8</span>:<span class="hljs-number">00</span>&#x27;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>java操作HTML库jsoup</title>
    <link href="/article/jsoup/"/>
    <url>/article/jsoup/</url>
    
    <content type="html"><![CDATA[<h1 id="JSoup"><a href="#JSoup" class="headerlink" title="JSoup"></a>JSoup</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>JSoup是一个用于处理HTML的java库，它提供了一个非常方便类似使用DOM，css和jquery的方法的API来提取和操作数据</p><p>参考网址：</p><blockquote><p><a href="https://cloud.tencent.com/developer/article/1508640">https://cloud.tencent.com/developer/article/1508640</a></p></blockquote><h2 id="主要类"><a href="#主要类" class="headerlink" title="主要类"></a>主要类</h2><ol><li>org.jsoup.Jsoup类：Jsoup类是任何jsoup程序的入口点，并将提供从各种来源加载和解析HTML文档的方法</li><li>org.jsoup.nodes.Document类：通过从Jsoup库加载HTML文档，可以使用此类执行适用于整个HTML文档的操作</li><li>org.jsoup.nodes.Element类：HTML元素是由标签名称，属性和子节点组成。 使用Element类，可以提取数据，遍历节点和操作HTML。</li></ol><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><h3 id="导入maven依赖"><a href="#导入maven依赖" class="headerlink" title="导入maven依赖"></a>导入maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.jsoup<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsoup<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.8.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="main类"><a href="#main类" class="headerlink" title="main类"></a>main类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo20230612.test;<br><br><span class="hljs-keyword">import</span> org.jsoup.Connection;<br><span class="hljs-keyword">import</span> org.jsoup.Jsoup;<br><span class="hljs-keyword">import</span> org.jsoup.nodes.Document;<br><span class="hljs-keyword">import</span> org.jsoup.nodes.Element;<br><span class="hljs-keyword">import</span> org.jsoup.select.Elements;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Writer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> GetNovel</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 小说</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> caodengrui</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/7/3 13:43</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Email</span> 592184316@qq.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetNovel</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 文件下载路径</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\novel&quot;</span>);<br>        <span class="hljs-comment">// 不存在就新建文件夹</span><br>        <span class="hljs-keyword">if</span> (!file.exists()) &#123;<br>            file.mkdir();<br>        &#125;<br>        <span class="hljs-comment">// 要爬取的网站</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://www.58kanshu.cc/book_115390/&quot;</span>;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> Jsoup.connect(url);<br>        <span class="hljs-comment">// 伪装成Google浏览器，有的网站防爬</span><br>        <span class="hljs-type">Document</span> <span class="hljs-variable">doc</span> <span class="hljs-operator">=</span> conn.header(<span class="hljs-string">&quot;User-Agent&quot;</span>,<br>                <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) &quot;</span> +<br>                        <span class="hljs-string">&quot;AppleWebkit/537.36 (KHTML, like Gecko) Chorme/89.0.4389.128 Safari/537.36&quot;</span>).get();<br>        <span class="hljs-comment">// 寻找叫zjbox的div，再去找zjlist，再去找dd，再去找a</span><br>        <span class="hljs-type">Elements</span> <span class="hljs-variable">es</span> <span class="hljs-operator">=</span> doc.select(<span class="hljs-string">&quot;div.zjbox dl.zjlist dd a &quot;</span>);<br>        <span class="hljs-keyword">for</span> (Element e : es) &#123;<br>            <span class="hljs-comment">// 拿到小说的href和小说名字</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">href</span> <span class="hljs-operator">=</span> e.attr(<span class="hljs-string">&quot;href&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">title</span> <span class="hljs-operator">=</span> e.text();<br>            save(file,href,title);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> file 存放路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> href 小说每一章的id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> title 章节名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(File file, String href, String title)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 在file目录下创建每一个章命名的txt文件</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(file,title+<span class="hljs-string">&quot;.txt&quot;</span>);<br>        <span class="hljs-comment">// 构建输出流对象，因为小说的内容是字符类型的数据</span><br>        <span class="hljs-type">Writer</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(f);<br>        <span class="hljs-comment">// 读取页面的url</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://www.58kanshu.cc/book_115390/&quot;</span>+href;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> Jsoup.connect(url);<br>        <span class="hljs-comment">// 伪装成浏览器</span><br>        <span class="hljs-type">Document</span> <span class="hljs-variable">doc</span> <span class="hljs-operator">=</span> conn.header(<span class="hljs-string">&quot;User-Agent&quot;</span>,<br>                <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) &quot;</span> +<br>                        <span class="hljs-string">&quot;AppleWebkit/537.36 (KHTML, like Gecko) Chorme/89.0.4389.128 Safari/537.36&quot;</span>).get();<br>        <span class="hljs-comment">// 获取小说正文</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> doc.getElementById(<span class="hljs-string">&quot;content&quot;</span>).html();<br>        <span class="hljs-comment">// 处理特殊数据</span><br>        content = content.replace(<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        content = content.replace(<span class="hljs-string">&quot;&amp;nbsp;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>        out.write(content);<br>        out.close();<br>        <span class="hljs-comment">// 休眠，防止网站检测为蓄意攻击</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (Math.random()*<span class="hljs-number">1000</span>+<span class="hljs-number">100</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(n);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins</title>
    <link href="/article/jenkins/"/>
    <url>/article/jenkins/</url>
    
    <content type="html"><![CDATA[<h1 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h1><h2 id="GitLab安装使用"><a href="#GitLab安装使用" class="headerlink" title="GitLab安装使用"></a>GitLab安装使用</h2><p>官方网址： <a href="https://about.gitbla.com/">https://about.gitbla.com/</a></p><p>安装所需最小配置</p><p>内存至少4G</p><p><a href="https://docs.gitlab.cn/jh/install/requirements.html">https://docs.gitlab.cn/jh/install/requirements.html</a></p><h3 id="在ssh下安装"><a href="#在ssh下安装" class="headerlink" title="在ssh下安装"></a>在ssh下安装</h3><p>官方安装文档：<a href="https://gitlab.cn/install/?version=ce">https://gitlab.cn/install/?version=ce</a></p><h4 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1 安装依赖"></a>1 安装依赖</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y curl policycoreutils-python openssh-server perl<br>systemctl enable sshd<br>systemctl start ssh<br></code></pre></td></tr></table></figure><h4 id="2-配置镜像"><a href="#2-配置镜像" class="headerlink" title="2 配置镜像"></a>2 配置镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -fsSL https://packages.gitlab.cn/repository/raw/scripts/setup.sh | /bin/bash<br></code></pre></td></tr></table></figure><h4 id="3-开始安装"><a href="#3-开始安装" class="headerlink" title="3 开始安装"></a>3 开始安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">EXTERNAL_URL=&quot;http://虚拟机ip&quot; yum install -y gitlab-jh<br></code></pre></td></tr></table></figure><p>除非在安装过程中指定了自定义密码，否则将随机生成一个密码并存储在/etc/gitlab/initial_root_password 文件中(出于安全原因，24小时后，此文件会被第一次gitlab-ctlreconfigure自动删除，因此若使用随机密码登录，建议安装成功初始登录成功之后，立即修改初始密码)。使用此密码和用户名root登录</p><h4 id="gitlab常用命令"><a href="#gitlab常用命令" class="headerlink" title="gitlab常用命令"></a>gitlab常用命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">gitlab-ctl start           # 启动所有gitlab组件<br>gitlab-ctl stop            # 停止所有gitlab组件<br>gitlab-ctl restart         # 重启所有gitlab组件<br>gitlab-ctl status          # 查看服务状态<br>gitlab-ctl reconfigure     # 自动服务<br>vi /etc/gitlab/gitlab.rb   # 修改默认的配置文件<br>gitlab-ctl tail            # 查看日志<br></code></pre></td></tr></table></figure><p>启动后，等一会初始化，直接访问会报502</p><h3 id="docker下安装"><a href="#docker下安装" class="headerlink" title="docker下安装"></a>docker下安装</h3><p><a href="https://docs.gitlab.cn/jh/install/docker/html">https://docs.gitlab.cn/jh/install/docker/html</a></p><p>安装所需最小配置</p><ul><li>内存至少4G（docker安装的gitlab占用内存更大）</li><li>系统内核至少在3.10以上 <code>uname -r</code>命令查看内核版本</li></ul><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><ol><li><p>更新yum源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum update<br></code></pre></td></tr></table></figure></li><li><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure></li><li><p>添加镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 阿里镜像<br>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br>// 或者使用国外镜像<br></code></pre></td></tr></table></figure></li><li><p>查看源中可使用版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum list docker-ce --showduplicates | sort -r<br></code></pre></td></tr></table></figure></li><li><p>安装指定版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install docker-ce-版本号<br></code></pre></td></tr></table></figure></li><li><p>配置开机启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start docker<br>systemctl enable docker<br></code></pre></td></tr></table></figure></li></ol><h4 id="docker安装gitlab"><a href="#docker安装gitlab" class="headerlink" title="docker安装gitlab"></a>docker安装gitlab</h4><p>添加容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --detach \<br> --hostname 虚拟机ip \<br> --publish 443:443 --publish 80:80 \<br> --name gitlab \<br> --restart always \<br> --volume $GITLAB_HOME/config:/etc/gitlab:z \<br> --volume $GITLAB_HOME/logs:/var/log/gitlab:z \<br> --volume $GITLAB_HOME/data:/var/opt/gitlab:z \<br> --shm-size 256m \<br> registry.gitlab.cn/omnibus/gitlab-jh:latest<br></code></pre></td></tr></table></figure><p>没启动的话，启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker start gitlab<br></code></pre></td></tr></table></figure><p>进入容器查看密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it gitlab /bin/bash<br><br>cat /etc/gitlab/initial_root_password<br></code></pre></td></tr></table></figure><h2 id="Jenkins安装"><a href="#Jenkins安装" class="headerlink" title="Jenkins安装"></a>Jenkins安装</h2><p>jenkins.io/zh/</p><p>需要512MB内存，10GB的磁盘，java环境(jdk8好像不行了，装17吧)</p><ol><li>下载jenkins的war包</li><li>放到虚拟机</li><li>运行命令<code>java -jar jenkins.war --httpPort=8089</code></li><li>打开浏览器 <code>http://ip:8089</code></li></ol><p>安装插件,选推荐的</p><p>安装git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install git<br></code></pre></td></tr></table></figure><p>安装maven</p><p>官网maven.apache.org</p><p>放到/usr/local/maven</p><p>运行/usr/local/maven/bin/mvn</p><p>Jenkins插件管理，安装maven插件</p><p>Global Tool Configuration新增maven，配置MAVEN_HOME`/usr/local/maven/</p><p>就可以构建maven项目了</p><p>构建完配置git仓库url，用http的就行</p><p>切换分支为main（gitlab主分支为main）</p><p>Build配置POM<code>demo-1/pom.xml</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>压缩图片</title>
    <link href="/article/image-compression/"/>
    <url>/article/image-compression/</url>
    
    <content type="html"><![CDATA[<h1 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.coobird<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thumbnailator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.4.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="校验图片格式"><a href="#校验图片格式" class="headerlink" title="校验图片格式"></a>校验图片格式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageUtil</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String  <span class="hljs-title function_">checkImg</span><span class="hljs-params">(String uploadContentType)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">expandedName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (uploadContentType.endsWith(<span class="hljs-string">&quot;.jpg&quot;</span>) || uploadContentType.endsWith(<span class="hljs-string">&quot;.JPG&quot;</span>)) &#123;<br>            <span class="hljs-comment">// IE6上传jpg图片的headimageContentType是image/pjpeg，而IE9以及火狐上传的jpg图片是image/jpeg</span><br>            expandedName = <span class="hljs-string">&quot;jpg&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (uploadContentType.endsWith(<span class="hljs-string">&quot;.png&quot;</span>) || uploadContentType.endsWith(<span class="hljs-string">&quot;.PNG&quot;</span>)) &#123;<br>            <span class="hljs-comment">// IE6上传的png图片的headimageContentType是&quot;image/x-png&quot;</span><br>            expandedName = <span class="hljs-string">&quot;png&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> expandedName;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="上传图片时压缩"><a href="#上传图片时压缩" class="headerlink" title="上传图片时压缩"></a>上传图片时压缩</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">uploadFile</span><span class="hljs-params">(MultipartFile file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 上传时文件名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">uuidName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>) + <span class="hljs-string">&quot;.jpg&quot;</span>;<br>        <span class="hljs-comment">// 获取上传的文件名后缀</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">prefix</span> <span class="hljs-operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>) + <span class="hljs-number">1</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileType</span> <span class="hljs-operator">=</span> prefix.toLowerCase();<br>        <span class="hljs-keyword">if</span> (!StringUtils.containsAny(prefix.toLowerCase(), <span class="hljs-string">&quot;jpg&quot;</span>, <span class="hljs-string">&quot;jpeg&quot;</span>, <span class="hljs-string">&quot;png&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;   <br> <span class="hljs-comment">// FileUtils.writeByteArrayToFile(new File(attachmentTemp, uuidName),file.getBytes());</span><br>  <span class="hljs-comment">// 图片压缩，上传到指定目录          </span><br>    Thumbnails.of(file.getInputStream()).scale(<span class="hljs-number">0.3f</span>).outputFormat(<span class="hljs-string">&quot;jpg&quot;</span>).outputQuality(<span class="hljs-number">0.5</span>).toFile(<span class="hljs-string">&quot;C:\\picture\\&quot;</span> + uuidName);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>go语言</title>
    <link href="/article/golang/"/>
    <url>/article/golang/</url>
    
    <content type="html"><![CDATA[<p>安装golang</p><p>下载地址</p><blockquote><p><a href="https://golang.google.cn/dl/">https://golang.google.cn/dl/</a></p></blockquote><p>下载zip，解压</p><p>配置环境变量</p><p>新增GOROOT，D:\go</p><p>在PATH里加上 %GOROOT%\bin</p><p>新增GOPATH  ，<code>D:\2023software\GoProject\library;D:\2023software\GoProject\workspace</code></p><p>GOROOT是压缩包解压后的地址</p><p>GOPATH，library是存放下载的包，workspace是项目存放的目录</p><p>配置国内代理</p><p>打开cmd</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">go env -w GO111MODULE=on<br>go env -w GOPROXY=https://goproxy.cn,direct<br></code></pre></td></tr></table></figure><p>go version查看版本</p><p>go env查看go的环境配置</p><p>要有一个main.go的入口程序，里面一个main方法</p><p>小写只能在同包下调用</p><p>大写的结构体以及里面大写的属性才可以在不同的包下面调用（要先导入）</p><p>go官方依赖库地址</p><blockquote><p><a href="https://pkg.go.dev/std">https://pkg.go.dev/std</a></p></blockquote><p>引入Gin</p><p>在项目里终端   <code>go get -u github.com/gin-gonic/gin</code></p><p>导入</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br></code></pre></td></tr></table></figure><p>官方示例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>  <span class="hljs-string">&quot;net/http&quot;</span><br><br>  <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  r := gin.Default()<br>  r.GET(<span class="hljs-string">&quot;/ping&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>    c.JSON(http.StatusOK, gin.H&#123;<br>      <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;pong&quot;</span>,<br>    &#125;)<br>  &#125;)<br>  r.Run() <span class="hljs-comment">// listen and serve on 0.0.0.0:8080 (for windows &quot;localhost:8080&quot;)</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><br></code></pre></td></tr></table></figure><p>引入gorm和mysql的驱动</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">go get -u gorm.io/gorm <br>go get -u gorm.io/driver/mysql <br></code></pre></td></tr></table></figure><p>引入viper</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">go get github.com/spf13/viper<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>本地代码提交到gitee</title>
    <link href="/article/git-up/"/>
    <url>/article/git-up/</url>
    
    <content type="html"><![CDATA[<h2 id="1-创建仓库"><a href="#1-创建仓库" class="headerlink" title="1.创建仓库"></a>1.创建仓库</h2><p>在gitee创建一个仓库</p><h2 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2.安装git"></a>2.安装git</h2><h2 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3.初始化"></a>3.初始化</h2><p>进入到项目根目录，执行git命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></table></figure><h2 id="4-添加所有文件到仓库"><a href="#4-添加所有文件到仓库" class="headerlink" title="4.添加所有文件到仓库"></a>4.添加所有文件到仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br></code></pre></td></tr></table></figure><h2 id="5-将add的文件commit到本地仓库"><a href="#5-将add的文件commit到本地仓库" class="headerlink" title="5.将add的文件commit到本地仓库"></a>5.将add的文件commit到本地仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit - m <span class="hljs-string">&quot;第一次提交&quot;</span><br></code></pre></td></tr></table></figure><h2 id="6-将本地仓库文件关联到gitee"><a href="#6-将本地仓库文件关联到gitee" class="headerlink" title="6.将本地仓库文件关联到gitee"></a>6.将本地仓库文件关联到gitee</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin https://gitee.com/caodengrui/smartpark.git<br></code></pre></td></tr></table></figure><h2 id="7-将gitee上的仓库pull到本地文件夹"><a href="#7-将gitee上的仓库pull到本地文件夹" class="headerlink" title="7.将gitee上的仓库pull到本地文件夹"></a>7.将gitee上的仓库pull到本地文件夹</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull --rebase origin master<br></code></pre></td></tr></table></figure><h2 id="8-上传项目到gitee仓库"><a href="#8-上传项目到gitee仓库" class="headerlink" title="8.上传项目到gitee仓库"></a>8.上传项目到gitee仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push -u origin master<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Flutter</title>
    <link href="/article/flutter/"/>
    <url>/article/flutter/</url>
    
    <content type="html"><![CDATA[<h1 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h2><h3 id="1-0-安装flutter"><a href="#1-0-安装flutter" class="headerlink" title="1.0 安装flutter"></a>1.0 安装flutter</h3><blockquote><p>flutter官网：<a href="https://flutter.cn/docs/get-started/install/windows">https://flutter.cn/docs/get-started/install/windows</a></p></blockquote><p>最好别使用高版本的flutter,本次使用flutter版本为2.10.5</p><p>配置</p><blockquote><p><a href="https://www.cnblogs.com/zxsh/archive/2018/04/16/8859048.html#h4androidstudio">https://www.cnblogs.com/zxsh/archive/2018/04/16/8859048.html#h4androidstudio</a></p></blockquote><p>flutter doctor</p><p>缺什么装什么</p><h3 id="1-1-安装Android-Studio"><a href="#1-1-安装Android-Studio" class="headerlink" title="1.1 安装Android Studio"></a>1.1 安装Android Studio</h3><p> 装android sdk</p><p>cmdline-tools component is missing解决方法</p><p>打开Android Studio，settings,Apperance,System Settings,Android SDK,SDK Tools,勾上Android SDK Command-line Tools(latest)和Android Emulator hypervisor driver和 Intel x86 Emulator Accelerator</p><p>再在cmd输入，flutter config –android-sdk “SDK路径”</p><h3 id="1-2-安装Visual-Studio"><a href="#1-2-安装Visual-Studio" class="headerlink" title="1.2 安装Visual Studio"></a>1.2 安装Visual Studio</h3><p>勾选  使用c++的桌面开发</p><h3 id="1-3-安装夜神模拟器"><a href="#1-3-安装夜神模拟器" class="headerlink" title="1.3 安装夜神模拟器"></a>1.3 安装夜神模拟器</h3><p>Android Studio使用夜神模拟器：</p><ol><li>把AndroidSDK\platform-tools下的adb.exe复制一份，重命名为nox_adb.exe</li><li>把夜神模拟器下的nox_adb.exe修改为nox_adb_old.exe</li><li>把复制的nox_adb.exe拷贝到夜神模拟器下bin路径下</li><li>重启夜神模拟器</li></ol><p>此时Android Studio即可连接夜神模拟器了</p><h2 id="2-开发"><a href="#2-开发" class="headerlink" title="2 开发"></a>2 开发</h2><p><code>Running Gradle task &#39;assembleDebug&#39;...</code></p><p>程序一直卡在这的话，参考<a href="https://www.bilibili.com/read/cv22572083">https://www.bilibili.com/read/cv22572083</a></p><h3 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h3><h3 id="2-2-使用dio"><a href="#2-2-使用dio" class="headerlink" title="2.2 使用dio"></a>2.2 使用dio</h3><p>在pubspec.yaml文件中配置dio依赖</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-attr">flutter:</span><br>    <span class="hljs-attr">sdk:</span> <span class="hljs-string">flutter</span><br><br><br>  <span class="hljs-comment"># The following adds the Cupertino Icons font to your application.</span><br>  <span class="hljs-comment"># Use with the CupertinoIcons class for iOS style icons.</span><br>  <span class="hljs-attr">cupertino_icons:</span> <span class="hljs-string">^1.0.2</span><br>  <span class="hljs-attr">dio:</span> <span class="hljs-string">^1.0.9</span><br></code></pre></td></tr></table></figure><p>出现Cannot run with sound null safety, because the following dependencies错误解决方法</p><p>main.dart右键-&gt;Modify Run Configuration-&gt;Additional run args: 加上 <code>--no-sound-null-safety</code></p><h2 id="3-打包发布"><a href="#3-打包发布" class="headerlink" title="3 打包发布"></a>3 打包发布</h2><h3 id="3-1-创建keystore"><a href="#3-1-创建keystore" class="headerlink" title="3.1 创建keystore"></a>3.1 创建keystore</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize <span class="hljs-number">2048</span> -validity <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure><p>将生成的<code>my-release-key.keystore</code>文件拷贝到项目的<code>android/app/</code>目录下</p><h3 id="3-2-创建key-properties"><a href="#3-2-创建key-properties" class="headerlink" title="3.2 创建key.properties"></a>3.2 创建key.properties</h3><p>在<code>android</code>目录下新建文件<code>key.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">storePassword</span>=<span class="hljs-string">123456</span><br><span class="hljs-attr">keyPassword</span>=<span class="hljs-string">123456</span><br><span class="hljs-attr">keyAlias</span>=<span class="hljs-string">my-key-alias</span><br><span class="hljs-attr">storeFile</span>=<span class="hljs-string">my-release-key.keystore</span><br></code></pre></td></tr></table></figure><h3 id="3-3-修改build-gradle"><a href="#3-3-修改build-gradle" class="headerlink" title="3.3 修改build.gradle"></a>3.3 修改build.gradle</h3><p>修改android/app/build.gradle</p><ul><li>在<code>android&#123;</code>上面加入三行</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">def</span> keystorePropertiesFile = rootProject.<span class="hljs-keyword">file</span>(<span class="hljs-string">&quot;key.properties&quot;</span>)<br><span class="hljs-keyword">def</span> keystoreProperties = <span class="hljs-keyword">new</span> Properties()<br>keystoreProperties.load(<span class="hljs-keyword">new</span> FileInputStream(keystorePropertiesFile))<br><br>android &#123;<br></code></pre></td></tr></table></figure><ul><li>修改<code>buildTypes&#123; release &#123; signingConfig signingConfigs.debug&#125;&#125;</code>,在上面加上下面一块代码</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gradle"> signingConfigs &#123;<br>    release &#123;<br>        keyAlias keystoreProperties[<span class="hljs-string">&#x27;keyAlias&#x27;</span>]<br>        keyPassword keystoreProperties[<span class="hljs-string">&#x27;keyPassword&#x27;</span>]<br>        storeFile <span class="hljs-keyword">file</span>(keystoreProperties[<span class="hljs-string">&#x27;storeFile&#x27;</span>])<br>        storePassword keystoreProperties[<span class="hljs-string">&#x27;storePassword&#x27;</span>]<br>    &#125;<br>    &#125;<br><br>    buildTypes &#123;<br>        release &#123;<br><span class="hljs-comment">//            signingConfig signingConfigs.debug</span><br>            signingConfig signingConfigs.release<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-修改应用名称"><a href="#3-4-修改应用名称" class="headerlink" title="3.4 修改应用名称"></a>3.4 修改应用名称</h3><ul><li><p>打开位于<code>&lt;app dir&gt;/android/app/src/main/</code> 中的<code>AndroidManifest.xml</code>文件</p></li><li><p>找到<code>application</code>节点，编辑android:lable = “应用名”，这是应用的名称</p></li></ul><h3 id="3-5-修改应用图标"><a href="#3-5-修改应用图标" class="headerlink" title="3.5 修改应用图标"></a>3.5 修改应用图标</h3><ul><li><p>使用Hbuilder 工具生成应用图标；</p></li><li><p>在<code>&lt;app dir&gt;/android/app/src/main/res</code>目录下，mipmap-*的目录下，将图标文件放入使用配置限定符命名的文件夹中。把自己生成的图标，按照规范的名称和大小覆盖Flutter的默认图标 ,每个目录下都要覆盖</p></li></ul><h3 id="3-6-申请权限"><a href="#3-6-申请权限" class="headerlink" title="3.6 申请权限"></a>3.6 申请权限</h3><p>不申请权限，打包后访问不了网络</p><p>在<code>AndroidManifest.xml</code>文件中,<code>&lt;mainfest&gt; &lt;/manifest&gt;</code>标签内加上</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-comment">&lt;!--申请权限--&gt;</span><br><span class="hljs-comment">&lt;!--访问电话状态--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_PHONE_STATE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!--允许全部网路访问--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!--获取网路信息状态--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!--获取当前wifi接入的状态以及WLAN热点的信息--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-7-打包"><a href="#3-7-打包" class="headerlink" title="3.7 打包"></a>3.7 打包</h3><p>在项目根目录执行</p><p><code>flutter build apk</code>   或者  <code>flutter build apk --no-sound-null-safety</code>  </p><p>flutter build apk –no-sound-null-safety</p><p>打包好的apk存放目录<code>&lt;app dir&gt;\build\app\outputs\apk\release</code></p><h3 id="3-8-安装"><a href="#3-8-安装" class="headerlink" title="3.8 安装"></a>3.8 安装</h3><p><code>flutter install</code> </p><h2 id="4-官方文档"><a href="#4-官方文档" class="headerlink" title="4 官方文档"></a>4 官方文档</h2><h3 id="4-1-Flutter文档地址"><a href="#4-1-Flutter文档地址" class="headerlink" title="4.1 Flutter文档地址"></a>4.1 Flutter文档地址</h3><blockquote><p><a href="https://flutter.cn/docs/development/ui/widgets-intro">https://flutter.cn/docs/development/ui/widgets-intro</a></p></blockquote><h3 id="4-2-Dart文档地址"><a href="#4-2-Dart文档地址" class="headerlink" title="4.2 Dart文档地址"></a>4.2 Dart文档地址</h3><blockquote><p><a href="https://dart.cn/codelabs/dart-cheatsheet">https://dart.cn/codelabs/dart-cheatsheet</a></p></blockquote><h3 id="4-3-官方仓库地址"><a href="#4-3-官方仓库地址" class="headerlink" title="4.3 官方仓库地址"></a>4.3 官方仓库地址</h3><blockquote><p><a href="https://pub.flutter-io.cn/">https://pub.flutter-io.cn/</a></p></blockquote><h2 id="5-实战项目"><a href="#5-实战项目" class="headerlink" title="5 实战项目"></a>5 实战项目</h2><h3 id="5-1-android平台解决冷启动白屏问题"><a href="#5-1-android平台解决冷启动白屏问题" class="headerlink" title="5.1 android平台解决冷启动白屏问题"></a>5.1 android平台解决冷启动白屏问题</h3><p>android/app/src/main/res/drawable/launch_background.xml文件中注释的代码取消注释，修改launch_image为项目图标名ic_launcher</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-comment">&lt;!-- Modify this file to customize your launch splash screen --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">layer-list</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@android:color/white&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- You can insert your own image assets here --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">item</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bitmap</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">android:src</span>=<span class="hljs-string">&quot;@mipmap/ic_launcher&quot;</span> /&gt;</span><br>         <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">layer-list</span>&gt;</span><br></code></pre></td></tr></table></figure><p>android/app/src/main/res/drawable-v21/launch_background.xml也这样改</p><h3 id="5-2-启动页面开发"><a href="#5-2-启动页面开发" class="headerlink" title="5.2 启动页面开发"></a>5.2 启动页面开发</h3><p>在lib目录下创建src目录，在src下创建文件<code>root_app_page.dart</code>文件，<code>stf</code>自动生成代码，class名为RootAPP</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_cdr/src/index_page.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RootAPP</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> RootAPP(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;RootAPP&gt; createState() =&gt; _RootAPPState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_RootAPPState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">RootAPP</span>&gt; </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">const</span> MaterialApp(<br>      <span class="hljs-comment">// 不显示debug标签</span><br>      debugShowCheckedModeBanner: <span class="hljs-keyword">false</span>,<br>      home: IndexPage(),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在src下创建文件<code>index_page.dart</code>文件，<code>stf</code>自动生成代码,class为IndexPage</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> IndexPage(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;IndexPage&gt; createState() =&gt; _IndexPageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_IndexPageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">IndexPage</span>&gt; </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <br>  &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>删掉main.dart中的代码，只留下main方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./src/root_app_page.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(<span class="hljs-keyword">const</span> RootAPP());<br>&#125;<br></code></pre></td></tr></table></figure><p>在项目根目录下创建目录assets,在下面创建目录images,放一张图片ic_launcher.png</p><p>修改pubspec.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">flutter:</span><br><br>  <span class="hljs-attr">uses-material-design:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 配置图片路径</span><br>  <span class="hljs-attr">assets:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">assets/images/</span><br></code></pre></td></tr></table></figure><p>修改index_page.dart</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> IndexPage(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;IndexPage&gt; createState() =&gt; _IndexPageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_IndexPageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">IndexPage</span>&gt; </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      body: Center(<br>        child: Image.asset(<br>          <span class="hljs-string">&quot;assets/images/ic_launcher.png&quot;</span>,<br>          width: <span class="hljs-number">66</span>,<br>          height: <span class="hljs-number">66</span>,<br>        ),<br>      ),<br>    );<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-3-动态权限申请"><a href="#5-3-动态权限申请" class="headerlink" title="5.3 动态权限申请"></a>5.3 动态权限申请</h3><p>pubspec.yaml中添加依赖</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-attr">flutter:</span><br>    <span class="hljs-attr">sdk:</span> <span class="hljs-string">flutter</span><br><br>  <span class="hljs-attr">cupertino_icons:</span> <span class="hljs-string">^1.0.2</span><br><br>  <span class="hljs-comment"># 权限请求</span><br>  <span class="hljs-attr">permission_handler:</span> <span class="hljs-string">^8.0.1+1</span><br></code></pre></td></tr></table></figure><p>AndroidManifest.xml    application上分  添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span>/&gt;</span><br> &lt;application<br></code></pre></td></tr></table></figure><h2 id="6-资源网站"><a href="#6-资源网站" class="headerlink" title="6 资源网站"></a>6 资源网站</h2><h3 id="6-1-app图标网站"><a href="#6-1-app图标网站" class="headerlink" title="6.1  app图标网站"></a>6.1  app图标网站</h3><blockquote><p><a href="https://www.appicon.co/#app-icon">https://www.appicon.co/#app-icon</a></p></blockquote><h3 id="6-2-图片素材网址"><a href="#6-2-图片素材网址" class="headerlink" title="6.2 图片素材网址"></a>6.2 图片素材网址</h3><blockquote><p><a href="https://icons8.com/illustrations">https://icons8.com/illustrations</a></p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>记录</title>
    <link href="/article/facetry/"/>
    <url>/article/facetry/</url>
    
    <content type="html"><![CDATA[<h1 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h1><p>正数：原码反码补码都是本身</p><p>负数：反码是符号位不变，其他位取反；补码是在反码的基础上+1</p><table><thead><tr><th>数字</th><th>原码</th><th>反码</th><th>补码</th></tr></thead><tbody><tr><td>1</td><td>0000 0001</td><td>0000 0001</td><td>0000 0001</td></tr><tr><td>-1</td><td>1000 0001</td><td>1111 1110</td><td>1111 1111</td></tr></tbody></table><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>线程通常有五种状态：创建，就绪，运行，阻塞，和死亡</p><p>阻塞有三种：</p><ul><li>等待阻塞：运行的线程执行wait方法，该线程会释放占用的所有资源，jvm会把该线程放入等待池。进入这个状态后是不能自动唤醒的，需要其他线程调用notify或notifyAll方法才能被唤醒。wait是Object类的方法</li><li>同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则jvm会把该线程放入锁池中</li><li>其他阻塞：运行的线程执行sleep或join方法，或者发出来I/O请求，jvm会把该线程置为阻塞状态。当sleep状态超时、join等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。sleep是Thread类的方法</li></ul><p>1、新建状态（new）：新创建了一个线程对象</p><p>2、就绪状态（runnable）：线程对象创建后，其他线程调用了该对象的start方法。该状态的线程位于可运行线程池中，变得可运行，等待后去cpu的使用权</p><p>3、运行状态（running）：就绪状态的线程获取了cpu，执行程序代码</p><p>4、阻塞状态（blocked）：阻塞状态是线程因为某种原因放弃cpu使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态</p><p>5、死亡状态：线程执行完了或者异常退出了run方法，该线程结束生命周期</p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>可重入锁：可重入就是说某个线程已经获得某个锁，可以再次获取锁而不会出现死锁。</p><p>非公平锁: JVM按随机、就近原则分配锁的机制。效率远远超出公平锁</p><p>公平锁：通常先对锁提出获取请求的线程会先被分配锁</p><h3 id="wait-、sleep-和yield-的区别"><a href="#wait-、sleep-和yield-的区别" class="headerlink" title="wait()、sleep()和yield()的区别"></a>wait()、sleep()和yield()的区别</h3><p>sleep()和yield()方法是定义在Thread类中，而wait()方法是定义在Object类中的。</p><p>wait()和sleep()的关键的区别在于，wait()是用于线程间通信的，而sleep()是用于短时间暂停当前线程，而且wait()会释放锁，sleep()和yield()不会释放锁 。</p><p>yield()与wait()和sleep()方法有一些区别，它仅仅释放线程所占有的CPU资源，从而让其他线程有机会运行，但是并不能保证某个特定的线程能够获得CPU资源，注意这里仅仅是让出CPU的执行权，但是并没有释放锁的，谁能获得CPU完全取决于调度器，在有些情况下调用yield方法的线程甚至会再次得到CPU资源。所以，依赖于yield方法是不可靠的，它只能尽力而为。</p><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>join（），在当前线程a的run()方法中调用join（）另一个线程b，则当前线程a转为阻塞状态，回到b线程结束，a再由阻塞状态转为就绪状态</p><h2 id="Thread类中的yield方法有什么作用？"><a href="#Thread类中的yield方法有什么作用？" class="headerlink" title="Thread类中的yield方法有什么作用？"></a>Thread类中的yield方法有什么作用？</h2><p>Yield方法可以暂停当前正在执行的线程对象，让其它有相同优先级的线程执行。它是一个静态方法而且只保证当前线程放弃CPU占用而不能保证使其它线程一定能占用CPU，执行yield()的线程有可能在进入到暂停状态后马上又被执行</p><h2 id="Java线程池中submit-和-execute-方法有什么区别？"><a href="#Java线程池中submit-和-execute-方法有什么区别？" class="headerlink" title="Java线程池中submit() 和 execute()方法有什么区别？"></a>Java线程池中submit() 和 execute()方法有什么区别？</h2><p>两个方法都可以向线程池提交任务，execute()方法的返回类型是void，它定义在Executor接口中,而submit()方法可以返回持有计算结果的Future对象，它定义在ExecutorService接口中，它扩展了Executor接口，其它线程池类像ThreadPoolExecutor和ScheduledThreadPoolExecutor都有这些方法。</p><h2 id="常用的七种线程池"><a href="#常用的七种线程池" class="headerlink" title="常用的七种线程池"></a>常用的七种线程池</h2><ul><li><p>newSingleThreadExecutor():单个线程的线程池，即线程池中每次只有一个线程工作保证所有任务按照指定顺序执行（<a href="https://so.csdn.net/so/search?q=FIFO&spm=1001.2101.3001.7020">FIFO</a>，LIFO，优先级），单线程串行执行任务</p></li><li><p>newFixedThreadPool()：创建一个定长的线程池，每提交一个任务就占用一个线程。直到线程池的最大数量，然后后面进入队列的就得在空出线程之前一直等待。</p></li><li><p>newCacheThreadPool():可缓存线程池（推荐使用），当线程池大小超过了处理任务所需的线程数时，那么就回收部分线程（一般是60S内未执行）。当任务需要的线程数超过了线程池中已有的线程数时，又会创建一定量的线程来满足任务使用的需求。此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。</p></li><li><p>newScheduleThreadPool():创建一个定长的线程池，支持定时和周期性任务执行。</p></li><li><p>newSingleThreadScheduledExcutor：创建一个单例线程池，定期或延时执行任务。</p></li><li><p>newWorkStealingPool:创建持有足够线程的线程池来支持给定的并行级别，并通过使用多个队列，减少竞争，它需要穿一个并行级别的参数，如果不传，则被设定为默认的CPU数量。</p></li><li><p>ForkJoinPool：支持大任务分解成小任务的线程池，这是Java8新增线程池，通常配合ForkJoinTask接口的子类RecursiveAction或RecursiveTask使用。</p></li></ul><h2 id="线程池的优点"><a href="#线程池的优点" class="headerlink" title="线程池的优点"></a>线程池的优点</h2><ul><li>降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li>提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行</li><li>提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降<br>低系统的稳定性，使用线程池可以进行统一的分配，调优和监控</li></ul><h2 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h2><p>优化机制包括自适应锁、自旋锁、锁消除、锁粗化、轻量级锁和偏向锁</p><p>锁的状态从低到高依次为无锁-&gt;偏向锁-&gt;轻量级锁-&gt;重量级锁，升级的过程就是从低到高</p><p><strong>自旋锁</strong>：由于大部分时候，锁被占用的时间很短，共享变量的锁定时间也很短，所有没有必要挂起<br>线程，用户态和内核态的来回上下文切换严重影响性能。自旋的概念就是让线程执行一个忙循环，<br>可以理解为就是啥也不干，防止从用户态转入内核态，自旋锁可以通过设置-XX:+UseSpining来开<br>启，自旋的默认次数是10次，可以使用-XX:PreBlockSpin设置。<br><strong>自适应锁</strong>：自适应锁就是自适应的自旋锁，自旋的时间不是固定时间，而是由前一次在同一个锁上<br>的自旋时间和锁的持有者状态来决定。<br><strong>锁消除</strong>：锁消除指的是JVM检测到一些同步的代码块，完全不存在数据竞争的场景，也就是不需要<br>加锁，就会进行锁消除。<br><strong>锁粗化</strong>：锁粗化指的是有很多操作都是对同一个对象进行加锁，就会把锁的同步范围扩展到整个操<br>作序列之外。<br><strong>偏向锁</strong>：当线程访问同步块获取锁时，会在对象头和栈帧中的锁记录里存储偏向锁的线程ID，之后<br>这个线程再次进入同步块时都不需要CAS来加锁和解锁了，偏向锁会永远偏向第一个获得锁的线<br>程，如果后续没有其他线程获得过这个锁，持有锁的线程就永远不需要进行同步，反之，当有其他<br>线程竞争偏向锁时，持有偏向锁的线程就会释放偏向锁。可以用过设置-XX:+UseBiasedLocking开<br>启偏向锁。<br><strong>轻量级锁</strong>：JVM的对象的对象头中包含有一些锁的标志位，代码进入同步块的时候，JVM将会使用<br>CAS方式来尝试获取锁，如果更新成功则会把对象头中的状态位标记为轻量级锁，如果更新失败，<br>当前线程就尝试自旋来获得锁。</p><h2 id="产生死锁的四个必要条件"><a href="#产生死锁的四个必要条件" class="headerlink" title="产生死锁的四个必要条件"></a>产生死锁的四个必要条件</h2><ul><li>互斥条件：一个资源每次只能被一个线程使用</li></ul><ol start="2"><li>请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放</li><li>不剥夺条件：进程已经获得的资源，在未使用完之前，不能强行剥夺</li><li>循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系</li></ol><h2 id="如何避免死锁"><a href="#如何避免死锁" class="headerlink" title="如何避免死锁"></a>如何避免死锁</h2><p>指定获取锁的顺序。比如只有获取到a锁和b锁才能对资源操作，那么就规定只有获得a锁，才可以获取b锁</p><h2 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h2><p>Callable接口类似于Runnable，从名字就可以看出来了，但是Runnable不会返回结果，并且无法抛<br>出返回结果的异常，而Callable功能更强大一些，被线程执行后，可以返回值，这个返回值可以被<br>Future拿到，也就是说，Future可以拿到异步执行任务的返回值。可以认为是带有回调的<br>Runnable。<br>Future接口表示异步任务，是还没有完成的任务给出的未来结果。所以说Callable用于产生结果，<br>Future用于获取结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">myCall</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;Integer&gt; &#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>&#125;<br><br>FutureTask&lt;Integer&gt; integerFutureTask = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">myCall</span>());<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(integerFutureTask).start();<br>        integerFutureTask.get();<br></code></pre></td></tr></table></figure><h2 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">myRun</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>*<span class="hljs-number">3</span>);<br>                System.out.println(<span class="hljs-string">&quot;线程&quot;</span>+Thread.currentThread().getName());<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="线程池核心参数"><a href="#线程池核心参数" class="headerlink" title="线程池核心参数"></a>线程池核心参数</h2><ol><li>最大线程数maximumPoolSize</li><li>核心线程数corePoolSize</li><li>活跃时间keepAliveTime</li><li>时间单位</li><li>阻塞队列workQueue</li><li>拒绝策略RejectedExecutionHandler</li><li>线程工厂</li></ol><p>当提交一个新任务到线程池时，具体的执行流程如下：</p><ol><li>当我们提交任务，线程池会根据corePoolSize大小创建若干任务数量线程执行任务</li><li>当任务的数量超过corePoolSize数量，后续的任务将会进入阻塞队列阻塞排队</li><li>当阻塞队列也满了之后，那么将会继续创建(maximumPoolSize-corePoolSize)个数量的线程来<br>执行任务，如果任务处理完成，maximumPoolSize-corePoolSize额外创建的线程等待<br>keepAliveTime之后被自动销毁</li><li>如果达到maximumPoolSize，阻塞队列还是满的状态，那么将根据不同的拒绝策略对应处理</li></ol><h2 id="submit"><a href="#submit" class="headerlink" title="submit()"></a>submit()</h2><p>submit有返回值</p><p>submit(Runnable r)  ，返回值为null</p><p>submit(Callable c) ,有返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPoolExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>,<br>                <span class="hljs-number">10</span>, TimeUnit.SECONDS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="hljs-number">5</span>), Executors.defaultThreadFactory()<br>                , <span class="hljs-keyword">new</span> <span class="hljs-title class_">RejectedExecutionHandler</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rejectedExecution</span><span class="hljs-params">(Runnable r, ThreadPoolExecutor executor)</span> &#123;<br>                System.out.println(r.toString() + <span class="hljs-string">&quot;拒绝策略&quot;</span>);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++)&#123;<br>            Future&lt;String&gt; submit = threadPoolExecutor.submit(() -&gt; &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;cdr&quot;</span>;<br>            &#125;);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> submit.get();<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="excute"><a href="#excute" class="headerlink" title="excute()"></a>excute()</h2><p>excute没有返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPoolExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>,<br>                <span class="hljs-number">10</span>, TimeUnit.SECONDS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="hljs-number">5</span>), Executors.defaultThreadFactory()<br>                , <span class="hljs-keyword">new</span> <span class="hljs-title class_">RejectedExecutionHandler</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rejectedExecution</span><span class="hljs-params">(Runnable r, ThreadPoolExecutor executor)</span> &#123;<br>                System.out.println(r.toString() + <span class="hljs-string">&quot;拒绝策略&quot;</span>);<br>            &#125;<br>        &#125;);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++)&#123;<br>          <br>        <br>           threadPoolExecutor.execute(()-&gt;&#123;<br>               System.out.println(<span class="hljs-string">&quot;线程&quot;</span>+Thread.currentThread().getName());<br>           &#125;);<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="线程池的拒绝策略"><a href="#线程池的拒绝策略" class="headerlink" title="线程池的拒绝策略"></a>线程池的拒绝策略</h2><p>主要有4种拒绝策略：</p><ol><li>AbortPolicy：直接丢弃任务，抛出异常，这是默认策略</li><li>CallerRunsPolicy：只用调用者所在的线程来处理任务</li><li>DiscardOldestPolicy：丢弃等待队列中最旧的任务，并执行当前任务</li><li>DiscardPolicy：直接丢弃任务，也不抛出异常</li></ol><h2 id="java线程池中队列常用类型"><a href="#java线程池中队列常用类型" class="headerlink" title="java线程池中队列常用类型"></a>java线程池中队列常用类型</h2><ul><li>ArrayBlockingQueue 是一个基于数组结构的有界阻塞队列，此队列按 FIFO（先进先出）原则对元素进行排序。</li><li>LinkedBlockingQueue 一个基于链表结构的阻塞队列，此队列按FIFO （先进先出） 排序元素，吞吐量通常要高于 ArrayBlockingQueue</li><li>SynchronousQueue 一个不存储元素的阻塞队列</li><li>PriorityBlockingQueue 一个具有优先级的无限阻塞队列。 PriorityBlockingQueue 也是基于最小二叉堆实现</li><li>DelayQueue<ul><li>只有当其指定的延迟时间到了，才能够从队列中获取到该元素。</li><li>DelayQueue 是一个没有大小限制的队列，</li><li>因此往队列中插入数据的操作（生产者）永远不会被阻塞，而只有获取数据的操作（消费<br>者）才会被阻塞。</li></ul></li></ul><h2 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h2><p>阻塞队列（BlockingQueue）是一个支持两个附加操作的队列。<br>这两个附加的操作是：在队列为空时，获取元素的线程会等待队列变为非空。当队列满时，存储元<br>素的线程会等待队列可用。<br>阻塞队列常用于生产者和消费者的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿<br>元素的线程。阻塞队列就是生产者存放元素的容器，而消费者也只从容器里拿元素。<br>JDK7提供了7个阻塞队列。分别是：</p><ul><li>ArrayBlockingQueue ：一个由数组结构组成的有界阻塞队列。</li><li>LinkedBlockingQueue ：一个由链表结构组成的有界阻塞队列。</li><li>PriorityBlockingQueue ：一个支持优先级排序的无界阻塞队列。<br>DelayQueue：一个使用优先级队列实现的无界阻塞队列。</li><li>SynchronousQueue：一个不存储元素的阻塞队列。</li><li>LinkedTransferQueue：一个由链表结构组成的无界阻塞队列。</li><li>LinkedBlockingDeque：一个由链表结构组成的双向阻塞队列。<br>Java 5之前实现同步存取时，可以使用普通的一个集合，然后在使用线程的协作和线程同步可以实<br>现生产者，消费者模式，主要的技术就是用好，wait ,notify,notifyAll,sychronized这些关键字。而<br>在java 5之后，可以使用阻塞队列来实现，此方式大大简少了代码量，使得多线程编程更加容易，<br>安全方面也有保障。<br>BlockingQueue接口是Queue的子接口，它的主要用途并不是作为容器，而是作为线程同步的的工<br>具，因此他具有一个很明显的特性，当生产者线程试图向BlockingQueue放入元素时，如果队列已<br>满，则线程被阻塞，当消费者线程试图从中取出一个元素时，如果队列为空，则该线程会被阻塞，<br>正是因为它所具有这个特性，所以在程序中多个线程交替向BlockingQueue中放入元素，取出元<br>素，它可以很好的控制线程之间的通信。<br>阻塞队列使用最经典的场景就是socket客户端数据的读取和解析，读取数据的线程不断将数据放入<br>队列，然后解析线程不断从队列取数据解析。</li></ul><h2 id="线程安全需要保证几个基本特征"><a href="#线程安全需要保证几个基本特征" class="headerlink" title="线程安全需要保证几个基本特征"></a>线程安全需要保证几个基本特征</h2><ul><li>原子性，简单说就是相关操作不会中途被其他线程干扰，一般通过同步机制实现。</li><li>可见性，是一个线程修改了某个共享变量，其状态能够立即被其他线程知晓，通常被解释为将线程本地状态反映到主内存上，volatile 就是负责保证可见性的。</li><li>有序性，是保证线程内串行语义，避免指令重排等。</li></ul><h2 id="线程之间是如何进行通信的"><a href="#线程之间是如何进行通信的" class="headerlink" title="线程之间是如何进行通信的"></a>线程之间是如何进行通信的</h2><p>线程之间的通信有两种方式：共享内存和消息传递。</p><p><strong>共享内存</strong><br>在共享内存的并发模型里，线程之间共享程序的公共状态，线程之间通过写-读内存中的公共状态来隐式进行通信。典型的共享内存通信方式，就是通过共享对象进行通信。</p><p><strong>消息传递</strong><br>在消息传递的并发模型里，线程之间没有公共状态，线程之间必须通过明确的发送消息来显式进行通信。在 Java 中典型的消息传递方式，就是 wait() 和 notify() ，或者 BlockingQueue 。</p><h2 id="CountDownLatch（线程计数器）"><a href="#CountDownLatch（线程计数器）" class="headerlink" title="CountDownLatch（线程计数器）"></a>CountDownLatch（线程计数器）</h2><p>final CountDownLatch latch  = new CountDownLatch(2);</p><p>实现类似计数器功能，比如线程a要等待其他2个任务执行完才能执行，就可以用CountDownLatch 。其他线程用</p><p>latch.countDown减去一个计数器，latch值为0就不可再用了，不可重用</p><h2 id="Cyclic-Barrier-回环栅栏-等待值barrier状态再全部同时执行"><a href="#Cyclic-Barrier-回环栅栏-等待值barrier状态再全部同时执行" class="headerlink" title="Cyclic Barrier(回环栅栏-等待值barrier状态再全部同时执行)"></a>Cyclic Barrier(回环栅栏-等待值barrier状态再全部同时执行)</h2><p>让一组线程等待至某个状态后再全部同时执行。可重用</p><h2 id="Semaphore-信号量-控制同时访问的线程个数"><a href="#Semaphore-信号量-控制同时访问的线程个数" class="headerlink" title="Semaphore(信号量-控制同时访问的线程个数)"></a>Semaphore(信号量-控制同时访问的线程个数)</h2><p>通过acquire()获取一个许可，没有就等待，release()释放一个许可</p><p>Semaphore有一个构造函数，<br>可以传入一个int型整数n，表示某段代码最多只有n个线程可以访问，如果超出了n，那么请等待，<br>等到某个线程执行完毕这段代码块，下一个线程再进入。由此可以看出如果Semaphore构造函数中<br>传入的int型整数n=1，相当于变成了一个synchronized了。</p><h2 id="Volatile-变量可见性、禁止重排序"><a href="#Volatile-变量可见性、禁止重排序" class="headerlink" title="Volatile(变量可见性、禁止重排序)"></a>Volatile(变量可见性、禁止重排序)</h2><ul><li>变量可见性：保证该变量对所有线程可见，这里的可见性指的是当一个线程修改了变量值，那么新的值对于其他线程是可以立即获取的</li><li>禁止重排序：禁止指令重排</li></ul><h2 id="CAS（比较并交换-乐观锁机制-锁自旋）"><a href="#CAS（比较并交换-乐观锁机制-锁自旋）" class="headerlink" title="CAS（比较并交换-乐观锁机制-锁自旋）"></a>CAS（比较并交换-乐观锁机制-锁自旋）</h2><p>CAS（compare and swap）比较并交换。cas(v,e,n)。v表示要更新的变量，e表示旧值，n表示新值。当且仅当v=e，才会将v设置为n。如果v和e不同，则说明有其他线程做了更新，则当前线程什么都不做。最后，cas返回当前v的真实值。</p><p>cas是乐观锁。多个线程同时使用cas操作一个变量时，只会有一个成功，其余均会失败。失败的线程不会被挂起，而是被告知失败，并且允许再次尝试，当然也允许失败的线程放弃操作。</p><h2 id="CAS缺点"><a href="#CAS缺点" class="headerlink" title="CAS缺点"></a>CAS缺点</h2><p><strong>ABA问题</strong>：ABA的问题指的是在CAS更新的过程中，当读取到的值是A，然后准备赋值的时候仍然是<br>A，但是实际上有可能A的值被改成了B，然后又被改回了A，这个CAS更新的漏洞就叫做ABA。只是<br>ABA的问题大部分场景下都不影响并发的最终效果。<br>Java中有AtomicStampedReference来解决这个问题，他加入了预期标志和更新后标志两个字段，<br>更新时不光检查值，还要检查当前的标志是否等于预期标志，全部相等的话才会更新。<br><strong>循环时间长开销大</strong>：自旋CAS的方式如果长时间不成功，会给CPU带来很大的开销。<br><strong>只能保证一个共享变量的原子操作</strong>：只对一个共享变量操作可以保证原子性，但是多个则不行，多<br>个可以通过AtomicReference来处理或者使用锁synchronized实现。</p><h2 id="ThreadLocal原理"><a href="#ThreadLocal原理" class="headerlink" title="ThreadLocal原理"></a>ThreadLocal原理</h2><p>ThreadLocal可以理解为线程本地变量，他会在每个线程都创建一个副本，那么在线程之间访问内部<br>副本变量就行了，做到了线程之间互相隔离，相比于synchronized的做法是用空间来换时间。<br>ThreadLocal有一个静态内部类ThreadLocalMap，ThreadLocalMap又包含了一个Entry数组，<br>Entry本身是一个弱引用，他的key是指向ThreadLocal的弱引用，Entry具备了保存key value键值对<br>的能力。<br>弱引用的目的是为了防止内存泄露，如果是强引用那么ThreadLocal对象除非线程结束否则始终无<br>法被回收，弱引用则会在下一次GC的时候被回收。<br>但是这样还是会存在内存泄露的问题，假如key和ThreadLocal对象被回收之后，entry中就存在key<br>为null，但是value有值的entry对象，但是永远没办法被访问到，同样除非线程结束运行。<br>但是只要ThreadLocal使用恰当，在使用完之后调用remove方法删除Entry对象，实际上是不会出<br>现这个问题的</p><h1 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h1><h2 id="throw和throws的区别"><a href="#throw和throws的区别" class="headerlink" title="throw和throws的区别"></a>throw和throws的区别</h2><p>位置不同：throws用在函数上，后面跟的是异常类，可以跟多个；throw用在函数内，后面跟的是异常对象</p><p>功能不同：</p><ul><li>throws用来声明异常，让调用者只知道该功能可能出现了问题，可以给出预先的处理方式；throw抛出具体的问题对象，执行到throw，功能就已经结束了；</li><li>throws表示出现异常的一种可能性，并不一定发生。throw则抛出了异常</li></ul><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><blockquote><p>在运行状态中，对于任意一个类都能够知道这个类所有的属性和方法；并且对于任意一个对象，都能够调用他的任意一个方法；</p></blockquote><p>改变一个私有属性的值，例如Integer的value属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">psvm&#123;<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;test(i)&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>     <span class="hljs-type">Field</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> Integer.class.getDeclaredField(<span class="hljs-string">&quot;value&quot;</span>);<br>     value.setAccessible(<span class="hljs-literal">true</span>);<br>     value.set(i,<span class="hljs-number">10</span>);<br>     System.out.println(i);<br>&#125;<br>       <br></code></pre></td></tr></table></figure><p>jdbc用到了反射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Class.forName(<span class="hljs-string">&#x27;com.mysql.jdbc.Driver.class&#x27;</span>);<span class="hljs-comment">//加载MySQL的驱动类</span><br><br></code></pre></td></tr></table></figure><h3 id="反射的实现方式"><a href="#反射的实现方式" class="headerlink" title="反射的实现方式"></a>反射的实现方式</h3><p>获取Class对象，有4种方法： </p><p>1）Class.forName(“类的路径”)；</p><p> 2）类名.class </p><p>3）对象名.getClass() </p><p>4）基本类型的包装类，可以调用包装类的Type属性来获得该包装类的Class对象</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点：能够运行时动态获取类的实例，提高灵活性。与动态编译结合</p><p>缺点：性能较低；相对不安全，破坏了封装性（可以获得私有属性和方法）</p><p>解决性能较低：</p><ul><li>通过setAccessible(true)来关闭jdk的安全检查来提升反射速度</li><li>多次创建一个类的实例，有缓存会快很多</li><li>ReflectASM工具类，通过字节码生成的方式加快速度</li></ul><h2 id="引用类型有哪些"><a href="#引用类型有哪些" class="headerlink" title="引用类型有哪些"></a>引用类型有哪些</h2><ol><li>强引用指的就是代码中普遍存在的赋值方式，比如A a = new A()这种。强引用关联的对象，永<br>远不会被GC回收。</li><li>软引用可以用SoftReference来描述，指的是那些有用但是不是必须要的对象。系统在发生内存<br>溢出前会对这类引用的对象进行回收。</li><li>弱引用可以用WeakReference来描述，他的强度比软引用更低一点，弱引用的对象下一次GC<br>的时候一定会被回收，而不管内存是否足够。</li><li>虚引用也被称作幻影引用，是最弱的引用关系，可以用PhantomReference来描述，他必须和<br>ReferenceQueue一起使用，同样的当发生GC的时候，虚引用也会被回收。可以用虚引用来管<br>理堆外内存。</li></ol><h2 id="List和Set"><a href="#List和Set" class="headerlink" title="List和Set"></a>List和Set</h2><ul><li>list有序可重复，按进入顺序保存，可存在多个null值，可以使用iterator取出所有元素逐一遍历，还可以get（index）获取指定下标的元素</li><li>set无序，不可重复，只允许一个null值，只能用iterator</li></ul><h2 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h2><p>hashCode()的作用是获取哈希码，也叫散列码。返回一个int整数。哈希码的作用是确定该对象在哈希表中的索引位置</p><h3 id="HashSet如何检查重复"><a href="#HashSet如何检查重复" class="headerlink" title="HashSet如何检查重复"></a>HashSet如何检查重复</h3><p>对象加入HashSet，HashSet会先计算对象的hashCode值来判断对象加入的位置，看该位置是否有值，如果没有，HashSet会假设对象没有重复出现；但是如果发现有值，就会调用equals（）方法来检查两个对象是否真的相同。如果相同，HashSet就不会让这个加入操作成功。如果不同，就会重新散列到其他位置。可以减少equals的次数</p><ul><li>如果两个对象相等，则hashCode一定也相等</li><li>两个对象相等，对两个对象分别调用equals方法都返回true</li><li>两个对象有相同的hashCode值，他们不一定相同</li><li>因此，equals方法被覆盖过，hashCode方法也必须被覆盖</li><li>hashCode（）的默认行为是对堆上的对象产生独特的值。如果没有重写hashCode（），则该class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</li></ul><h2 id="ArrayList和LinkedList"><a href="#ArrayList和LinkedList" class="headerlink" title="ArrayList和LinkedList"></a>ArrayList和LinkedList</h2><p>ArrayList：基于动态数组，连续内存存储，适合下标访问（随机访问），扩容机制：因为数组长度固定，超出长度存数据 时需要新建数组，然后将老数组的数据拷贝到新数组，如果不是尾部插入数据还会涉及到元素的移动，使用尾插法并指定初始容量可以提升性能</p><p>LinkedList：基于链表，可以存储在分散的内存中，适合做数据插入和删除操作，不适合查询；需要逐一遍历，必须使用iterator不能使用for循环，因为每次在for循环内通过get(i)取得元素都需要对list重新进行遍历。不要用indexOf返回元素索引，并利用其进行遍历，使用indexOf对list进行遍历，当结果为空时会遍历整个列表</p><h2 id="HashMap和HashTable"><a href="#HashMap和HashTable" class="headerlink" title="HashMap和HashTable"></a>HashMap和HashTable</h2><p>区别：</p><ul><li>HashMap里的方法没有用synchronized修饰，线程不安全；HashTable方法用synchronized修饰，线程安全；</li><li>HashMap允许key和value为null，HashTable不允许</li></ul><p>HashMap底层实现：数组+链表</p><p>jdk8开始链表高度到8、数组长度超过64，链表转换为红黑树，元素以内部类Node节点存在</p><ul><li>计算key的hash值，二次hash然后对数组长度取模，对应到数组下标</li><li>如果没有产生hash冲突（下标位置没有元素），则直接创建Node存入数组</li><li>如果没有产生hash冲突，先进行equal比较，相同则取代该元素，不同，则判断链表高度插入链表，链表高度达到8，并且数组长度到64转变为红黑树，高度低于6则将红黑树转回链表</li><li>key为null，存在下标0的位置</li></ul><p>数组扩容</p><p>默认是16，加载因子0.75（<strong>泊松分布，0.75的话碰撞最小</strong>）。16*0.75=12，<strong>当数组有12个元素，并且下一个数据插入的下标不为空时开始扩容</strong>。扩容2倍。新建一个数组为原数组的2倍，再重新计算hashcode，来和数组长度-1做与运算，计算出新的下标（新的下标值要么是原数组的下标，要么是原数组下标+原数组长度）</p><p>多线程下，数组扩容不安全，死循环。</p><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><p>jdk7:</p><p>数据结构：ReentrantLock+Segment+HashEntry,一个Segment中包含一个HashEntry数组，每个HashEntry又是一个链表结构</p><p>元素查询：两次hash，第一次hash定位到Segment，第二次Hash定位到元素所在的链表的头部</p><p>锁：Segment分段锁，Segment继承了ReentrantLock，锁定操作的Segment，其他的Segment不受影响，并发度为Segment的个数，可以通过构造函数指定，数组扩容不会影响其他的Segment。</p><p>get方法无需加锁，volatile保证</p><p>jdk8：</p><p>数据结构：synchronized+CAS+Node+红黑树，Node的val和next都用volatile修饰，保证可见性</p><p>查找，替换，赋值操作都是用CAS</p><p>锁：锁链表的head节点，不影响其他元素的读写，锁粒度更细，效率更高，扩容时，阻塞所有的读写操作、并发扩容</p><p>读操作无锁：</p><p>​    Node的val和next使用volatile修饰，读写线程对该变量互相可见</p><p>​    数组用volatile修饰，保证扩容时被读线程感知</p><h2 id="什么是字节码文件"><a href="#什么是字节码文件" class="headerlink" title="什么是字节码文件"></a>什么是字节码文件</h2><p>就是.class文件，只面向jvm。由jvm转换成特定系统的机器码执行。</p><p>java源代码-&gt;编译器—&gt;jvm可执行的java字节码-&gt;jvm-&gt;jvm中的解释器-&gt;机器可执行的二进制机器码-&gt;程序运行</p><h2 id="Java创建对象有几种方式？"><a href="#Java创建对象有几种方式？" class="headerlink" title="Java创建对象有几种方式？"></a>Java创建对象有几种方式？</h2><p>java中提供了以下四种创建对象的方式:</p><ul><li>new创建新对象</li><li>通过反射机制</li><li>采用clone机制</li><li>通过序列化机制</li></ul><h2 id="深拷贝和浅拷贝的区别是什么"><a href="#深拷贝和浅拷贝的区别是什么" class="headerlink" title="深拷贝和浅拷贝的区别是什么?"></a>深拷贝和浅拷贝的区别是什么?</h2><ul><li>浅拷贝:将原对象的引用直接赋给新对象，新数组，新对象只是原对象的一个引用</li><li>深拷贝:创建一个新的对象，将对象的各项属性的值拷贝过来，是值而不是引用</li></ul><h2 id="try-catch-finally，try里有return，finally还执行么？"><a href="#try-catch-finally，try里有return，finally还执行么？" class="headerlink" title="try catch finally，try里有return，finally还执行么？"></a>try catch finally，try里有return，finally还执行么？</h2><p>执行，并且finally的执行早于try里面的return</p><p>结论：<br>1、不管有木有出现异常，finally块中代码都会执行；<br>2、当try和catch中有return时，finally仍然会执行；<br>3、finally是在return后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把要返回的<br>值保存起来，管finally中的代码怎么样，返回的值都不会改变，任然是之前保存的值），所以函数<br>返回值是在finally执行前确定的；<br>4、finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值。</p><h2 id="fail-fast"><a href="#fail-fast" class="headerlink" title="fail-fast"></a>fail-fast</h2><p>fail-fast机制产生的ConcurrentModificationException异常java.util包下面的所有的集合类都是快速失败的，“快速失败”也就是fail-fast，它是Java集合的一种错误检测机制。当多个线程对集合进行结构上的改变的操作时，有可能会产生fail-fast制。记住是有可能，而不是一定</p><h2 id="fail-safe"><a href="#fail-safe" class="headerlink" title="fail-safe"></a>fail-safe</h2><p>java.util.concurrent包下面的所有的类都是安全失败的，在遍历过程中，如果已经遍历的数组上的内容变化了，迭代器不会抛出ConcurrentModificationException异常。如果未遍历的数组<br>上的内容发生了变化，则有可能反映到迭代过程中。这就是ConcurrentHashMap迭代器弱一致的表现。ConcurrentHashMap的弱一致性主要是为了提升效率，是一致性与效率之间的一种权衡。<br>要成为强一致性，就得到处使用锁，甚至是全局锁，这就与Hashtable和同步的HashMap一样了</p><h2 id="transient关键字"><a href="#transient关键字" class="headerlink" title="transient关键字"></a>transient关键字</h2><p>transient修饰的变量，不会被序列化。</p><p>static修饰的也不会被序列化。</p><p>@JsonField(serializable = false),这个注解也不会被序列化</p><h2 id="双亲委派模式"><a href="#双亲委派模式" class="headerlink" title="双亲委派模式"></a>双亲委派模式</h2><p>即加载器加载类时先把请求委托给自己的父类加载器执行,直到顶层的启动类加载器.<br>父类加载器能够完成加载则成功返回,不能则子类加载器才自己尝试加载.<br>优点:</p><ol><li>避免类的重复加载</li><li>避免Java的核心API被篡改</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="hashmap-jdk1-7的头插法"><a href="#hashmap-jdk1-7的头插法" class="headerlink" title="hashmap jdk1.7的头插法"></a>hashmap jdk1.7的头插法</h2><p>底层：数组+链表</p><p>计算出hashcode存入数组；</p><p>计算出的hashcode冲突时，会生成链表；新节点作为头结点，然后把新节点的值存入数组</p><h2 id="HashMap的长度为什么是2的幂次方"><a href="#HashMap的长度为什么是2的幂次方" class="headerlink" title="HashMap的长度为什么是2的幂次方"></a>HashMap的长度为什么是2的幂次方</h2><p>为了能让 HashMap 存数据和取数据的效率高，尽可能地减少 hash 值的碰撞，也就是说尽量把数<br>据能均匀的分配，每个链表或者红黑树长度尽量相等</p><p>取余（%）操作中如果除数是 2 的幂次，则等价于与其除数减一的与（&amp;）操作（也就是说hash % length == hash &amp;(length - 1) 的前提是 length 是 2 的 n 次方）。并且，采用二进制位操作 &amp; ，相对于 % 能够提高运算效率</p><p>数组大小一定是二的幂次方（1,2,4,8,16,32。。。）默认16。只有2的幂次方数减1后才能变成前面都是0，后面都是1（比如16-1=15,转换为0000 1111，hashcode为0101 0101，与长度-1与运算得出存在数组的位置下标，0000 0101。<strong>只有长度是2的幂次方，减1后才能达到高为是0，低位是1的效果，方便与运算</strong>）</p><h2 id="数组扩容"><a href="#数组扩容" class="headerlink" title="数组扩容"></a>数组扩容</h2><p>默认是16，加载因子0.75（<strong>泊松分布，0.75的话碰撞最小</strong>）。16*0.75=12，<strong>当数组有12个元素，并且下一个数据插入的下标不为空时开始扩容</strong>。扩容2倍。新建一个数组为原数组的2倍，再重新计算hashcode，来和数组长度-1做与运算，计算出新的下标（新的下标值要么是原数组的下标，要么是原数组下标+原数组长度）</p><p>多线程下，数组扩容不安全，死循环。</p><h2 id="并发修改异常"><a href="#并发修改异常" class="headerlink" title="并发修改异常"></a>并发修改异常</h2><p>put(),remove()，都会modcount++;</p><p>线程1： 赋值 exceptcount = modcount ,遍历,中间要是modcount变了，就会不等于exceptcount，抛出异常</p><h2 id="ConcurentHashMap"><a href="#ConcurentHashMap" class="headerlink" title="ConcurentHashMap"></a>ConcurentHashMap</h2><p>底层：双层数组，外部数组存放的是segement对象，segement对象里存放内部数组（相当于hashmap）</p><p><strong>分段锁</strong>：多线程put时，先计算外部数组的下标拿到segement对象，segement再调用put，put方法里lock；这样就相当于只锁了这一个segement对象</p><p>内部数组最小长度为2；</p><p><strong>扩容</strong>：需要扩容时，只会扩容内部数组</p><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p>UserService类–&gt;推断构造方法—&gt;普通对象–&gt; 依赖注入—&gt;初始化前（@PostConstruct）—&gt;初始化（实现InitializingBean，重写afterPropertiesSet()）–&gt;初始化后（AOP）–&gt; 代理对象–&gt;放入Map单例池—&gt;Bean对象</p><p>Bean的实例化：通过构造方法得到一个普通对象</p><p>Bean的初始化：初始化（可以实现InitializingBean，重写afterPropertiesSet()）</p><p>推断构造方法：@Autowired来指定Spring使用构造方法，先byType，如果有多个,再byName</p><p>UserServiceProxy对象=UserService代理对象—&gt;UserService代理对象.target=普通对象—&gt;放入Map单例池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceProxy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UserService</span> &#123;<br>    UserService target;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-meta">@Before</span>切面逻辑<br>         target.test(); <span class="hljs-comment">// 相当于普通对象.test()</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Spring事务</p><p>// @Transaction</p><p>// 事务管理器新建一个数据库连接conn</p><p>// conn.autocommit = false</p><p>// 执行sql</p><p>// conn.commit();或者conn.rollback()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceProxy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UserService</span> &#123;<br>    UserService target;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// @Transaction</span><br><span class="hljs-comment">// 事务管理器新建一个数据库连接conn</span><br><span class="hljs-comment">// conn.autocommit = false</span><br><span class="hljs-comment">// target.test(),执行sql</span><br><span class="hljs-comment">// conn.commit();或者conn.rollback()</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="循环依赖"><a href="#循环依赖" class="headerlink" title="循环依赖"></a>循环依赖</h2><p>三级缓存：</p><ul><li>一级：单例池 singletonObjects&lt;beanName,bean&gt; (concurrentHashMap)</li><li>二级：earlySingletonObjects&lt;beanName,bean&gt;</li><li>三级：singletonFactories&lt;beanName,bean&gt;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>AService 依赖BService，BService依赖AService<br>AService 创建的生命周期<br>    <br><span class="hljs-number">0</span>、 creatingSet(<span class="hljs-string">&quot;aService&quot;</span>)  <span class="hljs-comment">// 说明aService正在创建对象</span><br><span class="hljs-number">1</span>、 创建一个AService普通对象--&gt;singletonFactories&lt;AService,lambda&gt;<br><span class="hljs-number">2</span>、 填充bService属性--&gt;去单例池中找BService对象---&gt;创建BService对象<br><span class="hljs-number">3</span>、 填充其他属性<br><span class="hljs-number">4</span>、 其他操作<br><span class="hljs-number">5</span>、 初始化后（AOP）<br><span class="hljs-number">5.5</span>、earlySingletonObjects 代理对象放进去<br><span class="hljs-number">6</span>、 放入单例池<br>    <br>BService创建的生命周期<br><span class="hljs-number">0</span>、 creatingSet(<span class="hljs-string">&quot;bService&quot;</span>)<br><span class="hljs-number">1</span>、 创建一个BService普通对象<br><span class="hljs-number">2</span>、 填充BService属性--&gt;去单例池中找AService对象---&gt;去creatingSet中找--&gt;找到说明出现了循环依赖--&gt;earlySingletonObjects--&gt;没找到就去singletonFactories--&gt;执行lambda--&gt;(如果不需要aop，就把普通对象放入earlySingletonObjects)让AService提前AOP---&gt;Aservice代理对象--&gt; earlySingletonObjects&lt;AService,Aservice代理对象&gt;，把这个AService从三级缓存中删除<br><span class="hljs-number">3</span>、 填充其他属性<br><span class="hljs-number">4</span>、 其他操作<br><span class="hljs-number">5</span>、 初始化后（AOP）<br><span class="hljs-number">6</span>、 放入单例池<br></code></pre></td></tr></table></figure><h2 id="如何实现一个ioc容器"><a href="#如何实现一个ioc容器" class="headerlink" title="如何实现一个ioc容器"></a>如何实现一个ioc容器</h2><ul><li>配置文件中指定需要扫描的包路径</li><li>定义一些注解，分表表示访问控制层、业务服务层、数据持久层、依赖注入注解、获取配置文件注解</li><li>从配置文件中获取需要扫描的包路径，获取到当前路径下的文件信息及文件文件夹信息，将当前路径下所有一以.class结尾的文件添加到一个Set集合中存储</li><li>遍历这个set集合，获取在类上有指定注解的类，并将其交给ioc容器，定义一个安全的map用来存储这些对象</li><li>遍历这个ioc容器，获取每一个类的实例，判断里面是有有依赖其他类的实例，然后进行递归注入</li></ul><h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><h2 id="mysql执行计划"><a href="#mysql执行计划" class="headerlink" title="mysql执行计划"></a>mysql执行计划</h2><p><code>explain select * from user where id &gt; 10;</code></p><p>执行计划就是sql执行的顺序，使用了哪个索引等等。</p><h2 id="执行计划返回的字段"><a href="#执行计划返回的字段" class="headerlink" title="执行计划返回的字段"></a>执行计划返回的字段</h2><ol><li><p>id:  查询的顺序号，有几个select就有几个id。id值越大就先执行，相同id从上往下执行，id为NULL最后执行</p></li><li><p>selectType：每个select的类型</p><ul><li>SIMPLE：此查询不包含UNION查询或子查询</li><li>PRIMARY：此查询是最外层的查询（包含子查询）</li><li>SUBQUERY：子查询中的第一个select</li></ul></li><li><p>table：该语句查询的表</p></li><li><p>type：判断sql性能</p><ul><li>const：通过索引一次命中，匹配一行数据</li><li>system：表中只有一行记录</li><li>eq_ref：唯一索引扫描，对于某个索引键，表中只有一条记录和它匹配</li><li>ref：非唯一索引扫描，返回匹配某个值的所有</li><li>range：只检索给定范围的行，使用一个索引来选择行，一般用于between,&lt;,&gt;</li><li>index：只遍历索引树</li><li>ALL：全表扫描</li></ul><p><strong>执行效率</strong>：ALL&lt;index&lt;range&lt;ref&lt;eq_ref&lt;const&lt;system,最好避免all和index</p></li></ol><ol start="5"><li>extra<ul><li>using filesort: 表示mysql对结果集进行外部排序，不能通过索引顺序达到排序效果。</li><li>using index：覆盖索引扫描，表示查询索引树种就可查找所需数据，不用扫描表数据文件，性能不错</li><li>using temporary：查询有使用临时表，一般出现于排序，分组和多表join的情况，查询效率不高</li><li>using where：sql使用了where过滤，效率较高</li></ul></li></ol><h2 id="ACID靠什么保证"><a href="#ACID靠什么保证" class="headerlink" title="ACID靠什么保证"></a>ACID靠什么保证</h2><p>1.原子性：由undo log日志保证，它记录了需要回滚的日志信息</p><p>2.一致性：由其他三大特性保证，程序代码要保证业务上的一致性</p><p>3.隔离性：由mvcc保证</p><p>4.持久性：由内存+redo log来保证，mysql修改数据同时在内存和redo log记录这次操作，宕机的时候可以从redo log恢复</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">InnoDB redo <span class="hljs-keyword">log</span> 写盘，InnoDB事务进入 <span class="hljs-keyword">prepare</span>状态<br>如果前面<span class="hljs-keyword">prepare</span>成功，binlog写盘，再继续将事务日志持久化到binlog，如果持久化成功，那么InnoD事务则进入<span class="hljs-keyword">commit</span>状态(在redo <span class="hljs-keyword">log</span>里面写一个<span class="hljs-keyword">commit</span>记录)<br></code></pre></td></tr></table></figure><p>redo log的刷盘会在系统空闲时进行</p><h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><h2 id="redis过期策略"><a href="#redis过期策略" class="headerlink" title="redis过期策略"></a>redis过期策略</h2><ul><li>惰性过期：只有访问一个key时，才会判断key是否过期，过期则清除。该策略可以最大化节省cpu资源，但是对内存非常不友好。极端情况下，可能出现大量的key没有被访问，从而一直没被清除</li><li>定时过期：用定时器。占用cpu资源</li><li>定期过期：每隔一定的时间，会扫描一定数量的数据库的expires字典中一定数量的key，并清除其中已经过期的key。这种策略是前两种的折中方案。</li></ul><p>redis同时使用了惰性过期和定期过期。</p><h2 id="redis单线程快的原因"><a href="#redis单线程快的原因" class="headerlink" title="redis单线程快的原因"></a>redis单线程快的原因</h2><p>redis基于Reactor模式开发了网络事件处理器，这个处理器叫做文件事件处理器file event handler。这个文件事件处理器，它是单线程的，所以redis也是单线程。</p><p>单线程快的原因：</p><ul><li>纯内存操作</li><li>核心是基于非阻塞的IO多路复用机制</li><li>单线程避免了多线程的频繁上下文切换带来的性能问题</li></ul><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>一大批缓存同时失效，请求都落在数据库上，数据库承受不了崩了。</p><p>解决方案：</p><ul><li>缓存过期的时间设置随机，防止同一时间都失效</li><li>缓存预热</li><li>互斥锁（只让一个线程去查）</li></ul><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>缓存穿透是指缓存和数据库中都没有数据</p><p>解决方案：</p><ul><li><p>布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，只要bitmap里没有就一定没有</p></li><li><p>缓存null</p></li></ul><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>缓存中没有，数据库中有（一般是缓存到期），由于并发用户特别多，同时读这个缓存没读到，又同时去数据库读数据。和缓存雪崩不同的是，缓存击穿指并发查同一条数据。</p><p>解决方案：</p><ul><li>设置热点数据永远不过期</li><li>加互斥锁</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker</title>
    <link href="/article/docker/"/>
    <url>/article/docker/</url>
    
    <content type="html"><![CDATA[<h1 id="docker的基本组成"><a href="#docker的基本组成" class="headerlink" title="docker的基本组成"></a>docker的基本组成</h1><p><img src="https://img0.baidu.com/it/u=3513093855,4202470367&fm=26&fmt=auto" alt="img"></p><p><strong>镜像(image)：</strong></p><p>docker镜像好比是一个 模板，可以通过这个模板来创建容器服务；通过这个镜像可以创建多个容器（最终服务运行或者项目运行在容器中）</p><p><strong>容器(container)：</strong></p><p>docker利用容器技术，独立运行一个或者一组应用，通过镜像创建</p><p>启动，停止，删除</p><p>容器可以理解为一个简易的Linux系统</p><p><strong>仓库(repository)：</strong></p><p>仓库存放镜像的地方</p><p>仓库分为公有仓库和私有仓库</p><p>Docker Hub（默认是国外的）</p><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><blockquote><p>环境准备</p></blockquote><p>1、需要Linux基础</p><p>2、CentOS 7</p><blockquote><p>安装docker</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1.卸载旧版本</span><br>yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-engine<br>                  <br><span class="hljs-comment">#2.需要的安装包</span><br>yum install -y yum-utils<br><br><span class="hljs-comment">#3.设置镜像的仓库</span><br>yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo <span class="hljs-comment">#国外的</span><br>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo <span class="hljs-comment">#阿里的，建议使用</span><br><br><span class="hljs-comment"># 跟新yum软件包索引</span><br>yum makecache fast<br><br><span class="hljs-comment">#4.安装docker相关的 docker-ce 社区版 ee企业版</span><br>yum install docker-ce docker-ce-cli containerd.io<br><br><span class="hljs-comment">#5.启动docker</span><br>systemctl start docker<br>    <br><span class="hljs-comment">#6.使用docker version查看是否安装成功</span><br>docker version<br><br></code></pre></td></tr></table></figure><p>了解：卸载docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1.卸载依赖</span><br>yum remove docker-ce docker-ce-cli container.io<br><span class="hljs-comment">#2.删除资源</span><br><span class="hljs-built_in">rm</span> -rf /var/lib/docker<br><span class="hljs-comment"># /var/lib/docker docker默认的工作路径</span><br></code></pre></td></tr></table></figure><h1 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h1><p>1、登录阿里云</p><p>2、找到镜像加速地址</p><p>3、配置使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#配置阿里云docker镜像</span><br>sudo <span class="hljs-built_in">mkdir</span> -p /etc/docker<br><br>sudo <span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://f9dk003m.mirror.aliyuncs.com&quot;</span>]<br>&#125;<br>EOF  <br><br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br><br><span class="hljs-comment">#想多配置一些，可以再加上</span><br>sudo <span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn/&quot;</span>,<span class="hljs-string">&quot;https://hub-mirror.c.163.com&quot;</span>,<span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span>],<br><span class="hljs-string">&quot;insecure-registries&quot;</span>: [<span class="hljs-string">&quot;10.0.0.12:5000&quot;</span>]<br>&#125;<br>EOF<br><br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br><br></code></pre></td></tr></table></figure><h1 id="run流程和docker原理"><a href="#run流程和docker原理" class="headerlink" title="run流程和docker原理"></a>run流程和docker原理</h1><p><img src="/../images/image-20211208140330585.png" alt="h"></p><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><h3 id="docker是怎么工作的？"><a href="#docker是怎么工作的？" class="headerlink" title="docker是怎么工作的？"></a>docker是怎么工作的？</h3><p>docker是一个Client-Server结构的系统，Docker的守护进程运行在主机上。通过Socket从客户端访问！</p><p>DockerServer接收到Docker-Client的指令，就会执行这个命令！</p><p><img src="/../images/image-20211208140745644.png" alt="image-20211208140745644"></p><h3 id="Docker为什么比vm快？"><a href="#Docker为什么比vm快？" class="headerlink" title="Docker为什么比vm快？"></a>Docker为什么比vm快？</h3><p>1、docker有着比虚拟机更少的抽象层</p><p>2、docker利用的是宿主机的内核，vm需要是Guest OS。</p><p>所以新建一个容器的时候，docker不需要像虚拟机一样重新加载一个操作系统内核。省略了这个复杂的过程，秒级！</p><h1 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker version    <span class="hljs-comment">#docker版本信息</span><br>docker info   <span class="hljs-comment">#docker的系统信息</span><br>docker 命令 --<span class="hljs-built_in">help</span> <span class="hljs-comment">#帮助命令</span><br></code></pre></td></tr></table></figure><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><p>REPOSITORY 镜像的仓库源</p><p>TAG    镜像的标签</p><p>IMAGE_ID 镜像的ID</p><p>CREATED 镜像的创建时间</p><p>SIZE 镜像的大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images <span class="hljs-comment">#查看所有镜像</span><br></code></pre></td></tr></table></figure><p>docker search 搜索镜像</p><p>docker pull    镜像名:版本      下载镜像</p><p>docker rmi 删除镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># docker rmi -f 镜像id    删除指定镜像</span><br><span class="hljs-comment"># docker rmi -f 惊喜id 镜像id  删除多个</span><br><span class="hljs-comment"># docker rmi -f $(docker images -aq)  删除全部的镜像</span><br></code></pre></td></tr></table></figure><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p>有了镜像才可以创建容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run [可选参数] image<br><span class="hljs-comment">#参数说明</span><br>--name=<span class="hljs-string">&quot;name&quot;</span>  容器名字 tomcat1 tomcat2 ，用来区分容器<br>-d             后台方式运行<br>-it            使用交互方式运行，进入容器查看内容<br>-p             指定容器的端口 -p 8081:8080  宿主机8081映射docker8080<br>-p ip:主机端口:容器端口<br>-P             随机指定端口<br><span class="hljs-comment">#启动并进入容器</span><br>docker run -it centos /bin/bash<br><span class="hljs-comment">#从容器退出</span><br><span class="hljs-built_in">exit</span><br><br>docker ps <span class="hljs-comment">#列出当前正在运行的容器</span><br>docker ps -a <span class="hljs-comment">#列出当前正在运行的容器，和历史运行过的容器</span><br>docker ps -n=2 <span class="hljs-comment">#显示最近创建的2个容器</span><br>-q <span class="hljs-comment">#只显示容器的编号</span><br><br></code></pre></td></tr></table></figure><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span> <span class="hljs-comment">#直接退出容器</span><br>Ctrl+P+Q <span class="hljs-comment">#容器不停止，退出容器</span><br></code></pre></td></tr></table></figure><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">rm</span> 容器<span class="hljs-built_in">id</span>  <span class="hljs-comment">#删除指定的容器，不能删除运行中的容器</span><br>docker <span class="hljs-built_in">rm</span> -f $(docker ps -aq) <span class="hljs-comment">#删除全部容器</span><br>docker pa -a -q|xargs docker <span class="hljs-built_in">rm</span> <span class="hljs-comment">#删除全部容器</span><br><br></code></pre></td></tr></table></figure><h3 id="启动和停止容器"><a href="#启动和停止容器" class="headerlink" title="启动和停止容器"></a>启动和停止容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker start 容器<span class="hljs-built_in">id</span>    <span class="hljs-comment">#启动容器</span><br>docker restart 容器<span class="hljs-built_in">id</span>  <span class="hljs-comment">#重启容器</span><br>docker stop 容器<span class="hljs-built_in">id</span>     <span class="hljs-comment">#停止当前正在运行的容器</span><br>docker <span class="hljs-built_in">kill</span>  容器<span class="hljs-built_in">id</span> <span class="hljs-comment">#强制停止容器</span><br></code></pre></td></tr></table></figure><h2 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d centos  <span class="hljs-comment">#docker ps,发现centos停止了</span><br><span class="hljs-comment">#常见的坑： docker容器使用后台运行，就必须要有一个前台进程，docker发现没有应用，就会自动停止</span><br><span class="hljs-comment">#nginx，容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了。</span><br></code></pre></td></tr></table></figure><p>查看日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker logs -tf --<span class="hljs-built_in">tail</span> 10 容器<span class="hljs-built_in">id</span> <span class="hljs-comment">#显示10条</span><br><br><span class="hljs-comment">#用一段脚本</span><br>docker run -d centos /bin/sh -c <span class="hljs-string">&quot;while true;do echo cdr;sleep 1;done&quot;</span><br><br></code></pre></td></tr></table></figure><p>查看容器中的进程信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker top 容器<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><p>查看元数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker inspect 容器<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><p>进入当前正在运行的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#方式1 进入容器后开启一个新的终端</span><br>docker <span class="hljs-built_in">exec</span> -it 容器<span class="hljs-built_in">id</span> /bin/bash<br><br><br><span class="hljs-comment">#方式2 进入容器后进入容器正在执行的终端</span><br>docker attach 容器<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><p>从容器内拷贝文件到主机上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">cp</span> 容器<span class="hljs-built_in">id</span>:/home/test.java /home<br></code></pre></td></tr></table></figure><h2 id="创建nginx容器"><a href="#创建nginx容器" class="headerlink" title="创建nginx容器"></a>创建nginx容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --name nginx01 -p 3322:80 nginx<br>curl localhost:3322<br><span class="hljs-comment"># CURL: (56) RECV FAILURE: CONNECTION RESET BY PEER</span><br><span class="hljs-comment"># 如果发生这种情况，执行下面的命令</span><br>systemctl stop docker   <span class="hljs-comment">#停止docker</span><br><span class="hljs-comment">#如果有warning：docker.socket仍在使用，</span><br><span class="hljs-comment">#关闭 systemctl stop docker.socket</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> dev docker0 down<br>brctl delbr docker0 <span class="hljs-comment">#删除docker0网桥</span><br>brctl addbr docker0 <span class="hljs-comment">#增加docker0网桥</span><br>ip addr add 172.16.10.1/24 dev docker0 <span class="hljs-comment">#增加网卡</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> dev docker0 up <span class="hljs-comment">#启用网卡</span><br>systemctl restart docker <span class="hljs-comment">#重启docker服务</span><br><span class="hljs-comment">#再执行curl localhost:3322</span><br>curl localhost:3322<br></code></pre></td></tr></table></figure><h2 id="安装tomact"><a href="#安装tomact" class="headerlink" title="安装tomact"></a>安装tomact</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull tomcat<br>docker run -d -p 3355:8080 --name tomcat01 tomcat<br><span class="hljs-comment">#测试访问返回404</span><br><span class="hljs-comment">#进入容器</span><br>docker <span class="hljs-built_in">exec</span> -it tomcat01 /bin/bash<br><span class="hljs-comment">#1.linux命令少了 2.没有webapps 因为阿里云镜像原因，默认是最小的镜像，不必要的都被剔除掉了。</span><br><span class="hljs-comment">#解决404</span><br><span class="hljs-comment">#复制webapps.dist下的所有文件到 webapps</span><br><span class="hljs-built_in">cp</span> -r webapps.dist/* webapps<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker stats <span class="hljs-comment">#查看内存</span><br></code></pre></td></tr></table></figure><h2 id="安装elastciserach"><a href="#安装elastciserach" class="headerlink" title="安装elastciserach"></a>安装elastciserach</h2><p><img src="/../images/image-20211210110027055.png" alt="image-20211210110027055"></p><h2 id="安装可视化工具"><a href="#安装可视化工具" class="headerlink" title="安装可视化工具"></a>安装可视化工具</h2><ul><li>portainer(不是最佳选择)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -p 8088:9000 \<br>--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=<span class="hljs-literal">true</span> portainer/portainer<br></code></pre></td></tr></table></figure><ul><li>Rancher（CI\CD再用）</li></ul><h2 id="commit-镜像"><a href="#commit-镜像" class="headerlink" title="commit 镜像"></a>commit 镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker commit <span class="hljs-comment">#提交容器成为一个新的副本</span><br>docker commit -m=<span class="hljs-string">&quot;提交的描述信息&quot;</span> -a=<span class="hljs-string">&quot;作者&quot;</span> 容器<span class="hljs-built_in">id</span> 目标镜像名:[tag]<br></code></pre></td></tr></table></figure><p>实战测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动一个默认的tomcat</span><br>docker run -d -p 8080:8080 --name tomcat01 tomcat:9.0<br><span class="hljs-comment">#这个tomcat是没有webapps</span><br><span class="hljs-comment">#进入tomcat，把webapps.dist下的文件复制到 webapps</span><br>docker <span class="hljs-built_in">exec</span> -it 771 /bin/bash<br><span class="hljs-built_in">cp</span> -r webapps.dist/* webapps<br><span class="hljs-comment"># Ctrl+P+Q 退出容器,提交成镜像</span><br>docker commit -m=<span class="hljs-string">&quot;add webapps&quot;</span> -a=<span class="hljs-string">&quot;cdr&quot;</span> 771 tomcat02:1.0<br></code></pre></td></tr></table></figure><h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><p>将容器内的目录挂载到linux上，容器的持久化和同步操作。容器间也可以数据共享。</p><h2 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h2><blockquote><p>方式一：直接使用命令来挂载  -v</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it -v 主机目录：容器内目录<br><br><span class="hljs-comment">#测试</span><br>docker run -it -v /home/ceshi:/home centos /bin/bash<br><br><br></code></pre></td></tr></table></figure><p>好处：以后修改只需要在本机修改，容器内自动同步</p><h2 id="实战：安装MySQL"><a href="#实战：安装MySQL" class="headerlink" title="实战：安装MySQL"></a>实战：安装MySQL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#获取mysql镜像</span><br>docker pull mysql:5.7<br><span class="hljs-comment">#启动容器,需要做数据挂载  安装mysql需要配置密码</span><br>docker run -d -p 3307:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7<br></code></pre></td></tr></table></figure><h2 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#匿名挂载</span><br>-v 容器内路径<br>docker run -d --name nginx01 -p 3322:80   -v /etc/nginx nginx<br><span class="hljs-comment">#查看所有的 volume卷的情况</span><br>docker volume <span class="hljs-built_in">ls</span><br><span class="hljs-comment"># DRIVERVOLUME NAME</span><br>  <span class="hljs-built_in">local</span>9f38928392faaaa<br><span class="hljs-comment">#这种就是匿名挂载，只写了容器内路径，没有写容器外路径</span><br><br><span class="hljs-comment">#具名挂载</span><br>docker run -d -P --nae nginx02 -v juming-nginx:/etc/nginx nginx<br>docker volume <span class="hljs-built_in">ls</span><br><span class="hljs-comment"># DRIVERVOLUME NAME</span><br>  <span class="hljs-built_in">local</span>juming-nginx<br><span class="hljs-comment"># 通过 -v 卷名：容器内路径</span><br><span class="hljs-comment"># 查看一下这个卷</span><br>docker volume inspect juming-nginx<br><span class="hljs-comment">#所有的docker容器内的卷，没有指定目录的情况下都在 `/var/lib/docker/volumes/卷名/_data`</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="language-bash">如何确定是具名挂载还是匿名挂载，还是指定路径挂载</span><br>-v 容器内路径#匿名挂载<br>-v 卷名：容器内路径 #具名挂载<br>-v /宿主机路径：容器内路径 #指定路径挂载<br></code></pre></td></tr></table></figure><p>拓展</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="language-bash">通过 -v容器内路径：ro rw 改变读写权限</span><br><span class="hljs-meta"># </span><span class="language-bash">ro  <span class="hljs-built_in">readonly</span>只读 ，这个路径只能通过宿主机来改变，容器内部是无法操作的</span><br><span class="hljs-meta"># </span><span class="language-bash">rw  readwrite 可读可写</span><br>docker run -d -P --name nginx01 -v juming-nginx:/etx/nginx:ro nginx<br>docker run -d -P --name nginx01 -v juming-nginx:/etx/nginx:rw nginx<br></code></pre></td></tr></table></figure><h2 id="初识Dockerfile"><a href="#初识Dockerfile" class="headerlink" title="初识Dockerfile"></a>初识Dockerfile</h2><p>Dockerfile是用来构建docker镜像的构建文件,命令脚本</p><p>通过这个脚本可以生成镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#在home下面新建一个目录 docker-test</span><br><span class="hljs-built_in">cd</span> /home/docker-test<br><span class="hljs-comment"># 创建一个dockerfile文件，名字可以随机，建议Dockerfile</span><br>vim dockerfile01<br><span class="hljs-comment">#dockerfile01内容 指令（大写） 参数</span><br>FROM centos<br><br>VOLUME [<span class="hljs-string">&quot;volume01&quot;</span>,<span class="hljs-string">&quot;volume02&quot;</span>]<br><br>CMD <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;---end---&quot;</span><br>CMD /bin/bash<br><span class="hljs-comment">###########</span><br>docker build -f /home/docker-test/dockerfile01 -t cdr/centos:1.0 .<br></code></pre></td></tr></table></figure><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p>容器之间同步卷</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it --name docker02 --volumes-from docker01 centos<br><span class="hljs-comment">#相当于 docker02 extends docker01 两个容器互相同步共享卷</span><br><span class="hljs-comment">#可以删除docker01，卷文件依旧还在，相当于备份</span><br></code></pre></td></tr></table></figure><p>多个mysql同步数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -p 3307:3306 -v /etc/mysql/conf.d -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7<br><br>docker run -d -p 3308:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volumes-from mysql01 mysql:5.7<br><br><span class="hljs-comment">#这个时候可以实现两个数据库数据同步</span><br></code></pre></td></tr></table></figure><h1 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h1><p>构建步骤：</p><p>1.编写一个dockerfile文件</p><p>2.docker build构建成为一个镜像</p><p>3.docker run 运行容器</p><p>4.docker push 发布镜像（Docker hub ，阿里云镜像仓库）</p><h2 id="dockerfile构建过程"><a href="#dockerfile构建过程" class="headerlink" title="dockerfile构建过程"></a>dockerfile构建过程</h2><p><strong>基础知识</strong>：</p><p>1、每个保留关键字（指令）都必须是大写字母</p><p>2、执行从上到下顺序执行</p><p>3、#表示注释</p><p>4、每一个指令都会创建提交一个镜像层，并提交</p><p><img src="/../images/image-20211210164701572.png" alt="image-20211210164701572"></p><h2 id="dockerfile的指令"><a href="#dockerfile的指令" class="headerlink" title="dockerfile的指令"></a>dockerfile的指令</h2><p><img src="/../images/image-20211210165029068.png" alt="image-20211210165029068"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">FROM<span class="hljs-comment">#基础镜像，一切从这里开始构建</span><br>MAINTAINER<span class="hljs-comment">#镜像是谁写的，姓名+邮箱</span><br>RUN<span class="hljs-comment">#镜像构建的时候需要运行的命令</span><br>ADD<span class="hljs-comment">#步骤，tomcat镜像，这个tomcat压缩包！添加内容</span><br>WORKDIR<span class="hljs-comment">#镜像的工作目录</span><br>VOLUME<span class="hljs-comment">#挂载的目录</span><br>EXPOSE<span class="hljs-comment">#镜像暴露的端口</span><br>CMD<span class="hljs-comment">#指定这个容器启动的时候需要运行的命令,只有最后一个会生效，可被替代</span><br>ENTRYPOINT <span class="hljs-comment">#指定这个容器启动的时候需要运行的命令,可以追加命令</span><br>ONBUILD<span class="hljs-comment">#当构建一个被继承Dockerfile 这个时候就会运行ONBUILD的指令，触发指令</span><br>COPY<span class="hljs-comment">#类似ADD，将文件拷贝到镜像中</span><br>ENV<span class="hljs-comment">#构建的时候设置环境变量</span><br></code></pre></td></tr></table></figure><h2 id="创建一个自己的centos"><a href="#创建一个自己的centos" class="headerlink" title="创建一个自己的centos"></a>创建一个自己的centos</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta"># </span><span class="language-bash">1、编写dockerfile的文件</span><br>FROM centos<br>MAINTAINER cdr&lt;592184316@qq.com&gt;<br><br>ENV MYPATH /usr/local<br>WORKDIR $MYPATH<br><br>RUN yum -y install vim<br>RUN yum -y install net-tools<br><br>EXPOSE 80<br><br>CMD echo $MYPATH<br>CMD echo &quot;---end---&quot;<br>CMD /bin/bash<br><span class="hljs-meta"></span><br><span class="hljs-meta"># </span><span class="language-bash">2、通过这个文件构建镜像</span><br>docker build -f cdrdockerfile-centos -t cdrcentos:0.1 .<br></code></pre></td></tr></table></figure><p>列出本地进行的变更历史</p><p>docker history 容器id</p><h2 id="docker安装redis"><a href="#docker安装redis" class="headerlink" title="docker安装redis"></a>docker安装redis</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在home目录下创建和redis挂载在目录</span><br><span class="hljs-built_in">cd</span> /home<br><span class="hljs-built_in">mkdir</span> myredis<br><span class="hljs-built_in">cd</span> myredis<br><span class="hljs-built_in">mkdir</span> data<br><span class="hljs-built_in">mkdir</span> config<br>vim redis.conf<br>port 6379<br>requirepass 123456<br>appendonly <span class="hljs-built_in">yes</span><br>protected-mode no<br>daemonize no <span class="hljs-comment">#守护进程一定要关，不然在docker run -d是会有冲突</span><br><span class="hljs-comment">##########拉取redis镜像##########</span><br>docker pull redis<br><span class="hljs-comment"># 启动</span><br>docker run -d -p 6378:6379 --name redis01 -v /home/myredis/data:/data -v /home/myredis/config/redis.conf:/etc/redis/redis.conf redis:latest redis-server /etc/redis/redis.conf<br></code></pre></td></tr></table></figure><h2 id="CMD和ENTRYPOINT区别"><a href="#CMD和ENTRYPOINT区别" class="headerlink" title="CMD和ENTRYPOINT区别"></a>CMD和ENTRYPOINT区别</h2> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">CMD<span class="hljs-comment">#指定这个容器启动的时候需要运行的命令,只有最后一个会生效，替换之前的CMD</span><br>ENTRYPOINT <span class="hljs-comment">#指定这个容器启动的时候需要运行的命令,可以追加命令</span><br></code></pre></td></tr></table></figure><h2 id="实战：Tomcat镜像"><a href="#实战：Tomcat镜像" class="headerlink" title="实战：Tomcat镜像"></a>实战：Tomcat镜像</h2><p>1、准备镜像文件tomcat压缩包，jdk压缩包</p><p>2、编写Dockerfile文件和readme.txt，官方命名Dockerfile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta"># </span><span class="language-bash">1、编写Dockerfile文件</span><br>FROM centos<br>MAINTAINER cdr&lt;592184316@qq.com&gt;<br><br>COPY readme.txt /usr/local/readme.txt<br><br>ADD jdk-8u11-linux-x64.tar.gz /usr/local/<br>ADD apache-tomcat-9.0.22.tar.gz /usr/local/<br><br>RUN yum -y install vim<br><br>ENV MYPATH /usr/local<br>WORKDIR $MYPATH<br><br>ENV JAVA_HOME /usr/local/jdk1.8.0_11<br>ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br>ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.22<br>ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.22<br>ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin<br><br>EXPOSE 8080<br><br>CMD /usr/local/apache-tomcat-9.0.22/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-9.0.22/bin/logs/catalina.out<br><span class="hljs-meta"></span><br><span class="hljs-meta"># </span><span class="language-bash">2、构建镜像</span><br>docker build -t cdrtomcat .<br><span class="hljs-meta"># </span><span class="language-bash">3、启动</span><br>docker run -d -p 9090:8080 --name cdrtomcat01 -v /home/cdr/build/tomcat/test:/usr/local/apache-tomcat-9.0.22/webapps/test -v /home/cdr/build/tomcatlogs/:/usr/local/apache-tomcat-9.0.22/logs cdrtomcat<br><br></code></pre></td></tr></table></figure><p>3、访问测试</p><p>4、发布前端项目（由于做了卷挂载，直接在本地编写项目可以发布了）</p><h2 id="发布自己的镜像到dockerhub"><a href="#发布自己的镜像到dockerhub" class="headerlink" title="发布自己的镜像到dockerhub"></a>发布自己的镜像到dockerhub</h2><p>1、注册账号</p><p>2、提交自己的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker login -u cdr<br><span class="hljs-comment"># 输入密码</span><br><span class="hljs-comment"># 登录成功</span><br><span class="hljs-comment"># push镜像</span><br>docker push cdr/cdrtomcat01<br><span class="hljs-comment"># push镜像可能发生的问题，解决方法</span><br><span class="hljs-comment"># 增加一个tag</span><br>docker tag 镜像<span class="hljs-built_in">id</span> cdrtomcat01:1.0<br>docker push cdrtomcat01:1.0<br><br></code></pre></td></tr></table></figure><h2 id="发布到阿里云镜像服务"><a href="#发布到阿里云镜像服务" class="headerlink" title="发布到阿里云镜像服务"></a>发布到阿里云镜像服务</h2><p>1、登录阿里云</p><p>2、找到容器镜像服务（容器镜像服务&gt;&gt;实例列表&gt;&gt;个人版）</p><p>3、创建命名空间cdrnb</p><p>4、创建容器镜像cdr</p><p>5、登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 阿里云，实际使用看下方</span><br>$ docker login --username=曹二龙先生 registry.cn-qingdao.aliyuncs.com<br>$ docker tag [ImageId] registry.cn-qingdao.aliyuncs.com/cdrnb/cdr:[镜像版本号]<br>$ docker push registry.cn-qingdao.aliyuncs.com/cdrnb/cdr:[镜像版本号]<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 实际使用</span><br><span class="hljs-comment"># 1、登录</span><br>docker login --username=cdr registry.cn-beijing.aliyuncs.com<br><span class="hljs-comment"># 2、给镜像添加版本号</span><br>docker tag 镜像<span class="hljs-built_in">id</span> registry.cn-beijing.aliyuncs.com/cdr/cdrtomcat01:1.0<br><span class="hljs-comment"># 3、push</span><br>docker push registry.cn-beijing.aliyuncs.com/cdr/cdrtomcat01:1.0<br></code></pre></td></tr></table></figure><h1 id="docker网络"><a href="#docker网络" class="headerlink" title="docker网络"></a>docker网络</h1><h2 id="理解docker0"><a href="#理解docker0" class="headerlink" title="理解docker0"></a>理解docker0</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/article/design-mode/"/>
    <url>/article/design-mode/</url>
    
    <content type="html"><![CDATA[<h1 id="1-软件设计"><a href="#1-软件设计" class="headerlink" title="1.软件设计"></a>1.软件设计</h1><h2 id="1-1软件设计原则"><a href="#1-1软件设计原则" class="headerlink" title="1.1软件设计原则"></a>1.1软件设计原则</h2><h3 id="1-1-1-开闭原则"><a href="#1-1-1-开闭原则" class="headerlink" title="1.1.1 开闭原则"></a>1.1.1 开闭原则</h3><p><strong>对扩展开发，对修改关闭</strong>。使程序的扩展性好，易于维护和升级。</p><p>想要达到这样的效果，需要使用接口和抽象类。</p><h3 id="1-1-2-里氏代换原则"><a href="#1-1-2-里氏代换原则" class="headerlink" title="1.1.2 里氏代换原则"></a>1.1.2 里氏代换原则</h3><p>子类可以扩展父类的功能，但不能改变父类原有的功能。换句话说，子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。</p><h3 id="1-1-3-依赖倒转原则"><a href="#1-1-3-依赖倒转原则" class="headerlink" title="1.1.3 依赖倒转原则"></a>1.1.3 依赖倒转原则</h3><p>面向对象的开发很好的解决了这个问题，一般情况下抽象的变化概率很小，让用户程序依赖于抽象，实现的细节也依赖于抽象。即使实现细节不断变动，只要抽象不变，客户程序就不需要变化。这大大降低了客户程序与实现细节的耦合度。</p><h3 id="1-1-4-接口隔离原则"><a href="#1-1-4-接口隔离原则" class="headerlink" title="1.1.4 接口隔离原则"></a>1.1.4 接口隔离原则</h3><p>客户端不应该被迫依赖于它不使用的方法；一个类对另一个类的依赖应该建立在最小的接口上。</p><h3 id="1-1-5-迪米特法则"><a href="#1-1-5-迪米特法则" class="headerlink" title="1.1.5 迪米特法则"></a>1.1.5 迪米特法则</h3><p>如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。</p><h3 id="1-1-6-合成复用原则"><a href="#1-1-6-合成复用原则" class="headerlink" title="1.1.6 合成复用原则"></a>1.1.6 合成复用原则</h3><p>合成复用原则是指：尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>导出数据库表结构工具</title>
    <link href="/article/database-export/"/>
    <url>/article/database-export/</url>
    
    <content type="html"><![CDATA[<h3 id="gitee上的项目database-export"><a href="#gitee上的项目database-export" class="headerlink" title="gitee上的项目database-export"></a>gitee上的项目database-export</h3><blockquote><p><a href="https://gitee.com/pomz/database-export?_from=gitee_search">https://gitee.com/pomz/database-export?_from=gitee_search</a></p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot配置跨域</title>
    <link href="/article/cros/"/>
    <url>/article/cros/</url>
    
    <content type="html"><![CDATA[<h1 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CrosConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>               .allowCredentials(<span class="hljs-literal">true</span>)<br>                .allowedOriginPatterns(<span class="hljs-string">&quot;*&quot;</span>)<br>                .allowedMethods(<span class="hljs-string">&quot;POST&quot;</span>,<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;PUT&quot;</span>,<span class="hljs-string">&quot;OPTIONS&quot;</span>,<span class="hljs-string">&quot;DELETE&quot;</span>)<br>                .allowedHeaders(<span class="hljs-string">&quot;*&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CrosConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HandlerInterceptor</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                response.addHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>                response.addHeader(<span class="hljs-string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="hljs-string">&quot;GET, POST, PUT, DELETE, OPTIONS&quot;</span>);<br>                response.addHeader(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>,<br>                        <span class="hljs-string">&quot;Content-Type,X-Requested-With,accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers,token&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自定义的请求头需要指定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">response.addHeader(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>,<br>                        <span class="hljs-string">&quot;Content-Type,X-Requested-With,accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers,token&quot;</span>);<br></code></pre></td></tr></table></figure><h1 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h1><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@CrossOrigin</span><br></code></pre></td></tr></table></figure><p>在需要跨域的接口上加@CrossOrigin注解</p><h1 id="第四种"><a href="#第四种" class="headerlink" title="第四种"></a>第四种</h1><p>复杂带token，请求拦截</p><p>TokenInterceptor.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TokenInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TokenMapper tokenMapper;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">//跨域问题</span><br>        response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>        <span class="hljs-comment">//response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;POST, GET, OPTIONS, DELETE, PUT&quot;);</span><br>        response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="hljs-string">&quot;POST, GET, OPTIONS&quot;</span>);<br>        response.setHeader(<span class="hljs-string">&quot;Access-Control-Max-Age&quot;</span>, <span class="hljs-string">&quot;3600&quot;</span>);<br>        response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="hljs-string">&quot;Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With,Token&quot;</span>);<br>        response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);<br><br>        <span class="hljs-comment">//登录放行</span><br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/api/admin/login&quot;</span>.equals(request.getRequestURI()))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/api/emp/upload&quot;</span>.equals(request.getRequestURI()))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/api/emp/updatePic&quot;</span>.equals(request.getRequestURI()))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;jpg&quot;</span>.equals(request.getRequestURI().substring(request.getRequestURI().length()-<span class="hljs-number">3</span>,request.getRequestURI().length())))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;jpeg&quot;</span>.equals(request.getRequestURI().substring(request.getRequestURI().length()-<span class="hljs-number">4</span>,request.getRequestURI().length())))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br><br>        <span class="hljs-comment">//System.out.println(request);</span><br>        <span class="hljs-comment">//权限路径拦截</span><br>        response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>       <span class="hljs-comment">// PrintWriter resultWriter = response.getWriter();</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">headerToken</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;Token&quot;</span>);<br>        <span class="hljs-comment">//System.out.println(headerToken);</span><br>        <span class="hljs-comment">//判断请求信息</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == headerToken||headerToken.trim().equals(<span class="hljs-string">&quot;&quot;</span>))&#123;<br>            render(response,<span class="hljs-string">&quot;400,未登录&quot;</span>);<br>           <span class="hljs-comment">// resultWriter.write(&quot;你没有token，需要登录&quot;);</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">//解析token信息</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> Jwts.parser().setSigningKey(<span class="hljs-string">&quot;dahao&quot;</span>).parseClaimsJws(headerToken).getBody();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">tokenUserId</span> <span class="hljs-operator">=</span>(String) claims.get(<span class="hljs-string">&quot;no&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">itokenUserId</span> <span class="hljs-operator">=</span> Integer.parseInt(tokenUserId);<br>            <span class="hljs-comment">//根据客户token查找数据库token</span><br>            <span class="hljs-type">Token</span> <span class="hljs-variable">myToken</span> <span class="hljs-operator">=</span> tokenMapper.findByUserId(itokenUserId);<br>            <span class="hljs-comment">//数据库没有token记录</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span>==myToken)&#123;<br>                render(response,<span class="hljs-string">&quot;400,未登录&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>               <span class="hljs-comment">// resultWriter.write(&quot;我没有你的token？,需要登录&quot;);</span><br>            &#125;<br>            <span class="hljs-comment">//数据库Token与客户Token比较</span><br>            <span class="hljs-keyword">if</span>( !headerToken.equals(myToken.getToken()) )&#123;<br>               <span class="hljs-comment">// resultWriter.write(&quot;你的token修改过？,需要登录&quot;);</span><br>                render(response,<span class="hljs-string">&quot;400,未登录&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-comment">//判断Token过期</span><br>            Date tokenDate=(Date)claims.getExpiration();<br>            <span class="hljs-type">int</span> chaoshi=(<span class="hljs-type">int</span>)(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().getTime()-tokenDate.getTime())/<span class="hljs-number">1000</span>;<br>            <span class="hljs-keyword">if</span>(chaoshi&gt;<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span>*<span class="hljs-number">3</span>)&#123;<br>                render(response,<span class="hljs-string">&quot;400,未登录&quot;</span>);<br>                <span class="hljs-comment">//resultWriter.write(&quot;你的token过期了？,需要登录&quot;);</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            render(response,<span class="hljs-string">&quot;400,未登录&quot;</span>);<br>            <span class="hljs-comment">//resultWriter.write(&quot;反正token不对,需要登录&quot;);</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">//最后才放行</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">(HttpServletResponse response, String code)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>        out.write(code.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>        out.flush();<br>        out.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>TokenConfiguration.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TokenConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurerAdapter</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    TokenInterceptor <span class="hljs-title function_">tokenInterceptor</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TokenInterceptor</span>();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>      <br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(tokenInterceptor()).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/admin/*&quot;</span>,<span class="hljs-string">&quot;/swagger-resources/**&quot;</span>, <span class="hljs-string">&quot;/webjars/**&quot;</span>, <span class="hljs-string">&quot;/v2/**&quot;</span>, <span class="hljs-string">&quot;/swagger-ui.html/**&quot;</span>,<span class="hljs-string">&quot;/doc.html&quot;</span>);<br><br>        <span class="hljs-built_in">super</span>.addInterceptors(registry);<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo搭建博客</title>
    <link href="/article/blog/"/>
    <url>/article/blog/</url>
    
    <content type="html"><![CDATA[<p>安装git</p><p>安装nodejs</p><p>安装Hexo</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install hexo-cli -g<br></code></pre></td></tr></table></figure><p>在github创建一个仓库或者gitee，仓库名字最好和用户名一样,开启服务gitee pages，强制https得到url</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">https://<span class="hljs-title">github.com</span>/<span class="hljs-title">caodengrui</span>/<span class="hljs-title">caodengrui.github.io.git</span></span><br><span class="hljs-function"><span class="hljs-title">https</span>://<span class="hljs-title">caodengrui.gitee.io</span></span><br></code></pre></td></tr></table></figure><p>创建博客</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 执行下面命令会创建出一个cdr.github.io的文件夹<br>hexo init caodengrui.github.io<br><br><span class="hljs-built_in">cd</span> caodengrui.github.io<br># 下载一个主题<br>git clone https://github.com/iissnan/hexo-theme-next<br># 修改一下配置文件<br><span class="hljs-function">title: <span class="hljs-title">cdrblog</span></span><br><span class="hljs-function"><span class="hljs-title">description</span>: &#x27;<span class="hljs-title">cdrnb</span>&#x27;</span><br><span class="hljs-function"><span class="hljs-title">author</span>: <span class="hljs-title">cdr</span></span><br><span class="hljs-function"><span class="hljs-title">language</span>: <span class="hljs-title">zh</span>-<span class="hljs-title">Hans</span></span><br><span class="hljs-function"><span class="hljs-title">theme</span>: <span class="hljs-title">next</span></span><br><span class="hljs-function"><span class="hljs-title">deploy</span>:</span><br><span class="hljs-function">  <span class="hljs-title">type</span>: <span class="hljs-title">git</span></span><br><span class="hljs-function">  <span class="hljs-title">repo</span>: <span class="hljs-title">https</span>://<span class="hljs-title">github.com</span>/<span class="hljs-title">caodengrui</span>/<span class="hljs-title">caodengrui.github.io.git</span></span><br></code></pre></td></tr></table></figure><p>在<code>cdr.github.io\source\_posts</code>下创建md文件 cdrblog.md，开始写</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 标题，最好打开源码模式设置标题</span><br><br>---<br>title: 笔记<br><br><br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 执行命令<br># 执行后，浏览器输入localhost:<span class="hljs-number">4000</span>访问<br>hexo s<br># 安装hexo-deployer-git自动部署发布工具<br>npm install hexo-deployer-git --save<br># 发布<br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br><br><br># 出现样式问题，修改_config.yml<br><span class="hljs-function">url: <span class="hljs-title">https</span>://<span class="hljs-title">caodengrui.gitee.io</span></span><br><span class="hljs-function"><span class="hljs-title">root</span>: /<span class="hljs-title">caodengrui</span>/</span><br><span class="hljs-function"></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
